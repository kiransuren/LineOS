
LineOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005988  08005988  00015988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e8  080059e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f0  080059f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080059f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a48  20000010  08005a08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a58  08005a08  00024a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175b3  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fb9  00000000  00000000  000375f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003b958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002da3  00000000  00000000  0003cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b2c  00000000  00000000  0003f99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a95  00000000  00000000  000544c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eaf5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005334  00000000  00000000  000eafac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005970 	.word	0x08005970

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005970 	.word	0x08005970

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fb74 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f824 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f93a 	bl	8000768 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004f4:	f000 f88a 	bl	800060c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 f90c 	bl	8000714 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start timer
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004fc:	2100      	movs	r1, #0
 80004fe:	480a      	ldr	r0, [pc, #40]	; (8000528 <main+0x44>)
 8000500:	f001 fc00 	bl	8001d04 <HAL_TIM_PWM_Start>
  htim1.Instance->CCR1 = 100;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <main+0x44>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2264      	movs	r2, #100	; 0x64
 800050a:	635a      	str	r2, [r3, #52]	; 0x34

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800050c:	f002 fca8 	bl	8002e60 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <main+0x48>)
 8000512:	2100      	movs	r1, #0
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <main+0x4c>)
 8000516:	f002 fced 	bl	8002ef4 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a05      	ldr	r2, [pc, #20]	; (8000534 <main+0x50>)
 800051e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000520:	f002 fcc2 	bl	8002ea8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000524:	e7fe      	b.n	8000524 <main+0x40>
 8000526:	bf00      	nop
 8000528:	2000002c 	.word	0x2000002c
 800052c:	080059ac 	.word	0x080059ac
 8000530:	08000845 	.word	0x08000845
 8000534:	200000b8 	.word	0x200000b8

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f005 fa0a 	bl	8005960 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000584:	4a20      	ldr	r2, [pc, #128]	; (8000608 <SystemClock_Config+0xd0>)
 8000586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <SystemClock_Config+0xd0>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000594:	607b      	str	r3, [r7, #4]
 8000596:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a0:	2310      	movs	r3, #16
 80005a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005ac:	2308      	movs	r3, #8
 80005ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005b0:	2354      	movs	r3, #84	; 0x54
 80005b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b4:	2302      	movs	r3, #2
 80005b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	f107 0320 	add.w	r3, r7, #32
 80005c0:	4618      	mov	r0, r3
 80005c2:	f000 fdc9 	bl	8001158 <HAL_RCC_OscConfig>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005cc:	f000 f954 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d0:	230f      	movs	r3, #15
 80005d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d4:	2302      	movs	r3, #2
 80005d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e6:	f107 030c 	add.w	r3, r7, #12
 80005ea:	2102      	movs	r1, #2
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 f82b 	bl	8001648 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f8:	f000 f93e 	bl	8000878 <Error_Handler>
  }
}
 80005fc:	bf00      	nop
 80005fe:	3750      	adds	r7, #80	; 0x50
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b092      	sub	sp, #72	; 0x48
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000612:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800061c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
 800062c:	615a      	str	r2, [r3, #20]
 800062e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000630:	1d3b      	adds	r3, r7, #4
 8000632:	2220      	movs	r2, #32
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f005 f992 	bl	8005960 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800063c:	4b33      	ldr	r3, [pc, #204]	; (800070c <MX_TIM1_Init+0x100>)
 800063e:	4a34      	ldr	r2, [pc, #208]	; (8000710 <MX_TIM1_Init+0x104>)
 8000640:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400;
 8000642:	4b32      	ldr	r3, [pc, #200]	; (800070c <MX_TIM1_Init+0x100>)
 8000644:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000648:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b30      	ldr	r3, [pc, #192]	; (800070c <MX_TIM1_Init+0x100>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000650:	4b2e      	ldr	r3, [pc, #184]	; (800070c <MX_TIM1_Init+0x100>)
 8000652:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000656:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b2c      	ldr	r3, [pc, #176]	; (800070c <MX_TIM1_Init+0x100>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800065e:	4b2b      	ldr	r3, [pc, #172]	; (800070c <MX_TIM1_Init+0x100>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <MX_TIM1_Init+0x100>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800066a:	4828      	ldr	r0, [pc, #160]	; (800070c <MX_TIM1_Init+0x100>)
 800066c:	f001 fafa 	bl	8001c64 <HAL_TIM_PWM_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000676:	f000 f8ff 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800067a:	2300      	movs	r3, #0
 800067c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800067e:	2300      	movs	r3, #0
 8000680:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000686:	4619      	mov	r1, r3
 8000688:	4820      	ldr	r0, [pc, #128]	; (800070c <MX_TIM1_Init+0x100>)
 800068a:	f002 f80f 	bl	80026ac <HAL_TIMEx_MasterConfigSynchronization>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000694:	f000 f8f0 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000698:	2360      	movs	r3, #96	; 0x60
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006a0:	2300      	movs	r3, #0
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006a4:	2300      	movs	r3, #0
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	2200      	movs	r2, #0
 80006ba:	4619      	mov	r1, r3
 80006bc:	4813      	ldr	r0, [pc, #76]	; (800070c <MX_TIM1_Init+0x100>)
 80006be:	f001 fcd9 	bl	8002074 <HAL_TIM_PWM_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80006c8:	f000 f8d6 	bl	8000878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4619      	mov	r1, r3
 80006ee:	4807      	ldr	r0, [pc, #28]	; (800070c <MX_TIM1_Init+0x100>)
 80006f0:	f002 f84a 	bl	8002788 <HAL_TIMEx_ConfigBreakDeadTime>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 80006fa:	f000 f8bd 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006fe:	4803      	ldr	r0, [pc, #12]	; (800070c <MX_TIM1_Init+0x100>)
 8000700:	f000 f914 	bl	800092c <HAL_TIM_MspPostInit>

}
 8000704:	bf00      	nop
 8000706:	3748      	adds	r7, #72	; 0x48
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	2000002c 	.word	0x2000002c
 8000710:	40010000 	.word	0x40010000

08000714 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000718:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800071a:	4a12      	ldr	r2, [pc, #72]	; (8000764 <MX_USART2_UART_Init+0x50>)
 800071c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000724:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800073a:	220c      	movs	r2, #12
 800073c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USART2_UART_Init+0x4c>)
 800074c:	f002 f882 	bl	8002854 <HAL_UART_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000756:	f000 f88f 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20000074 	.word	0x20000074
 8000764:	40004400 	.word	0x40004400

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
 8000782:	4b2d      	ldr	r3, [pc, #180]	; (8000838 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a2c      	ldr	r2, [pc, #176]	; (8000838 <MX_GPIO_Init+0xd0>)
 8000788:	f043 0304 	orr.w	r3, r3, #4
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b2a      	ldr	r3, [pc, #168]	; (8000838 <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0304 	and.w	r3, r3, #4
 8000796:	613b      	str	r3, [r7, #16]
 8000798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a25      	ldr	r2, [pc, #148]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	4b1f      	ldr	r3, [pc, #124]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a1e      	ldr	r2, [pc, #120]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	4a17      	ldr	r2, [pc, #92]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0302 	orr.w	r3, r3, #2
 80007e0:	6313      	str	r3, [r2, #48]	; 0x30
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	f003 0302 	and.w	r3, r3, #2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2120      	movs	r1, #32
 80007f2:	4812      	ldr	r0, [pc, #72]	; (800083c <MX_GPIO_Init+0xd4>)
 80007f4:	f000 fc96 	bl	8001124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	480c      	ldr	r0, [pc, #48]	; (8000840 <MX_GPIO_Init+0xd8>)
 8000810:	f000 fb04 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000814:	2320      	movs	r3, #32
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0xd4>)
 800082c:	f000 faf6 	bl	8000e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000830:	bf00      	nop
 8000832:	3728      	adds	r7, #40	; 0x28
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40020000 	.word	0x40020000
 8000840:	40020800 	.word	0x40020800

08000844 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f002 fbe3 	bl	8003018 <osDelay>
 8000852:	e7fb      	b.n	800084c <StartDefaultTask+0x8>

08000854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000866:	f000 f9d7 	bl	8000c18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40014800 	.word	0x40014800

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_MspInit+0x54>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a11      	ldr	r2, [pc, #68]	; (80008d8 <HAL_MspInit+0x54>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <HAL_MspInit+0x54>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <HAL_MspInit+0x54>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a0a      	ldr	r2, [pc, #40]	; (80008d8 <HAL_MspInit+0x54>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <HAL_MspInit+0x54>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	210f      	movs	r1, #15
 80008c6:	f06f 0001 	mvn.w	r0, #1
 80008ca:	f000 fa7d 	bl	8000dc8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800

080008dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0e      	ldr	r2, [pc, #56]	; (8000924 <HAL_TIM_PWM_MspInit+0x48>)
 80008ea:	4293      	cmp	r3, r2
 80008ec:	d115      	bne.n	800091a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <HAL_TIM_PWM_MspInit+0x4c>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	4a0c      	ldr	r2, [pc, #48]	; (8000928 <HAL_TIM_PWM_MspInit+0x4c>)
 80008f8:	f043 0301 	orr.w	r3, r3, #1
 80008fc:	6453      	str	r3, [r2, #68]	; 0x44
 80008fe:	4b0a      	ldr	r3, [pc, #40]	; (8000928 <HAL_TIM_PWM_MspInit+0x4c>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	201a      	movs	r0, #26
 8000910:	f000 fa5a 	bl	8000dc8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000914:	201a      	movs	r0, #26
 8000916:	f000 fa73 	bl	8000e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40010000 	.word	0x40010000
 8000928:	40023800 	.word	0x40023800

0800092c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a12      	ldr	r2, [pc, #72]	; (8000994 <HAL_TIM_MspPostInit+0x68>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d11e      	bne.n	800098c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_TIM_MspPostInit+0x6c>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a10      	ldr	r2, [pc, #64]	; (8000998 <HAL_TIM_MspPostInit+0x6c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <HAL_TIM_MspPostInit+0x6c>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800096a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800097c:	2301      	movs	r3, #1
 800097e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	4619      	mov	r1, r3
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <HAL_TIM_MspPostInit+0x70>)
 8000988:	f000 fa48 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800098c:	bf00      	nop
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40010000 	.word	0x40010000
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a19      	ldr	r2, [pc, #100]	; (8000a24 <HAL_UART_MspInit+0x84>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d12b      	bne.n	8000a1a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	4b18      	ldr	r3, [pc, #96]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a17      	ldr	r2, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a10      	ldr	r2, [pc, #64]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <HAL_UART_MspInit+0x88>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009fa:	230c      	movs	r3, #12
 80009fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fe:	2302      	movs	r3, #2
 8000a00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2300      	movs	r3, #0
 8000a08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a0a:	2307      	movs	r3, #7
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0x8c>)
 8000a16:	f000 fa01 	bl	8000e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a1a:	bf00      	nop
 8000a1c:	3728      	adds	r7, #40	; 0x28
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004400 	.word	0x40004400
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	4b2e      	ldr	r3, [pc, #184]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a48:	4a2d      	ldr	r2, [pc, #180]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a50:	4b2b      	ldr	r3, [pc, #172]	; (8000b00 <HAL_InitTick+0xd0>)
 8000a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a58:	60bb      	str	r3, [r7, #8]
 8000a5a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a5c:	f107 020c 	add.w	r2, r7, #12
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4611      	mov	r1, r2
 8000a66:	4618      	mov	r0, r3
 8000a68:	f001 f80e 	bl	8001a88 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000a6c:	f000 fff8 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 8000a70:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a74:	4a23      	ldr	r2, [pc, #140]	; (8000b04 <HAL_InitTick+0xd4>)
 8000a76:	fba2 2303 	umull	r2, r3, r2, r3
 8000a7a:	0c9b      	lsrs	r3, r3, #18
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_InitTick+0xd8>)
 8000a82:	4a22      	ldr	r2, [pc, #136]	; (8000b0c <HAL_InitTick+0xdc>)
 8000a84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <HAL_InitTick+0xd8>)
 8000a88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a8c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8000a8e:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <HAL_InitTick+0xd8>)
 8000a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a92:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_InitTick+0xd8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <HAL_InitTick+0xd8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_InitTick+0xd8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8000aa6:	4818      	ldr	r0, [pc, #96]	; (8000b08 <HAL_InitTick+0xd8>)
 8000aa8:	f001 f820 	bl	8001aec <HAL_TIM_Base_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d11b      	bne.n	8000af2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <HAL_InitTick+0xd8>)
 8000abc:	f001 f870 	bl	8001ba0 <HAL_TIM_Base_Start_IT>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d111      	bne.n	8000af2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000ace:	201a      	movs	r0, #26
 8000ad0:	f000 f996 	bl	8000e00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b0f      	cmp	r3, #15
 8000ad8:	d808      	bhi.n	8000aec <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8000ada:	2200      	movs	r2, #0
 8000adc:	6879      	ldr	r1, [r7, #4]
 8000ade:	201a      	movs	r0, #26
 8000ae0:	f000 f972 	bl	8000dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae4:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <HAL_InitTick+0xe0>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
 8000aea:	e002      	b.n	8000af2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000af2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3730      	adds	r7, #48	; 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023800 	.word	0x40023800
 8000b04:	431bde83 	.word	0x431bde83
 8000b08:	200000bc 	.word	0x200000bc
 8000b0c:	40014800 	.word	0x40014800
 8000b10:	20000004 	.word	0x20000004

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000b46:	f001 f98d 	bl	8001e64 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000b4c:	f001 f98a 	bl	8001e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000002c 	.word	0x2000002c
 8000b58:	200000bc 	.word	0x200000bc

08000b5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <SystemInit+0x20>)
 8000b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <SystemInit+0x20>)
 8000b68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b84:	480d      	ldr	r0, [pc, #52]	; (8000bbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b86:	490e      	ldr	r1, [pc, #56]	; (8000bc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b88:	4a0e      	ldr	r2, [pc, #56]	; (8000bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a0b      	ldr	r2, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b9c:	4c0b      	ldr	r4, [pc, #44]	; (8000bcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000baa:	f7ff ffd7 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bae:	f004 fea5 	bl	80058fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bb2:	f7ff fc97 	bl	80004e4 <main>
  bx  lr    
 8000bb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bc4:	080059f8 	.word	0x080059f8
  ldr r2, =_sbss
 8000bc8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bcc:	20004a58 	.word	0x20004a58

08000bd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <HAL_Init+0x40>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	; (8000c14 <HAL_Init+0x40>)
 8000bde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000be4:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <HAL_Init+0x40>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_Init+0x40>)
 8000bea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <HAL_Init+0x40>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HAL_Init+0x40>)
 8000bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bfc:	2003      	movs	r0, #3
 8000bfe:	f000 f8d8 	bl	8000db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c02:	200f      	movs	r0, #15
 8000c04:	f7ff ff14 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c08:	f7ff fe3c 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023c00 	.word	0x40023c00

08000c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x20>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_IncTick+0x24>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4413      	add	r3, r2
 8000c28:	4a04      	ldr	r2, [pc, #16]	; (8000c3c <HAL_IncTick+0x24>)
 8000c2a:	6013      	str	r3, [r2, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000104 	.word	0x20000104

08000c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return uwTick;
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_GetTick+0x14>)
 8000c46:	681b      	ldr	r3, [r3, #0]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000104 	.word	0x20000104

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff4c 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dda:	f7ff ff61 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	6978      	ldr	r0, [r7, #20]
 8000de6:	f7ff ffb1 	bl	8000d4c <NVIC_EncodePriority>
 8000dea:	4602      	mov	r2, r0
 8000dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff80 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff54 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	; 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e159      	b.n	80010ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8148 	bne.w	80010e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d005      	beq.n	8000e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d130      	bne.n	8000ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d017      	beq.n	8000f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	69b9      	ldr	r1, [r7, #24]
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80a2 	beq.w	80010e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b57      	ldr	r3, [pc, #348]	; (8001104 <HAL_GPIO_Init+0x2e8>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	4a56      	ldr	r2, [pc, #344]	; (8001104 <HAL_GPIO_Init+0x2e8>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb2:	4b54      	ldr	r3, [pc, #336]	; (8001104 <HAL_GPIO_Init+0x2e8>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fbe:	4a52      	ldr	r2, [pc, #328]	; (8001108 <HAL_GPIO_Init+0x2ec>)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a49      	ldr	r2, [pc, #292]	; (800110c <HAL_GPIO_Init+0x2f0>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d019      	beq.n	800101e <HAL_GPIO_Init+0x202>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a48      	ldr	r2, [pc, #288]	; (8001110 <HAL_GPIO_Init+0x2f4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d013      	beq.n	800101a <HAL_GPIO_Init+0x1fe>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a47      	ldr	r2, [pc, #284]	; (8001114 <HAL_GPIO_Init+0x2f8>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d00d      	beq.n	8001016 <HAL_GPIO_Init+0x1fa>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a46      	ldr	r2, [pc, #280]	; (8001118 <HAL_GPIO_Init+0x2fc>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d007      	beq.n	8001012 <HAL_GPIO_Init+0x1f6>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a45      	ldr	r2, [pc, #276]	; (800111c <HAL_GPIO_Init+0x300>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d101      	bne.n	800100e <HAL_GPIO_Init+0x1f2>
 800100a:	2304      	movs	r3, #4
 800100c:	e008      	b.n	8001020 <HAL_GPIO_Init+0x204>
 800100e:	2307      	movs	r3, #7
 8001010:	e006      	b.n	8001020 <HAL_GPIO_Init+0x204>
 8001012:	2303      	movs	r3, #3
 8001014:	e004      	b.n	8001020 <HAL_GPIO_Init+0x204>
 8001016:	2302      	movs	r3, #2
 8001018:	e002      	b.n	8001020 <HAL_GPIO_Init+0x204>
 800101a:	2301      	movs	r3, #1
 800101c:	e000      	b.n	8001020 <HAL_GPIO_Init+0x204>
 800101e:	2300      	movs	r3, #0
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	f002 0203 	and.w	r2, r2, #3
 8001026:	0092      	lsls	r2, r2, #2
 8001028:	4093      	lsls	r3, r2
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4313      	orrs	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001030:	4935      	ldr	r1, [pc, #212]	; (8001108 <HAL_GPIO_Init+0x2ec>)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	089b      	lsrs	r3, r3, #2
 8001036:	3302      	adds	r3, #2
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_GPIO_Init+0x304>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	43db      	mvns	r3, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4013      	ands	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001062:	4a2f      	ldr	r2, [pc, #188]	; (8001120 <HAL_GPIO_Init+0x304>)
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001068:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_GPIO_Init+0x304>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800108c:	4a24      	ldr	r2, [pc, #144]	; (8001120 <HAL_GPIO_Init+0x304>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <HAL_GPIO_Init+0x304>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	43db      	mvns	r3, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4013      	ands	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010b6:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <HAL_GPIO_Init+0x304>)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <HAL_GPIO_Init+0x304>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010e0:	4a0f      	ldr	r2, [pc, #60]	; (8001120 <HAL_GPIO_Init+0x304>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3301      	adds	r3, #1
 80010ea:	61fb      	str	r3, [r7, #28]
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	2b0f      	cmp	r3, #15
 80010f0:	f67f aea2 	bls.w	8000e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3724      	adds	r7, #36	; 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023800 	.word	0x40023800
 8001108:	40013800 	.word	0x40013800
 800110c:	40020000 	.word	0x40020000
 8001110:	40020400 	.word	0x40020400
 8001114:	40020800 	.word	0x40020800
 8001118:	40020c00 	.word	0x40020c00
 800111c:	40021000 	.word	0x40021000
 8001120:	40013c00 	.word	0x40013c00

08001124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	807b      	strh	r3, [r7, #2]
 8001130:	4613      	mov	r3, r2
 8001132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001134:	787b      	ldrb	r3, [r7, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d003      	beq.n	8001142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800113a:	887a      	ldrh	r2, [r7, #2]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001140:	e003      	b.n	800114a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001142:	887b      	ldrh	r3, [r7, #2]
 8001144:	041a      	lsls	r2, r3, #16
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	619a      	str	r2, [r3, #24]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d101      	bne.n	800116a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e267      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d075      	beq.n	8001262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001176:	4b88      	ldr	r3, [pc, #544]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 030c 	and.w	r3, r3, #12
 800117e:	2b04      	cmp	r3, #4
 8001180:	d00c      	beq.n	800119c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001182:	4b85      	ldr	r3, [pc, #532]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800118a:	2b08      	cmp	r3, #8
 800118c:	d112      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800118e:	4b82      	ldr	r3, [pc, #520]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800119a:	d10b      	bne.n	80011b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119c:	4b7e      	ldr	r3, [pc, #504]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d05b      	beq.n	8001260 <HAL_RCC_OscConfig+0x108>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d157      	bne.n	8001260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e242      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x74>
 80011be:	4b76      	ldr	r3, [pc, #472]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a75      	ldr	r2, [pc, #468]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x98>
 80011d6:	4b70      	ldr	r3, [pc, #448]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a6f      	ldr	r2, [pc, #444]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b6d      	ldr	r3, [pc, #436]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a6c      	ldr	r2, [pc, #432]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xb0>
 80011f0:	4b69      	ldr	r3, [pc, #420]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a68      	ldr	r2, [pc, #416]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b66      	ldr	r3, [pc, #408]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a65      	ldr	r2, [pc, #404]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001210:	f7ff fd16 	bl	8000c40 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fd12 	bl	8000c40 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e207      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800122a:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xc0>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff fd02 	bl	8000c40 <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fcfe 	bl	8000c40 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	; 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e1f3      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001252:	4b51      	ldr	r3, [pc, #324]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0xe8>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d063      	beq.n	8001336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800126e:	4b4a      	ldr	r3, [pc, #296]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127a:	4b47      	ldr	r3, [pc, #284]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001282:	2b08      	cmp	r3, #8
 8001284:	d11c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001286:	4b44      	ldr	r3, [pc, #272]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d116      	bne.n	80012c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d005      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d001      	beq.n	80012aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e1c7      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4937      	ldr	r1, [pc, #220]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012be:	e03a      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d020      	beq.n	800130a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_RCC_OscConfig+0x244>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ce:	f7ff fcb7 	bl	8000c40 <HAL_GetTick>
 80012d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fcb3 	bl	8000c40 <HAL_GetTick>
 80012da:	4602      	mov	r2, r0
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1a8      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b28      	ldr	r3, [pc, #160]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	4925      	ldr	r1, [pc, #148]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 8001304:	4313      	orrs	r3, r2
 8001306:	600b      	str	r3, [r1, #0]
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b24      	ldr	r3, [pc, #144]	; (800139c <HAL_RCC_OscConfig+0x244>)
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001310:	f7ff fc96 	bl	8000c40 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	e008      	b.n	800132a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001318:	f7ff fc92 	bl	8000c40 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e187      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1f0      	bne.n	8001318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d036      	beq.n	80013b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d016      	beq.n	8001378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_RCC_OscConfig+0x248>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001350:	f7ff fc76 	bl	8000c40 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001358:	f7ff fc72 	bl	8000c40 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e167      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <HAL_RCC_OscConfig+0x240>)
 800136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x200>
 8001376:	e01b      	b.n	80013b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_RCC_OscConfig+0x248>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7ff fc5f 	bl	8000c40 <HAL_GetTick>
 8001382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001384:	e00e      	b.n	80013a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001386:	f7ff fc5b 	bl	8000c40 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d907      	bls.n	80013a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001394:	2303      	movs	r3, #3
 8001396:	e150      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
 8001398:	40023800 	.word	0x40023800
 800139c:	42470000 	.word	0x42470000
 80013a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	4b88      	ldr	r3, [pc, #544]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1ea      	bne.n	8001386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0304 	and.w	r3, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8097 	beq.w	80014ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c2:	4b81      	ldr	r3, [pc, #516]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d10f      	bne.n	80013ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	4a7c      	ldr	r2, [pc, #496]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013dc:	6413      	str	r3, [r2, #64]	; 0x40
 80013de:	4b7a      	ldr	r3, [pc, #488]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ea:	2301      	movs	r3, #1
 80013ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ee:	4b77      	ldr	r3, [pc, #476]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013fa:	4b74      	ldr	r3, [pc, #464]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a73      	ldr	r2, [pc, #460]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 8001400:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001404:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001406:	f7ff fc1b 	bl	8000c40 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800140e:	f7ff fc17 	bl	8000c40 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e10c      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	4b6a      	ldr	r3, [pc, #424]	; (80015cc <HAL_RCC_OscConfig+0x474>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d106      	bne.n	8001442 <HAL_RCC_OscConfig+0x2ea>
 8001434:	4b64      	ldr	r3, [pc, #400]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001438:	4a63      	ldr	r2, [pc, #396]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	; 0x70
 8001440:	e01c      	b.n	800147c <HAL_RCC_OscConfig+0x324>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b05      	cmp	r3, #5
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0x30c>
 800144a:	4b5f      	ldr	r3, [pc, #380]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800144c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144e:	4a5e      	ldr	r2, [pc, #376]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001450:	f043 0304 	orr.w	r3, r3, #4
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	4b5c      	ldr	r3, [pc, #368]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145a:	4a5b      	ldr	r2, [pc, #364]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6713      	str	r3, [r2, #112]	; 0x70
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0x324>
 8001464:	4b58      	ldr	r3, [pc, #352]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001468:	4a57      	ldr	r2, [pc, #348]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
 8001470:	4b55      	ldr	r3, [pc, #340]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a54      	ldr	r2, [pc, #336]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001476:	f023 0304 	bic.w	r3, r3, #4
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d015      	beq.n	80014b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fbdc 	bl	8000c40 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148a:	e00a      	b.n	80014a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800148c:	f7ff fbd8 	bl	8000c40 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	f241 3288 	movw	r2, #5000	; 0x1388
 800149a:	4293      	cmp	r3, r2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e0cb      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a2:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0ee      	beq.n	800148c <HAL_RCC_OscConfig+0x334>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff fbc6 	bl	8000c40 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b6:	e00a      	b.n	80014ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fbc2 	bl	8000c40 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0b5      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ce:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d1ee      	bne.n	80014b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d105      	bne.n	80014ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e0:	4b39      	ldr	r3, [pc, #228]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	4a38      	ldr	r2, [pc, #224]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	f000 80a1 	beq.w	8001638 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 030c 	and.w	r3, r3, #12
 80014fe:	2b08      	cmp	r3, #8
 8001500:	d05c      	beq.n	80015bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d141      	bne.n	800158e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150a:	4b31      	ldr	r3, [pc, #196]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001510:	f7ff fb96 	bl	8000c40 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001518:	f7ff fb92 	bl	8000c40 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e087      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69da      	ldr	r2, [r3, #28]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6a1b      	ldr	r3, [r3, #32]
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	085b      	lsrs	r3, r3, #1
 800154e:	3b01      	subs	r3, #1
 8001550:	041b      	lsls	r3, r3, #16
 8001552:	431a      	orrs	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	491b      	ldr	r1, [pc, #108]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 8001562:	2201      	movs	r2, #1
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fb6b 	bl	8000c40 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fb67 	bl	8000c40 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e05c      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0f0      	beq.n	800156e <HAL_RCC_OscConfig+0x416>
 800158c:	e054      	b.n	8001638 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <HAL_RCC_OscConfig+0x478>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001594:	f7ff fb54 	bl	8000c40 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	e008      	b.n	80015ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159c:	f7ff fb50 	bl	8000c40 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e045      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1f0      	bne.n	800159c <HAL_RCC_OscConfig+0x444>
 80015ba:	e03d      	b.n	8001638 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e038      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000
 80015d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015d4:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <HAL_RCC_OscConfig+0x4ec>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d028      	beq.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d121      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d11a      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001604:	4013      	ands	r3, r2
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800160a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800160c:	4293      	cmp	r3, r2
 800160e:	d111      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161a:	085b      	lsrs	r3, r3, #1
 800161c:	3b01      	subs	r3, #1
 800161e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001620:	429a      	cmp	r2, r3
 8001622:	d107      	bne.n	8001634 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001630:	429a      	cmp	r2, r3
 8001632:	d001      	beq.n	8001638 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800

08001648 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0cc      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b68      	ldr	r3, [pc, #416]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0307 	and.w	r3, r3, #7
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	429a      	cmp	r2, r3
 8001668:	d90c      	bls.n	8001684 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166a:	4b65      	ldr	r3, [pc, #404]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	683a      	ldr	r2, [r7, #0]
 800166e:	b2d2      	uxtb	r2, r2
 8001670:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0307 	and.w	r3, r3, #7
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d001      	beq.n	8001684 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e0b8      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800169c:	4b59      	ldr	r3, [pc, #356]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a58      	ldr	r2, [pc, #352]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0308 	and.w	r3, r3, #8
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d005      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016b4:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c0:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	494d      	ldr	r1, [pc, #308]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d044      	beq.n	8001768 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d107      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b47      	ldr	r3, [pc, #284]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d119      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e07f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d003      	beq.n	8001706 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001702:	2b03      	cmp	r3, #3
 8001704:	d107      	bne.n	8001716 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e067      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001726:	4b37      	ldr	r3, [pc, #220]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f023 0203 	bic.w	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4934      	ldr	r1, [pc, #208]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001738:	f7ff fa82 	bl	8000c40 <HAL_GetTick>
 800173c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	e00a      	b.n	8001756 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001740:	f7ff fa7e 	bl	8000c40 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e04f      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001756:	4b2b      	ldr	r3, [pc, #172]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f003 020c 	and.w	r2, r3, #12
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	429a      	cmp	r2, r3
 8001766:	d1eb      	bne.n	8001740 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001768:	4b25      	ldr	r3, [pc, #148]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 0307 	and.w	r3, r3, #7
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d20c      	bcs.n	8001790 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177e:	4b20      	ldr	r3, [pc, #128]	; (8001800 <HAL_RCC_ClockConfig+0x1b8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	429a      	cmp	r2, r3
 800178a:	d001      	beq.n	8001790 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e032      	b.n	80017f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	4916      	ldr	r1, [pc, #88]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0308 	and.w	r3, r3, #8
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d009      	beq.n	80017ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ba:	4b12      	ldr	r3, [pc, #72]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	490e      	ldr	r1, [pc, #56]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017ce:	f000 f821 	bl	8001814 <HAL_RCC_GetSysClockFreq>
 80017d2:	4602      	mov	r2, r0
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	490a      	ldr	r1, [pc, #40]	; (8001808 <HAL_RCC_ClockConfig+0x1c0>)
 80017e0:	5ccb      	ldrb	r3, [r1, r3]
 80017e2:	fa22 f303 	lsr.w	r3, r2, r3
 80017e6:	4a09      	ldr	r2, [pc, #36]	; (800180c <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017ea:	4b09      	ldr	r3, [pc, #36]	; (8001810 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff f91e 	bl	8000a30 <HAL_InitTick>

  return HAL_OK;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40023800 	.word	0x40023800
 8001808:	080059d0 	.word	0x080059d0
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001818:	b094      	sub	sp, #80	; 0x50
 800181a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800181c:	2300      	movs	r3, #0
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
 8001820:	2300      	movs	r3, #0
 8001822:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001824:	2300      	movs	r3, #0
 8001826:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800182c:	4b79      	ldr	r3, [pc, #484]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b08      	cmp	r3, #8
 8001836:	d00d      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0x40>
 8001838:	2b08      	cmp	r3, #8
 800183a:	f200 80e1 	bhi.w	8001a00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <HAL_RCC_GetSysClockFreq+0x34>
 8001842:	2b04      	cmp	r3, #4
 8001844:	d003      	beq.n	800184e <HAL_RCC_GetSysClockFreq+0x3a>
 8001846:	e0db      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001848:	4b73      	ldr	r3, [pc, #460]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x204>)
 800184a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800184c:	e0db      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800184e:	4b73      	ldr	r3, [pc, #460]	; (8001a1c <HAL_RCC_GetSysClockFreq+0x208>)
 8001850:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001852:	e0d8      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001854:	4b6f      	ldr	r3, [pc, #444]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800185e:	4b6d      	ldr	r3, [pc, #436]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d063      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800186a:	4b6a      	ldr	r3, [pc, #424]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	099b      	lsrs	r3, r3, #6
 8001870:	2200      	movs	r2, #0
 8001872:	63bb      	str	r3, [r7, #56]	; 0x38
 8001874:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
 8001882:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001886:	4622      	mov	r2, r4
 8001888:	462b      	mov	r3, r5
 800188a:	f04f 0000 	mov.w	r0, #0
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	0159      	lsls	r1, r3, #5
 8001894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001898:	0150      	lsls	r0, r2, #5
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4621      	mov	r1, r4
 80018a0:	1a51      	subs	r1, r2, r1
 80018a2:	6139      	str	r1, [r7, #16]
 80018a4:	4629      	mov	r1, r5
 80018a6:	eb63 0301 	sbc.w	r3, r3, r1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018b8:	4659      	mov	r1, fp
 80018ba:	018b      	lsls	r3, r1, #6
 80018bc:	4651      	mov	r1, sl
 80018be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018c2:	4651      	mov	r1, sl
 80018c4:	018a      	lsls	r2, r1, #6
 80018c6:	4651      	mov	r1, sl
 80018c8:	ebb2 0801 	subs.w	r8, r2, r1
 80018cc:	4659      	mov	r1, fp
 80018ce:	eb63 0901 	sbc.w	r9, r3, r1
 80018d2:	f04f 0200 	mov.w	r2, #0
 80018d6:	f04f 0300 	mov.w	r3, #0
 80018da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018e6:	4690      	mov	r8, r2
 80018e8:	4699      	mov	r9, r3
 80018ea:	4623      	mov	r3, r4
 80018ec:	eb18 0303 	adds.w	r3, r8, r3
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	462b      	mov	r3, r5
 80018f4:	eb49 0303 	adc.w	r3, r9, r3
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001906:	4629      	mov	r1, r5
 8001908:	024b      	lsls	r3, r1, #9
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001910:	4621      	mov	r1, r4
 8001912:	024a      	lsls	r2, r1, #9
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800191a:	2200      	movs	r2, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
 800191e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001920:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001924:	f7fe fc5c 	bl	80001e0 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001930:	e058      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	2200      	movs	r2, #0
 800193a:	4618      	mov	r0, r3
 800193c:	4611      	mov	r1, r2
 800193e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
 8001948:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800194c:	4642      	mov	r2, r8
 800194e:	464b      	mov	r3, r9
 8001950:	f04f 0000 	mov.w	r0, #0
 8001954:	f04f 0100 	mov.w	r1, #0
 8001958:	0159      	lsls	r1, r3, #5
 800195a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800195e:	0150      	lsls	r0, r2, #5
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4641      	mov	r1, r8
 8001966:	ebb2 0a01 	subs.w	sl, r2, r1
 800196a:	4649      	mov	r1, r9
 800196c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800197c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001980:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001984:	ebb2 040a 	subs.w	r4, r2, sl
 8001988:	eb63 050b 	sbc.w	r5, r3, fp
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	00eb      	lsls	r3, r5, #3
 8001996:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800199a:	00e2      	lsls	r2, r4, #3
 800199c:	4614      	mov	r4, r2
 800199e:	461d      	mov	r5, r3
 80019a0:	4643      	mov	r3, r8
 80019a2:	18e3      	adds	r3, r4, r3
 80019a4:	603b      	str	r3, [r7, #0]
 80019a6:	464b      	mov	r3, r9
 80019a8:	eb45 0303 	adc.w	r3, r5, r3
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019ba:	4629      	mov	r1, r5
 80019bc:	028b      	lsls	r3, r1, #10
 80019be:	4621      	mov	r1, r4
 80019c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019c4:	4621      	mov	r1, r4
 80019c6:	028a      	lsls	r2, r1, #10
 80019c8:	4610      	mov	r0, r2
 80019ca:	4619      	mov	r1, r3
 80019cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ce:	2200      	movs	r2, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	61fa      	str	r2, [r7, #28]
 80019d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d8:	f7fe fc02 	bl	80001e0 <__aeabi_uldivmod>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4613      	mov	r3, r2
 80019e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	3301      	adds	r3, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019fe:	e002      	b.n	8001a06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3750      	adds	r7, #80	; 0x50
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	00f42400 	.word	0x00f42400
 8001a1c:	007a1200 	.word	0x007a1200

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b03      	ldr	r3, [pc, #12]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	20000000 	.word	0x20000000

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a3c:	f7ff fff0 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b05      	ldr	r3, [pc, #20]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	0a9b      	lsrs	r3, r3, #10
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	4903      	ldr	r1, [pc, #12]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4e:	5ccb      	ldrb	r3, [r1, r3]
 8001a50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	080059e0 	.word	0x080059e0

08001a60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a64:	f7ff ffdc 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	0b5b      	lsrs	r3, r3, #13
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	4903      	ldr	r1, [pc, #12]	; (8001a84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a76:	5ccb      	ldrb	r3, [r1, r3]
 8001a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40023800 	.word	0x40023800
 8001a84:	080059e0 	.word	0x080059e0

08001a88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	220f      	movs	r2, #15
 8001a96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0203 	and.w	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aa4:	4b0f      	ldr	r3, [pc, #60]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ab0:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_GetClockConfig+0x5c>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	08db      	lsrs	r3, r3, #3
 8001ac2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aca:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <HAL_RCC_GetClockConfig+0x60>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0207 	and.w	r2, r3, #7
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	601a      	str	r2, [r3, #0]
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40023c00 	.word	0x40023c00

08001aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e041      	b.n	8001b82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f839 	bl	8001b8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3304      	adds	r3, #4
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	f000 fb8c 	bl	8002248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b083      	sub	sp, #12
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
	...

08001ba0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d001      	beq.n	8001bb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e044      	b.n	8001c42 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 0201 	orr.w	r2, r2, #1
 8001bce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <HAL_TIM_Base_Start_IT+0xb0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d018      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be2:	d013      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1a      	ldr	r2, [pc, #104]	; (8001c54 <HAL_TIM_Base_Start_IT+0xb4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d00e      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a19      	ldr	r2, [pc, #100]	; (8001c58 <HAL_TIM_Base_Start_IT+0xb8>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d009      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a17      	ldr	r2, [pc, #92]	; (8001c5c <HAL_TIM_Base_Start_IT+0xbc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d004      	beq.n	8001c0c <HAL_TIM_Base_Start_IT+0x6c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a16      	ldr	r2, [pc, #88]	; (8001c60 <HAL_TIM_Base_Start_IT+0xc0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d111      	bne.n	8001c30 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b06      	cmp	r3, #6
 8001c1c:	d010      	beq.n	8001c40 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2e:	e007      	b.n	8001c40 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	40010000 	.word	0x40010000
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40000c00 	.word	0x40000c00
 8001c60:	40014000 	.word	0x40014000

08001c64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e041      	b.n	8001cfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d106      	bne.n	8001c90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7fe fe26 	bl	80008dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2202      	movs	r2, #2
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f000 fad0 	bl	8002248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d109      	bne.n	8001d28 <HAL_TIM_PWM_Start+0x24>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	bf14      	ite	ne
 8001d20:	2301      	movne	r3, #1
 8001d22:	2300      	moveq	r3, #0
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	e022      	b.n	8001d6e <HAL_TIM_PWM_Start+0x6a>
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d109      	bne.n	8001d42 <HAL_TIM_PWM_Start+0x3e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	bf14      	ite	ne
 8001d3a:	2301      	movne	r3, #1
 8001d3c:	2300      	moveq	r3, #0
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	e015      	b.n	8001d6e <HAL_TIM_PWM_Start+0x6a>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d109      	bne.n	8001d5c <HAL_TIM_PWM_Start+0x58>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	e008      	b.n	8001d6e <HAL_TIM_PWM_Start+0x6a>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e068      	b.n	8001e48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d104      	bne.n	8001d86 <HAL_TIM_PWM_Start+0x82>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2202      	movs	r2, #2
 8001d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d84:	e013      	b.n	8001dae <HAL_TIM_PWM_Start+0xaa>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b04      	cmp	r3, #4
 8001d8a:	d104      	bne.n	8001d96 <HAL_TIM_PWM_Start+0x92>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d94:	e00b      	b.n	8001dae <HAL_TIM_PWM_Start+0xaa>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b08      	cmp	r3, #8
 8001d9a:	d104      	bne.n	8001da6 <HAL_TIM_PWM_Start+0xa2>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da4:	e003      	b.n	8001dae <HAL_TIM_PWM_Start+0xaa>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2201      	movs	r2, #1
 8001db4:	6839      	ldr	r1, [r7, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 fc52 	bl	8002660 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_TIM_PWM_Start+0x14c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_TIM_PWM_Start+0x14c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d018      	beq.n	8001e12 <HAL_TIM_PWM_Start+0x10e>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d013      	beq.n	8001e12 <HAL_TIM_PWM_Start+0x10e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a19      	ldr	r2, [pc, #100]	; (8001e54 <HAL_TIM_PWM_Start+0x150>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d00e      	beq.n	8001e12 <HAL_TIM_PWM_Start+0x10e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a17      	ldr	r2, [pc, #92]	; (8001e58 <HAL_TIM_PWM_Start+0x154>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d009      	beq.n	8001e12 <HAL_TIM_PWM_Start+0x10e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a16      	ldr	r2, [pc, #88]	; (8001e5c <HAL_TIM_PWM_Start+0x158>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d004      	beq.n	8001e12 <HAL_TIM_PWM_Start+0x10e>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a14      	ldr	r2, [pc, #80]	; (8001e60 <HAL_TIM_PWM_Start+0x15c>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d111      	bne.n	8001e36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 0307 	and.w	r3, r3, #7
 8001e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2b06      	cmp	r3, #6
 8001e22:	d010      	beq.n	8001e46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e34:	e007      	b.n	8001e46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0201 	orr.w	r2, r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40000400 	.word	0x40000400
 8001e58:	40000800 	.word	0x40000800
 8001e5c:	40000c00 	.word	0x40000c00
 8001e60:	40014000 	.word	0x40014000

08001e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d122      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	f003 0302 	and.w	r3, r3, #2
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d11b      	bne.n	8001ec0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f06f 0202 	mvn.w	r2, #2
 8001e90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f9b0 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8001eac:	e005      	b.n	8001eba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f9a2 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f9b3 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d122      	bne.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d11b      	bne.n	8001f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0204 	mvn.w	r2, #4
 8001ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f986 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f978 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f989 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d122      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b08      	cmp	r3, #8
 8001f2e:	d11b      	bne.n	8001f68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0208 	mvn.w	r2, #8
 8001f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f95c 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f94e 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f95f 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b10      	cmp	r3, #16
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0310 	and.w	r3, r3, #16
 8001f80:	2b10      	cmp	r3, #16
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0210 	mvn.w	r2, #16
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2208      	movs	r2, #8
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f932 	bl	800220c <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f924 	bl	80021f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f935 	bl	8002220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d10e      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d107      	bne.n	8001fe8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0201 	mvn.w	r2, #1
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fc36 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff2:	2b80      	cmp	r3, #128	; 0x80
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002000:	2b80      	cmp	r3, #128	; 0x80
 8002002:	d107      	bne.n	8002014 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800200c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fc16 	bl	8002840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800201e:	2b40      	cmp	r3, #64	; 0x40
 8002020:	d10e      	bne.n	8002040 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800202c:	2b40      	cmp	r3, #64	; 0x40
 800202e:	d107      	bne.n	8002040 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8fa 	bl	8002234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b20      	cmp	r3, #32
 800204c:	d10e      	bne.n	800206c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b20      	cmp	r3, #32
 800205a:	d107      	bne.n	800206c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f06f 0220 	mvn.w	r2, #32
 8002064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 fbe0 	bl	800282c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800206c:	bf00      	nop
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208a:	2b01      	cmp	r3, #1
 800208c:	d101      	bne.n	8002092 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800208e:	2302      	movs	r3, #2
 8002090:	e0ae      	b.n	80021f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0c      	cmp	r3, #12
 800209e:	f200 809f 	bhi.w	80021e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80020a2:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80020a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a8:	080020dd 	.word	0x080020dd
 80020ac:	080021e1 	.word	0x080021e1
 80020b0:	080021e1 	.word	0x080021e1
 80020b4:	080021e1 	.word	0x080021e1
 80020b8:	0800211d 	.word	0x0800211d
 80020bc:	080021e1 	.word	0x080021e1
 80020c0:	080021e1 	.word	0x080021e1
 80020c4:	080021e1 	.word	0x080021e1
 80020c8:	0800215f 	.word	0x0800215f
 80020cc:	080021e1 	.word	0x080021e1
 80020d0:	080021e1 	.word	0x080021e1
 80020d4:	080021e1 	.word	0x080021e1
 80020d8:	0800219f 	.word	0x0800219f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f930 	bl	8002348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0208 	orr.w	r2, r2, #8
 80020f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0204 	bic.w	r2, r2, #4
 8002106:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6999      	ldr	r1, [r3, #24]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	619a      	str	r2, [r3, #24]
      break;
 800211a:	e064      	b.n	80021e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f976 	bl	8002414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699a      	ldr	r2, [r3, #24]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002136:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	699a      	ldr	r2, [r3, #24]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002146:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6999      	ldr	r1, [r3, #24]
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	021a      	lsls	r2, r3, #8
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	619a      	str	r2, [r3, #24]
      break;
 800215c:	e043      	b.n	80021e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68b9      	ldr	r1, [r7, #8]
 8002164:	4618      	mov	r0, r3
 8002166:	f000 f9c1 	bl	80024ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0208 	orr.w	r2, r2, #8
 8002178:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	69da      	ldr	r2, [r3, #28]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f022 0204 	bic.w	r2, r2, #4
 8002188:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69d9      	ldr	r1, [r3, #28]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	691a      	ldr	r2, [r3, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	61da      	str	r2, [r3, #28]
      break;
 800219c:	e023      	b.n	80021e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68b9      	ldr	r1, [r7, #8]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fa0b 	bl	80025c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69d9      	ldr	r1, [r3, #28]
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	021a      	lsls	r2, r3, #8
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	61da      	str	r2, [r3, #28]
      break;
 80021de:	e002      	b.n	80021e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	75fb      	strb	r3, [r7, #23]
      break;
 80021e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80021ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a34      	ldr	r2, [pc, #208]	; (800232c <TIM_Base_SetConfig+0xe4>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d00f      	beq.n	8002280 <TIM_Base_SetConfig+0x38>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002266:	d00b      	beq.n	8002280 <TIM_Base_SetConfig+0x38>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a31      	ldr	r2, [pc, #196]	; (8002330 <TIM_Base_SetConfig+0xe8>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d007      	beq.n	8002280 <TIM_Base_SetConfig+0x38>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a30      	ldr	r2, [pc, #192]	; (8002334 <TIM_Base_SetConfig+0xec>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d003      	beq.n	8002280 <TIM_Base_SetConfig+0x38>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4a2f      	ldr	r2, [pc, #188]	; (8002338 <TIM_Base_SetConfig+0xf0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d108      	bne.n	8002292 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a25      	ldr	r2, [pc, #148]	; (800232c <TIM_Base_SetConfig+0xe4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d01b      	beq.n	80022d2 <TIM_Base_SetConfig+0x8a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a0:	d017      	beq.n	80022d2 <TIM_Base_SetConfig+0x8a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <TIM_Base_SetConfig+0xe8>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d013      	beq.n	80022d2 <TIM_Base_SetConfig+0x8a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a21      	ldr	r2, [pc, #132]	; (8002334 <TIM_Base_SetConfig+0xec>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00f      	beq.n	80022d2 <TIM_Base_SetConfig+0x8a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a20      	ldr	r2, [pc, #128]	; (8002338 <TIM_Base_SetConfig+0xf0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00b      	beq.n	80022d2 <TIM_Base_SetConfig+0x8a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a1f      	ldr	r2, [pc, #124]	; (800233c <TIM_Base_SetConfig+0xf4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <TIM_Base_SetConfig+0x8a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a1e      	ldr	r2, [pc, #120]	; (8002340 <TIM_Base_SetConfig+0xf8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <TIM_Base_SetConfig+0x8a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <TIM_Base_SetConfig+0xfc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d108      	bne.n	80022e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a08      	ldr	r2, [pc, #32]	; (800232c <TIM_Base_SetConfig+0xe4>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d103      	bne.n	8002318 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	615a      	str	r2, [r3, #20]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40010000 	.word	0x40010000
 8002330:	40000400 	.word	0x40000400
 8002334:	40000800 	.word	0x40000800
 8002338:	40000c00 	.word	0x40000c00
 800233c:	40014000 	.word	0x40014000
 8002340:	40014400 	.word	0x40014400
 8002344:	40014800 	.word	0x40014800

08002348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002348:	b480      	push	{r7}
 800234a:	b087      	sub	sp, #28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	f023 0201 	bic.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f023 0303 	bic.w	r3, r3, #3
 800237e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f023 0302 	bic.w	r3, r3, #2
 8002390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4313      	orrs	r3, r2
 800239a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a1c      	ldr	r2, [pc, #112]	; (8002410 <TIM_OC1_SetConfig+0xc8>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d10c      	bne.n	80023be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f023 0308 	bic.w	r3, r3, #8
 80023aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	f023 0304 	bic.w	r3, r3, #4
 80023bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a13      	ldr	r2, [pc, #76]	; (8002410 <TIM_OC1_SetConfig+0xc8>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d111      	bne.n	80023ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	621a      	str	r2, [r3, #32]
}
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40010000 	.word	0x40010000

08002414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002414:	b480      	push	{r7}
 8002416:	b087      	sub	sp, #28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	f023 0210 	bic.w	r2, r3, #16
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	021b      	lsls	r3, r3, #8
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4313      	orrs	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f023 0320 	bic.w	r3, r3, #32
 800245e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a1e      	ldr	r2, [pc, #120]	; (80024e8 <TIM_OC2_SetConfig+0xd4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d10d      	bne.n	8002490 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800247a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800248e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a15      	ldr	r2, [pc, #84]	; (80024e8 <TIM_OC2_SetConfig+0xd4>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d113      	bne.n	80024c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800249e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	693a      	ldr	r2, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	621a      	str	r2, [r3, #32]
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40010000 	.word	0x40010000

080024ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	021b      	lsls	r3, r3, #8
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <TIM_OC3_SetConfig+0xd0>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10d      	bne.n	8002566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a14      	ldr	r2, [pc, #80]	; (80025bc <TIM_OC3_SetConfig+0xd0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d113      	bne.n	8002596 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800257c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	621a      	str	r2, [r3, #32]
}
 80025b0:	bf00      	nop
 80025b2:	371c      	adds	r7, #28
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	40010000 	.word	0x40010000

080025c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a1b      	ldr	r3, [r3, #32]
 80025da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800260a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	031b      	lsls	r3, r3, #12
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a10      	ldr	r2, [pc, #64]	; (800265c <TIM_OC4_SetConfig+0x9c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d109      	bne.n	8002634 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	019b      	lsls	r3, r3, #6
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	693a      	ldr	r2, [r7, #16]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40010000 	.word	0x40010000

08002660 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	2201      	movs	r2, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	43db      	mvns	r3, r3
 8002682:	401a      	ands	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a1a      	ldr	r2, [r3, #32]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	6879      	ldr	r1, [r7, #4]
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	431a      	orrs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	621a      	str	r2, [r3, #32]
}
 800269e:	bf00      	nop
 80026a0:	371c      	adds	r7, #28
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
	...

080026ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e050      	b.n	8002766 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1c      	ldr	r2, [pc, #112]	; (8002774 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d018      	beq.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002710:	d013      	beq.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a18      	ldr	r2, [pc, #96]	; (8002778 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00e      	beq.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a16      	ldr	r2, [pc, #88]	; (800277c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a15      	ldr	r2, [pc, #84]	; (8002780 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a13      	ldr	r2, [pc, #76]	; (8002784 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d10c      	bne.n	8002754 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	4313      	orrs	r3, r2
 800274a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800
 8002780:	40000c00 	.word	0x40000c00
 8002784:	40014000 	.word	0x40014000

08002788 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e03d      	b.n	8002820 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e03f      	b.n	80028e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7fe f890 	bl	80009a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2224      	movs	r2, #36	; 0x24
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002896:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f829 	bl	80028f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2220      	movs	r2, #32
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f4:	b0c0      	sub	sp, #256	; 0x100
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290c:	68d9      	ldr	r1, [r3, #12]
 800290e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	ea40 0301 	orr.w	r3, r0, r1
 8002918:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	431a      	orrs	r2, r3
 8002928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	431a      	orrs	r2, r3
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002948:	f021 010c 	bic.w	r1, r1, #12
 800294c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002956:	430b      	orrs	r3, r1
 8002958:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800295a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800296a:	6999      	ldr	r1, [r3, #24]
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	ea40 0301 	orr.w	r3, r0, r1
 8002976:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <UART_SetConfig+0x2cc>)
 8002980:	429a      	cmp	r2, r3
 8002982:	d005      	beq.n	8002990 <UART_SetConfig+0xa0>
 8002984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4b8d      	ldr	r3, [pc, #564]	; (8002bc0 <UART_SetConfig+0x2d0>)
 800298c:	429a      	cmp	r2, r3
 800298e:	d104      	bne.n	800299a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002990:	f7ff f866 	bl	8001a60 <HAL_RCC_GetPCLK2Freq>
 8002994:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002998:	e003      	b.n	80029a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800299a:	f7ff f84d 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 800299e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ac:	f040 810c 	bne.w	8002bc8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80029b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029b4:	2200      	movs	r2, #0
 80029b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80029be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80029c2:	4622      	mov	r2, r4
 80029c4:	462b      	mov	r3, r5
 80029c6:	1891      	adds	r1, r2, r2
 80029c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80029ca:	415b      	adcs	r3, r3
 80029cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029d2:	4621      	mov	r1, r4
 80029d4:	eb12 0801 	adds.w	r8, r2, r1
 80029d8:	4629      	mov	r1, r5
 80029da:	eb43 0901 	adc.w	r9, r3, r1
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029f2:	4690      	mov	r8, r2
 80029f4:	4699      	mov	r9, r3
 80029f6:	4623      	mov	r3, r4
 80029f8:	eb18 0303 	adds.w	r3, r8, r3
 80029fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002a00:	462b      	mov	r3, r5
 8002a02:	eb49 0303 	adc.w	r3, r9, r3
 8002a06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002a16:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002a1a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002a1e:	460b      	mov	r3, r1
 8002a20:	18db      	adds	r3, r3, r3
 8002a22:	653b      	str	r3, [r7, #80]	; 0x50
 8002a24:	4613      	mov	r3, r2
 8002a26:	eb42 0303 	adc.w	r3, r2, r3
 8002a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8002a2c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002a30:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002a34:	f7fd fbd4 	bl	80001e0 <__aeabi_uldivmod>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <UART_SetConfig+0x2d4>)
 8002a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a42:	095b      	lsrs	r3, r3, #5
 8002a44:	011c      	lsls	r4, r3, #4
 8002a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a50:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002a54:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002a58:	4642      	mov	r2, r8
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	1891      	adds	r1, r2, r2
 8002a5e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002a60:	415b      	adcs	r3, r3
 8002a62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a64:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a68:	4641      	mov	r1, r8
 8002a6a:	eb12 0a01 	adds.w	sl, r2, r1
 8002a6e:	4649      	mov	r1, r9
 8002a70:	eb43 0b01 	adc.w	fp, r3, r1
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a80:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a84:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a88:	4692      	mov	sl, r2
 8002a8a:	469b      	mov	fp, r3
 8002a8c:	4643      	mov	r3, r8
 8002a8e:	eb1a 0303 	adds.w	r3, sl, r3
 8002a92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a96:	464b      	mov	r3, r9
 8002a98:	eb4b 0303 	adc.w	r3, fp, r3
 8002a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002aac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002ab0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	18db      	adds	r3, r3, r3
 8002ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8002aba:	4613      	mov	r3, r2
 8002abc:	eb42 0303 	adc.w	r3, r2, r3
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002ac6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002aca:	f7fd fb89 	bl	80001e0 <__aeabi_uldivmod>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <UART_SetConfig+0x2d4>)
 8002ad6:	fba3 2301 	umull	r2, r3, r3, r1
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	2264      	movs	r2, #100	; 0x64
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	1acb      	subs	r3, r1, r3
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002aea:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <UART_SetConfig+0x2d4>)
 8002aec:	fba3 2302 	umull	r2, r3, r3, r2
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002af8:	441c      	add	r4, r3
 8002afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002b08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	464b      	mov	r3, r9
 8002b10:	1891      	adds	r1, r2, r2
 8002b12:	63b9      	str	r1, [r7, #56]	; 0x38
 8002b14:	415b      	adcs	r3, r3
 8002b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	1851      	adds	r1, r2, r1
 8002b20:	6339      	str	r1, [r7, #48]	; 0x30
 8002b22:	4649      	mov	r1, r9
 8002b24:	414b      	adcs	r3, r1
 8002b26:	637b      	str	r3, [r7, #52]	; 0x34
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002b34:	4659      	mov	r1, fp
 8002b36:	00cb      	lsls	r3, r1, #3
 8002b38:	4651      	mov	r1, sl
 8002b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b3e:	4651      	mov	r1, sl
 8002b40:	00ca      	lsls	r2, r1, #3
 8002b42:	4610      	mov	r0, r2
 8002b44:	4619      	mov	r1, r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	4642      	mov	r2, r8
 8002b4a:	189b      	adds	r3, r3, r2
 8002b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b50:	464b      	mov	r3, r9
 8002b52:	460a      	mov	r2, r1
 8002b54:	eb42 0303 	adc.w	r3, r2, r3
 8002b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002b6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002b70:	460b      	mov	r3, r1
 8002b72:	18db      	adds	r3, r3, r3
 8002b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b76:	4613      	mov	r3, r2
 8002b78:	eb42 0303 	adc.w	r3, r2, r3
 8002b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002b86:	f7fd fb2b 	bl	80001e0 <__aeabi_uldivmod>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <UART_SetConfig+0x2d4>)
 8002b90:	fba3 1302 	umull	r1, r3, r3, r2
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	2164      	movs	r1, #100	; 0x64
 8002b98:	fb01 f303 	mul.w	r3, r1, r3
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	3332      	adds	r3, #50	; 0x32
 8002ba2:	4a08      	ldr	r2, [pc, #32]	; (8002bc4 <UART_SetConfig+0x2d4>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	095b      	lsrs	r3, r3, #5
 8002baa:	f003 0207 	and.w	r2, r3, #7
 8002bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4422      	add	r2, r4
 8002bb6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002bb8:	e105      	b.n	8002dc6 <UART_SetConfig+0x4d6>
 8002bba:	bf00      	nop
 8002bbc:	40011000 	.word	0x40011000
 8002bc0:	40011400 	.word	0x40011400
 8002bc4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002bd2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002bd6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002bda:	4642      	mov	r2, r8
 8002bdc:	464b      	mov	r3, r9
 8002bde:	1891      	adds	r1, r2, r2
 8002be0:	6239      	str	r1, [r7, #32]
 8002be2:	415b      	adcs	r3, r3
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bea:	4641      	mov	r1, r8
 8002bec:	1854      	adds	r4, r2, r1
 8002bee:	4649      	mov	r1, r9
 8002bf0:	eb43 0501 	adc.w	r5, r3, r1
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	00eb      	lsls	r3, r5, #3
 8002bfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c02:	00e2      	lsls	r2, r4, #3
 8002c04:	4614      	mov	r4, r2
 8002c06:	461d      	mov	r5, r3
 8002c08:	4643      	mov	r3, r8
 8002c0a:	18e3      	adds	r3, r4, r3
 8002c0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c10:	464b      	mov	r3, r9
 8002c12:	eb45 0303 	adc.w	r3, r5, r3
 8002c16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002c2a:	f04f 0200 	mov.w	r2, #0
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c36:	4629      	mov	r1, r5
 8002c38:	008b      	lsls	r3, r1, #2
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c40:	4621      	mov	r1, r4
 8002c42:	008a      	lsls	r2, r1, #2
 8002c44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002c48:	f7fd faca 	bl	80001e0 <__aeabi_uldivmod>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4b60      	ldr	r3, [pc, #384]	; (8002dd4 <UART_SetConfig+0x4e4>)
 8002c52:	fba3 2302 	umull	r2, r3, r3, r2
 8002c56:	095b      	lsrs	r3, r3, #5
 8002c58:	011c      	lsls	r4, r3, #4
 8002c5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002c64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002c68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	464b      	mov	r3, r9
 8002c70:	1891      	adds	r1, r2, r2
 8002c72:	61b9      	str	r1, [r7, #24]
 8002c74:	415b      	adcs	r3, r3
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c7c:	4641      	mov	r1, r8
 8002c7e:	1851      	adds	r1, r2, r1
 8002c80:	6139      	str	r1, [r7, #16]
 8002c82:	4649      	mov	r1, r9
 8002c84:	414b      	adcs	r3, r1
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	f04f 0200 	mov.w	r2, #0
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c94:	4659      	mov	r1, fp
 8002c96:	00cb      	lsls	r3, r1, #3
 8002c98:	4651      	mov	r1, sl
 8002c9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c9e:	4651      	mov	r1, sl
 8002ca0:	00ca      	lsls	r2, r1, #3
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	4642      	mov	r2, r8
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cb0:	464b      	mov	r3, r9
 8002cb2:	460a      	mov	r2, r1
 8002cb4:	eb42 0303 	adc.w	r3, r2, r3
 8002cb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002cc8:	f04f 0200 	mov.w	r2, #0
 8002ccc:	f04f 0300 	mov.w	r3, #0
 8002cd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002cd4:	4649      	mov	r1, r9
 8002cd6:	008b      	lsls	r3, r1, #2
 8002cd8:	4641      	mov	r1, r8
 8002cda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cde:	4641      	mov	r1, r8
 8002ce0:	008a      	lsls	r2, r1, #2
 8002ce2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002ce6:	f7fd fa7b 	bl	80001e0 <__aeabi_uldivmod>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4b39      	ldr	r3, [pc, #228]	; (8002dd4 <UART_SetConfig+0x4e4>)
 8002cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	2164      	movs	r1, #100	; 0x64
 8002cf8:	fb01 f303 	mul.w	r3, r1, r3
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	3332      	adds	r3, #50	; 0x32
 8002d02:	4a34      	ldr	r2, [pc, #208]	; (8002dd4 <UART_SetConfig+0x4e4>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d0e:	441c      	add	r4, r3
 8002d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d14:	2200      	movs	r2, #0
 8002d16:	673b      	str	r3, [r7, #112]	; 0x70
 8002d18:	677a      	str	r2, [r7, #116]	; 0x74
 8002d1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002d1e:	4642      	mov	r2, r8
 8002d20:	464b      	mov	r3, r9
 8002d22:	1891      	adds	r1, r2, r2
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	415b      	adcs	r3, r3
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d2e:	4641      	mov	r1, r8
 8002d30:	1851      	adds	r1, r2, r1
 8002d32:	6039      	str	r1, [r7, #0]
 8002d34:	4649      	mov	r1, r9
 8002d36:	414b      	adcs	r3, r1
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d46:	4659      	mov	r1, fp
 8002d48:	00cb      	lsls	r3, r1, #3
 8002d4a:	4651      	mov	r1, sl
 8002d4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d50:	4651      	mov	r1, sl
 8002d52:	00ca      	lsls	r2, r1, #3
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4642      	mov	r2, r8
 8002d5c:	189b      	adds	r3, r3, r2
 8002d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d60:	464b      	mov	r3, r9
 8002d62:	460a      	mov	r2, r1
 8002d64:	eb42 0303 	adc.w	r3, r2, r3
 8002d68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	663b      	str	r3, [r7, #96]	; 0x60
 8002d74:	667a      	str	r2, [r7, #100]	; 0x64
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002d82:	4649      	mov	r1, r9
 8002d84:	008b      	lsls	r3, r1, #2
 8002d86:	4641      	mov	r1, r8
 8002d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d8c:	4641      	mov	r1, r8
 8002d8e:	008a      	lsls	r2, r1, #2
 8002d90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d94:	f7fd fa24 	bl	80001e0 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <UART_SetConfig+0x4e4>)
 8002d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2164      	movs	r1, #100	; 0x64
 8002da6:	fb01 f303 	mul.w	r3, r1, r3
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	011b      	lsls	r3, r3, #4
 8002dae:	3332      	adds	r3, #50	; 0x32
 8002db0:	4a08      	ldr	r2, [pc, #32]	; (8002dd4 <UART_SetConfig+0x4e4>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	095b      	lsrs	r3, r3, #5
 8002db8:	f003 020f 	and.w	r2, r3, #15
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4422      	add	r2, r4
 8002dc4:	609a      	str	r2, [r3, #8]
}
 8002dc6:	bf00      	nop
 8002dc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd2:	bf00      	nop
 8002dd4:	51eb851f 	.word	0x51eb851f

08002dd8 <__NVIC_SetPriority>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	6039      	str	r1, [r7, #0]
 8002de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	db0a      	blt.n	8002e02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	490c      	ldr	r1, [pc, #48]	; (8002e24 <__NVIC_SetPriority+0x4c>)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e00:	e00a      	b.n	8002e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4908      	ldr	r1, [pc, #32]	; (8002e28 <__NVIC_SetPriority+0x50>)
 8002e08:	79fb      	ldrb	r3, [r7, #7]
 8002e0a:	f003 030f 	and.w	r3, r3, #15
 8002e0e:	3b04      	subs	r3, #4
 8002e10:	0112      	lsls	r2, r2, #4
 8002e12:	b2d2      	uxtb	r2, r2
 8002e14:	440b      	add	r3, r1
 8002e16:	761a      	strb	r2, [r3, #24]
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	e000e100 	.word	0xe000e100
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <SysTick_Handler+0x1c>)
 8002e32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002e34:	f001 fcfe 	bl	8004834 <xTaskGetSchedulerState>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002e3e:	f002 fae3 	bl	8005408 <xPortSysTickHandler>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002e50:	2100      	movs	r1, #0
 8002e52:	f06f 0004 	mvn.w	r0, #4
 8002e56:	f7ff ffbf 	bl	8002dd8 <__NVIC_SetPriority>
#endif
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e66:	f3ef 8305 	mrs	r3, IPSR
 8002e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002e72:	f06f 0305 	mvn.w	r3, #5
 8002e76:	607b      	str	r3, [r7, #4]
 8002e78:	e00c      	b.n	8002e94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ea4 <osKernelInitialize+0x44>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d105      	bne.n	8002e8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <osKernelInitialize+0x44>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	e002      	b.n	8002e94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002e94:	687b      	ldr	r3, [r7, #4]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000108 	.word	0x20000108

08002ea8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002eae:	f3ef 8305 	mrs	r3, IPSR
 8002eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8002eb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002eba:	f06f 0305 	mvn.w	r3, #5
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	e010      	b.n	8002ee4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <osKernelStart+0x48>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d109      	bne.n	8002ede <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002eca:	f7ff ffbf 	bl	8002e4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <osKernelStart+0x48>)
 8002ed0:	2202      	movs	r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002ed4:	f001 f866 	bl	8003fa4 <vTaskStartScheduler>
      stat = osOK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	e002      	b.n	8002ee4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002ede:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002ee4:	687b      	ldr	r3, [r7, #4]
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000108 	.word	0x20000108

08002ef4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08e      	sub	sp, #56	; 0x38
 8002ef8:	af04      	add	r7, sp, #16
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002f04:	f3ef 8305 	mrs	r3, IPSR
 8002f08:	617b      	str	r3, [r7, #20]
  return(result);
 8002f0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d17e      	bne.n	800300e <osThreadNew+0x11a>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d07b      	beq.n	800300e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002f1a:	2318      	movs	r3, #24
 8002f1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d045      	beq.n	8002fba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d002      	beq.n	8002f3c <osThreadNew+0x48>
        name = attr->name;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <osThreadNew+0x6e>
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b38      	cmp	r3, #56	; 0x38
 8002f54:	d805      	bhi.n	8002f62 <osThreadNew+0x6e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <osThreadNew+0x72>
        return (NULL);
 8002f62:	2300      	movs	r3, #0
 8002f64:	e054      	b.n	8003010 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00e      	beq.n	8002f9c <osThreadNew+0xa8>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b5b      	cmp	r3, #91	; 0x5b
 8002f84:	d90a      	bls.n	8002f9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d002      	beq.n	8002f9c <osThreadNew+0xa8>
        mem = 1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	e010      	b.n	8002fbe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10c      	bne.n	8002fbe <osThreadNew+0xca>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d108      	bne.n	8002fbe <osThreadNew+0xca>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d104      	bne.n	8002fbe <osThreadNew+0xca>
          mem = 0;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61bb      	str	r3, [r7, #24]
 8002fb8:	e001      	b.n	8002fbe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d110      	bne.n	8002fe6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fcc:	9202      	str	r2, [sp, #8]
 8002fce:	9301      	str	r3, [sp, #4]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6a3a      	ldr	r2, [r7, #32]
 8002fd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fe0c 	bl	8003bf8 <xTaskCreateStatic>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	613b      	str	r3, [r7, #16]
 8002fe4:	e013      	b.n	800300e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d110      	bne.n	800300e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	9301      	str	r3, [sp, #4]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	9300      	str	r3, [sp, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fe57 	bl	8003cb2 <xTaskCreate>
 8003004:	4603      	mov	r3, r0
 8003006:	2b01      	cmp	r3, #1
 8003008:	d001      	beq.n	800300e <osThreadNew+0x11a>
            hTask = NULL;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800300e:	693b      	ldr	r3, [r7, #16]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3728      	adds	r7, #40	; 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}

08003018 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003020:	f3ef 8305 	mrs	r3, IPSR
 8003024:	60bb      	str	r3, [r7, #8]
  return(result);
 8003026:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <osDelay+0x1c>
    stat = osErrorISR;
 800302c:	f06f 0305 	mvn.w	r3, #5
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e007      	b.n	8003044 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003034:	2300      	movs	r3, #0
 8003036:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d002      	beq.n	8003044 <osDelay+0x2c>
      vTaskDelay(ticks);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f000 ff7c 	bl	8003f3c <vTaskDelay>
    }
  }

  return (stat);
 8003044:	68fb      	ldr	r3, [r7, #12]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4a07      	ldr	r2, [pc, #28]	; (800307c <vApplicationGetIdleTaskMemory+0x2c>)
 8003060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4a06      	ldr	r2, [pc, #24]	; (8003080 <vApplicationGetIdleTaskMemory+0x30>)
 8003066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2280      	movs	r2, #128	; 0x80
 800306c:	601a      	str	r2, [r3, #0]
}
 800306e:	bf00      	nop
 8003070:	3714      	adds	r7, #20
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	2000010c 	.word	0x2000010c
 8003080:	20000168 	.word	0x20000168

08003084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4a06      	ldr	r2, [pc, #24]	; (80030b4 <vApplicationGetTimerTaskMemory+0x30>)
 800309a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030a2:	601a      	str	r2, [r3, #0]
}
 80030a4:	bf00      	nop
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	20000368 	.word	0x20000368
 80030b4:	200003c4 	.word	0x200003c4

080030b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f103 0208 	add.w	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f04f 32ff 	mov.w	r2, #4294967295
 80030d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f103 0208 	add.w	r2, r3, #8
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f103 0208 	add.w	r2, r3, #8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003112:	b480      	push	{r7}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800315a:	b480      	push	{r7}
 800315c:	b085      	sub	sp, #20
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003170:	d103      	bne.n	800317a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e00c      	b.n	8003194 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3308      	adds	r3, #8
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	e002      	b.n	8003188 <vListInsert+0x2e>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	429a      	cmp	r2, r3
 8003192:	d2f6      	bcs.n	8003182 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	601a      	str	r2, [r3, #0]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	6892      	ldr	r2, [r2, #8]
 80031e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6852      	ldr	r2, [r2, #4]
 80031ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d103      	bne.n	8003200 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	1e5a      	subs	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d10a      	bne.n	800324a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003246:	bf00      	nop
 8003248:	e7fe      	b.n	8003248 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800324a:	f002 f84b 	bl	80052e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	68f9      	ldr	r1, [r7, #12]
 8003258:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800325a:	fb01 f303 	mul.w	r3, r1, r3
 800325e:	441a      	add	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	3b01      	subs	r3, #1
 800327c:	68f9      	ldr	r1, [r7, #12]
 800327e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	441a      	add	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22ff      	movs	r2, #255	; 0xff
 800328e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22ff      	movs	r2, #255	; 0xff
 8003296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d114      	bne.n	80032ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01a      	beq.n	80032de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3310      	adds	r3, #16
 80032ac:	4618      	mov	r0, r3
 80032ae:	f001 f903 	bl	80044b8 <xTaskRemoveFromEventList>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d012      	beq.n	80032de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032b8:	4b0c      	ldr	r3, [pc, #48]	; (80032ec <xQueueGenericReset+0xcc>)
 80032ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032be:	601a      	str	r2, [r3, #0]
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	f3bf 8f6f 	isb	sy
 80032c8:	e009      	b.n	80032de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3310      	adds	r3, #16
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fef2 	bl	80030b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3324      	adds	r3, #36	; 0x24
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff feed 	bl	80030b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032de:	f002 f831 	bl	8005344 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032e2:	2301      	movs	r3, #1
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08e      	sub	sp, #56	; 0x38
 80032f4:	af02      	add	r7, sp, #8
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d10a      	bne.n	8003336 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003332:	bf00      	nop
 8003334:	e7fe      	b.n	8003334 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <xQueueGenericCreateStatic+0x52>
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <xQueueGenericCreateStatic+0x56>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <xQueueGenericCreateStatic+0x58>
 8003346:	2300      	movs	r3, #0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	623b      	str	r3, [r7, #32]
}
 800335e:	bf00      	nop
 8003360:	e7fe      	b.n	8003360 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d102      	bne.n	800336e <xQueueGenericCreateStatic+0x7e>
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <xQueueGenericCreateStatic+0x82>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <xQueueGenericCreateStatic+0x84>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	61fb      	str	r3, [r7, #28]
}
 800338a:	bf00      	nop
 800338c:	e7fe      	b.n	800338c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800338e:	2350      	movs	r3, #80	; 0x50
 8003390:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b50      	cmp	r3, #80	; 0x50
 8003396:	d00a      	beq.n	80033ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	61bb      	str	r3, [r7, #24]
}
 80033aa:	bf00      	nop
 80033ac:	e7fe      	b.n	80033ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033bc:	2201      	movs	r2, #1
 80033be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	4613      	mov	r3, r2
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	68b9      	ldr	r1, [r7, #8]
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f805 	bl	80033e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033d8:	4618      	mov	r0, r3
 80033da:	3730      	adds	r7, #48	; 0x30
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d103      	bne.n	80033fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e002      	b.n	8003402 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800340e:	2101      	movs	r1, #1
 8003410:	69b8      	ldr	r0, [r7, #24]
 8003412:	f7ff ff05 	bl	8003220 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800341e:	bf00      	nop
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003436:	2300      	movs	r3, #0
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <xQueueGenericSend+0x32>
	__asm volatile
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003456:	bf00      	nop
 8003458:	e7fe      	b.n	8003458 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <xQueueGenericSend+0x40>
 8003460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <xQueueGenericSend+0x44>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <xQueueGenericSend+0x46>
 800346c:	2300      	movs	r3, #0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d10a      	bne.n	8003488 <xQueueGenericSend+0x60>
	__asm volatile
 8003472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003476:	f383 8811 	msr	BASEPRI, r3
 800347a:	f3bf 8f6f 	isb	sy
 800347e:	f3bf 8f4f 	dsb	sy
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003484:	bf00      	nop
 8003486:	e7fe      	b.n	8003486 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b02      	cmp	r3, #2
 800348c:	d103      	bne.n	8003496 <xQueueGenericSend+0x6e>
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b01      	cmp	r3, #1
 8003494:	d101      	bne.n	800349a <xQueueGenericSend+0x72>
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <xQueueGenericSend+0x74>
 800349a:	2300      	movs	r3, #0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xQueueGenericSend+0x8e>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	623b      	str	r3, [r7, #32]
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034b6:	f001 f9bd 	bl	8004834 <xTaskGetSchedulerState>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d102      	bne.n	80034c6 <xQueueGenericSend+0x9e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d101      	bne.n	80034ca <xQueueGenericSend+0xa2>
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <xQueueGenericSend+0xa4>
 80034ca:	2300      	movs	r3, #0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10a      	bne.n	80034e6 <xQueueGenericSend+0xbe>
	__asm volatile
 80034d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d4:	f383 8811 	msr	BASEPRI, r3
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	f3bf 8f4f 	dsb	sy
 80034e0:	61fb      	str	r3, [r7, #28]
}
 80034e2:	bf00      	nop
 80034e4:	e7fe      	b.n	80034e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034e6:	f001 fefd 	bl	80052e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d302      	bcc.n	80034fc <xQueueGenericSend+0xd4>
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d129      	bne.n	8003550 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	68b9      	ldr	r1, [r7, #8]
 8003500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003502:	f000 fa0b 	bl	800391c <prvCopyDataToQueue>
 8003506:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003512:	3324      	adds	r3, #36	; 0x24
 8003514:	4618      	mov	r0, r3
 8003516:	f000 ffcf 	bl	80044b8 <xTaskRemoveFromEventList>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d013      	beq.n	8003548 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003520:	4b3f      	ldr	r3, [pc, #252]	; (8003620 <xQueueGenericSend+0x1f8>)
 8003522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	e00a      	b.n	8003548 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003538:	4b39      	ldr	r3, [pc, #228]	; (8003620 <xQueueGenericSend+0x1f8>)
 800353a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003548:	f001 fefc 	bl	8005344 <vPortExitCritical>
				return pdPASS;
 800354c:	2301      	movs	r3, #1
 800354e:	e063      	b.n	8003618 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d103      	bne.n	800355e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003556:	f001 fef5 	bl	8005344 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800355a:	2300      	movs	r3, #0
 800355c:	e05c      	b.n	8003618 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003564:	f107 0314 	add.w	r3, r7, #20
 8003568:	4618      	mov	r0, r3
 800356a:	f001 f809 	bl	8004580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800356e:	2301      	movs	r3, #1
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003572:	f001 fee7 	bl	8005344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003576:	f000 fd7b 	bl	8004070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800357a:	f001 feb3 	bl	80052e4 <vPortEnterCritical>
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003584:	b25b      	sxtb	r3, r3
 8003586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358a:	d103      	bne.n	8003594 <xQueueGenericSend+0x16c>
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800359a:	b25b      	sxtb	r3, r3
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d103      	bne.n	80035aa <xQueueGenericSend+0x182>
 80035a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035aa:	f001 fecb 	bl	8005344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035ae:	1d3a      	adds	r2, r7, #4
 80035b0:	f107 0314 	add.w	r3, r7, #20
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fff8 	bl	80045ac <xTaskCheckForTimeOut>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d124      	bne.n	800360c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035c4:	f000 faa2 	bl	8003b0c <prvIsQueueFull>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d018      	beq.n	8003600 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	3310      	adds	r3, #16
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 ff1e 	bl	8004418 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035de:	f000 fa2d 	bl	8003a3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035e2:	f000 fd53 	bl	800408c <xTaskResumeAll>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f47f af7c 	bne.w	80034e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80035ee:	4b0c      	ldr	r3, [pc, #48]	; (8003620 <xQueueGenericSend+0x1f8>)
 80035f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	e772      	b.n	80034e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003600:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003602:	f000 fa1b 	bl	8003a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003606:	f000 fd41 	bl	800408c <xTaskResumeAll>
 800360a:	e76c      	b.n	80034e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800360c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800360e:	f000 fa15 	bl	8003a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003612:	f000 fd3b 	bl	800408c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003616:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003618:	4618      	mov	r0, r3
 800361a:	3738      	adds	r7, #56	; 0x38
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	e000ed04 	.word	0xe000ed04

08003624 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b090      	sub	sp, #64	; 0x40
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800364e:	bf00      	nop
 8003650:	e7fe      	b.n	8003650 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d103      	bne.n	8003660 <xQueueGenericSendFromISR+0x3c>
 8003658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <xQueueGenericSendFromISR+0x40>
 8003660:	2301      	movs	r3, #1
 8003662:	e000      	b.n	8003666 <xQueueGenericSendFromISR+0x42>
 8003664:	2300      	movs	r3, #0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d103      	bne.n	800368e <xQueueGenericSendFromISR+0x6a>
 8003686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <xQueueGenericSendFromISR+0x6e>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <xQueueGenericSendFromISR+0x70>
 8003692:	2300      	movs	r3, #0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10a      	bne.n	80036ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	623b      	str	r3, [r7, #32]
}
 80036aa:	bf00      	nop
 80036ac:	e7fe      	b.n	80036ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ae:	f001 fefb 	bl	80054a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036b2:	f3ef 8211 	mrs	r2, BASEPRI
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	61fa      	str	r2, [r7, #28]
 80036c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <xQueueGenericSendFromISR+0xbc>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d12f      	bne.n	8003740 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036f0:	683a      	ldr	r2, [r7, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80036f6:	f000 f911 	bl	800391c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003702:	d112      	bne.n	800372a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	2b00      	cmp	r3, #0
 800370a:	d016      	beq.n	800373a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800370c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370e:	3324      	adds	r3, #36	; 0x24
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fed1 	bl	80044b8 <xTaskRemoveFromEventList>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00e      	beq.n	800373a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e007      	b.n	800373a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800372a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800372e:	3301      	adds	r3, #1
 8003730:	b2db      	uxtb	r3, r3
 8003732:	b25a      	sxtb	r2, r3
 8003734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800373a:	2301      	movs	r3, #1
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800373e:	e001      	b.n	8003744 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003740:	2300      	movs	r3, #0
 8003742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003746:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800374e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003752:	4618      	mov	r0, r3
 8003754:	3740      	adds	r7, #64	; 0x40
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
	...

0800375c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	; 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003768:	2300      	movs	r3, #0
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <xQueueReceive+0x30>
	__asm volatile
 8003776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377a:	f383 8811 	msr	BASEPRI, r3
 800377e:	f3bf 8f6f 	isb	sy
 8003782:	f3bf 8f4f 	dsb	sy
 8003786:	623b      	str	r3, [r7, #32]
}
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <xQueueReceive+0x3e>
 8003792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <xQueueReceive+0x42>
 800379a:	2301      	movs	r3, #1
 800379c:	e000      	b.n	80037a0 <xQueueReceive+0x44>
 800379e:	2300      	movs	r3, #0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10a      	bne.n	80037ba <xQueueReceive+0x5e>
	__asm volatile
 80037a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a8:	f383 8811 	msr	BASEPRI, r3
 80037ac:	f3bf 8f6f 	isb	sy
 80037b0:	f3bf 8f4f 	dsb	sy
 80037b4:	61fb      	str	r3, [r7, #28]
}
 80037b6:	bf00      	nop
 80037b8:	e7fe      	b.n	80037b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ba:	f001 f83b 	bl	8004834 <xTaskGetSchedulerState>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d102      	bne.n	80037ca <xQueueReceive+0x6e>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <xQueueReceive+0x72>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <xQueueReceive+0x74>
 80037ce:	2300      	movs	r3, #0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d10a      	bne.n	80037ea <xQueueReceive+0x8e>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	61bb      	str	r3, [r7, #24]
}
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037ea:	f001 fd7b 	bl	80052e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d01f      	beq.n	800383a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037fe:	f000 f8f7 	bl	80039f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	1e5a      	subs	r2, r3, #1
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00f      	beq.n	8003832 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003814:	3310      	adds	r3, #16
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fe4e 	bl	80044b8 <xTaskRemoveFromEventList>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003822:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <xQueueReceive+0x1bc>)
 8003824:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003832:	f001 fd87 	bl	8005344 <vPortExitCritical>
				return pdPASS;
 8003836:	2301      	movs	r3, #1
 8003838:	e069      	b.n	800390e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003840:	f001 fd80 	bl	8005344 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003844:	2300      	movs	r3, #0
 8003846:	e062      	b.n	800390e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800384e:	f107 0310 	add.w	r3, r7, #16
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fe94 	bl	8004580 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003858:	2301      	movs	r3, #1
 800385a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800385c:	f001 fd72 	bl	8005344 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003860:	f000 fc06 	bl	8004070 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003864:	f001 fd3e 	bl	80052e4 <vPortEnterCritical>
 8003868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800386a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800386e:	b25b      	sxtb	r3, r3
 8003870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003874:	d103      	bne.n	800387e <xQueueReceive+0x122>
 8003876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800387e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003884:	b25b      	sxtb	r3, r3
 8003886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388a:	d103      	bne.n	8003894 <xQueueReceive+0x138>
 800388c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003894:	f001 fd56 	bl	8005344 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003898:	1d3a      	adds	r2, r7, #4
 800389a:	f107 0310 	add.w	r3, r7, #16
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fe83 	bl	80045ac <xTaskCheckForTimeOut>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d123      	bne.n	80038f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ae:	f000 f917 	bl	8003ae0 <prvIsQueueEmpty>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d017      	beq.n	80038e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ba:	3324      	adds	r3, #36	; 0x24
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f000 fda9 	bl	8004418 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038c8:	f000 f8b8 	bl	8003a3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038cc:	f000 fbde 	bl	800408c <xTaskResumeAll>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d189      	bne.n	80037ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80038d6:	4b10      	ldr	r3, [pc, #64]	; (8003918 <xQueueReceive+0x1bc>)
 80038d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f3bf 8f4f 	dsb	sy
 80038e2:	f3bf 8f6f 	isb	sy
 80038e6:	e780      	b.n	80037ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038ea:	f000 f8a7 	bl	8003a3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038ee:	f000 fbcd 	bl	800408c <xTaskResumeAll>
 80038f2:	e77a      	b.n	80037ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038f6:	f000 f8a1 	bl	8003a3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038fa:	f000 fbc7 	bl	800408c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003900:	f000 f8ee 	bl	8003ae0 <prvIsQueueEmpty>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	f43f af6f 	beq.w	80037ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800390c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800390e:	4618      	mov	r0, r3
 8003910:	3730      	adds	r7, #48	; 0x30
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	e000ed04 	.word	0xe000ed04

0800391c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10d      	bne.n	8003956 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d14d      	bne.n	80039de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f000 ff92 	bl	8004870 <xTaskPriorityDisinherit>
 800394c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	e043      	b.n	80039de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d119      	bne.n	8003990 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6858      	ldr	r0, [r3, #4]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	461a      	mov	r2, r3
 8003966:	68b9      	ldr	r1, [r7, #8]
 8003968:	f001 ffec 	bl	8005944 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	685a      	ldr	r2, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	441a      	add	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	429a      	cmp	r2, r3
 8003984:	d32b      	bcc.n	80039de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	e026      	b.n	80039de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68d8      	ldr	r0, [r3, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	461a      	mov	r2, r3
 800399a:	68b9      	ldr	r1, [r7, #8]
 800399c:	f001 ffd2 	bl	8005944 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	68da      	ldr	r2, [r3, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	425b      	negs	r3, r3
 80039aa:	441a      	add	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d207      	bcs.n	80039cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c4:	425b      	negs	r3, r3
 80039c6:	441a      	add	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d105      	bne.n	80039de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	3b01      	subs	r3, #1
 80039dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039e6:	697b      	ldr	r3, [r7, #20]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d018      	beq.n	8003a34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	441a      	add	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d303      	bcc.n	8003a24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68d9      	ldr	r1, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	6838      	ldr	r0, [r7, #0]
 8003a30:	f001 ff88 	bl	8005944 <memcpy>
	}
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a44:	f001 fc4e 	bl	80052e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a50:	e011      	b.n	8003a76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d012      	beq.n	8003a80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	3324      	adds	r3, #36	; 0x24
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fd2a 	bl	80044b8 <xTaskRemoveFromEventList>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a6a:	f000 fe01 	bl	8004670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	dce9      	bgt.n	8003a52 <prvUnlockQueue+0x16>
 8003a7e:	e000      	b.n	8003a82 <prvUnlockQueue+0x46>
					break;
 8003a80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	22ff      	movs	r2, #255	; 0xff
 8003a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a8a:	f001 fc5b 	bl	8005344 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a8e:	f001 fc29 	bl	80052e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a9a:	e011      	b.n	8003ac0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d012      	beq.n	8003aca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	3310      	adds	r3, #16
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fd05 	bl	80044b8 <xTaskRemoveFromEventList>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003ab4:	f000 fddc 	bl	8004670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ab8:	7bbb      	ldrb	r3, [r7, #14]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ac0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	dce9      	bgt.n	8003a9c <prvUnlockQueue+0x60>
 8003ac8:	e000      	b.n	8003acc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003aca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	22ff      	movs	r2, #255	; 0xff
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ad4:	f001 fc36 	bl	8005344 <vPortExitCritical>
}
 8003ad8:	bf00      	nop
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ae8:	f001 fbfc 	bl	80052e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d102      	bne.n	8003afa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	e001      	b.n	8003afe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003afe:	f001 fc21 	bl	8005344 <vPortExitCritical>

	return xReturn;
 8003b02:	68fb      	ldr	r3, [r7, #12]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3710      	adds	r7, #16
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003b14:	f001 fbe6 	bl	80052e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d102      	bne.n	8003b2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b24:	2301      	movs	r3, #1
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e001      	b.n	8003b2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b2e:	f001 fc09 	bl	8005344 <vPortExitCritical>

	return xReturn;
 8003b32:	68fb      	ldr	r3, [r7, #12]
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b46:	2300      	movs	r3, #0
 8003b48:	60fb      	str	r3, [r7, #12]
 8003b4a:	e014      	b.n	8003b76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b4c:	4a0f      	ldr	r2, [pc, #60]	; (8003b8c <vQueueAddToRegistry+0x50>)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b58:	490c      	ldr	r1, [pc, #48]	; (8003b8c <vQueueAddToRegistry+0x50>)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b62:	4a0a      	ldr	r2, [pc, #40]	; (8003b8c <vQueueAddToRegistry+0x50>)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4413      	add	r3, r2
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b6e:	e006      	b.n	8003b7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2b07      	cmp	r3, #7
 8003b7a:	d9e7      	bls.n	8003b4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b7c:	bf00      	nop
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	200007c4 	.word	0x200007c4

08003b90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ba0:	f001 fba0 	bl	80052e4 <vPortEnterCritical>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003baa:	b25b      	sxtb	r3, r3
 8003bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb0:	d103      	bne.n	8003bba <vQueueWaitForMessageRestricted+0x2a>
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bc0:	b25b      	sxtb	r3, r3
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d103      	bne.n	8003bd0 <vQueueWaitForMessageRestricted+0x40>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bd0:	f001 fbb8 	bl	8005344 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d106      	bne.n	8003bea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3324      	adds	r3, #36	; 0x24
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	4618      	mov	r0, r3
 8003be6:	f000 fc3b 	bl	8004460 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff26 	bl	8003a3c <prvUnlockQueue>
	}
 8003bf0:	bf00      	nop
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08e      	sub	sp, #56	; 0x38
 8003bfc:	af04      	add	r7, sp, #16
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d10a      	bne.n	8003c22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c10:	f383 8811 	msr	BASEPRI, r3
 8003c14:	f3bf 8f6f 	isb	sy
 8003c18:	f3bf 8f4f 	dsb	sy
 8003c1c:	623b      	str	r3, [r7, #32]
}
 8003c1e:	bf00      	nop
 8003c20:	e7fe      	b.n	8003c20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xTaskCreateStatic+0x46>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	61fb      	str	r3, [r7, #28]
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c3e:	235c      	movs	r3, #92	; 0x5c
 8003c40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b5c      	cmp	r3, #92	; 0x5c
 8003c46:	d00a      	beq.n	8003c5e <xTaskCreateStatic+0x66>
	__asm volatile
 8003c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4c:	f383 8811 	msr	BASEPRI, r3
 8003c50:	f3bf 8f6f 	isb	sy
 8003c54:	f3bf 8f4f 	dsb	sy
 8003c58:	61bb      	str	r3, [r7, #24]
}
 8003c5a:	bf00      	nop
 8003c5c:	e7fe      	b.n	8003c5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d01e      	beq.n	8003ca4 <xTaskCreateStatic+0xac>
 8003c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d01b      	beq.n	8003ca4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9303      	str	r3, [sp, #12]
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	9302      	str	r3, [sp, #8]
 8003c86:	f107 0314 	add.w	r3, r7, #20
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8e:	9300      	str	r3, [sp, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68b9      	ldr	r1, [r7, #8]
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f850 	bl	8003d3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c9e:	f000 f8dd 	bl	8003e5c <prvAddNewTaskToReadyList>
 8003ca2:	e001      	b.n	8003ca8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ca8:	697b      	ldr	r3, [r7, #20]
	}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3728      	adds	r7, #40	; 0x28
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}

08003cb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b08c      	sub	sp, #48	; 0x30
 8003cb6:	af04      	add	r7, sp, #16
 8003cb8:	60f8      	str	r0, [r7, #12]
 8003cba:	60b9      	str	r1, [r7, #8]
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f001 fc2e 	bl	8005528 <pvPortMalloc>
 8003ccc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003cd4:	205c      	movs	r0, #92	; 0x5c
 8003cd6:	f001 fc27 	bl	8005528 <pvPortMalloc>
 8003cda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce8:	e005      	b.n	8003cf6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f001 fce8 	bl	80056c0 <vPortFree>
 8003cf0:	e001      	b.n	8003cf6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d017      	beq.n	8003d2c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003d04:	88fa      	ldrh	r2, [r7, #6]
 8003d06:	2300      	movs	r3, #0
 8003d08:	9303      	str	r3, [sp, #12]
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	9302      	str	r3, [sp, #8]
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68b9      	ldr	r1, [r7, #8]
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 f80e 	bl	8003d3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003d20:	69f8      	ldr	r0, [r7, #28]
 8003d22:	f000 f89b 	bl	8003e5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e002      	b.n	8003d32 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d30:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d32:	69bb      	ldr	r3, [r7, #24]
	}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b088      	sub	sp, #32
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	461a      	mov	r2, r3
 8003d54:	21a5      	movs	r1, #165	; 0xa5
 8003d56:	f001 fe03 	bl	8005960 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d64:	3b01      	subs	r3, #1
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	f023 0307 	bic.w	r3, r3, #7
 8003d72:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d82:	f383 8811 	msr	BASEPRI, r3
 8003d86:	f3bf 8f6f 	isb	sy
 8003d8a:	f3bf 8f4f 	dsb	sy
 8003d8e:	617b      	str	r3, [r7, #20]
}
 8003d90:	bf00      	nop
 8003d92:	e7fe      	b.n	8003d92 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d01f      	beq.n	8003dda <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
 8003d9e:	e012      	b.n	8003dc6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	4413      	add	r3, r2
 8003da6:	7819      	ldrb	r1, [r3, #0]
 8003da8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	3334      	adds	r3, #52	; 0x34
 8003db0:	460a      	mov	r2, r1
 8003db2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	4413      	add	r3, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d006      	beq.n	8003dce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	2b0f      	cmp	r3, #15
 8003dca:	d9e9      	bls.n	8003da0 <prvInitialiseNewTask+0x64>
 8003dcc:	e000      	b.n	8003dd0 <prvInitialiseNewTask+0x94>
			{
				break;
 8003dce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dd8:	e003      	b.n	8003de2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	2b37      	cmp	r3, #55	; 0x37
 8003de6:	d901      	bls.n	8003dec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003de8:	2337      	movs	r3, #55	; 0x37
 8003dea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003df6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e00:	3304      	adds	r3, #4
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff f978 	bl	80030f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0a:	3318      	adds	r3, #24
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff f973 	bl	80030f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e16:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	2200      	movs	r2, #0
 8003e32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	69b8      	ldr	r0, [r7, #24]
 8003e3c:	f001 f928 	bl	8005090 <pxPortInitialiseStack>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e52:	bf00      	nop
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e64:	f001 fa3e 	bl	80052e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <prvAddNewTaskToReadyList+0xc4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <prvAddNewTaskToReadyList+0xc4>)
 8003e70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e72:	4b2c      	ldr	r3, [pc, #176]	; (8003f24 <prvAddNewTaskToReadyList+0xc8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e7a:	4a2a      	ldr	r2, [pc, #168]	; (8003f24 <prvAddNewTaskToReadyList+0xc8>)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e80:	4b27      	ldr	r3, [pc, #156]	; (8003f20 <prvAddNewTaskToReadyList+0xc4>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d110      	bne.n	8003eaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e88:	f000 fc16 	bl	80046b8 <prvInitialiseTaskLists>
 8003e8c:	e00d      	b.n	8003eaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <prvAddNewTaskToReadyList+0xcc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e96:	4b23      	ldr	r3, [pc, #140]	; (8003f24 <prvAddNewTaskToReadyList+0xc8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d802      	bhi.n	8003eaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <prvAddNewTaskToReadyList+0xc8>)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003eaa:	4b20      	ldr	r3, [pc, #128]	; (8003f2c <prvAddNewTaskToReadyList+0xd0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	4a1e      	ldr	r2, [pc, #120]	; (8003f2c <prvAddNewTaskToReadyList+0xd0>)
 8003eb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <prvAddNewTaskToReadyList+0xd0>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec0:	4b1b      	ldr	r3, [pc, #108]	; (8003f30 <prvAddNewTaskToReadyList+0xd4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d903      	bls.n	8003ed0 <prvAddNewTaskToReadyList+0x74>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ecc:	4a18      	ldr	r2, [pc, #96]	; (8003f30 <prvAddNewTaskToReadyList+0xd4>)
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4a15      	ldr	r2, [pc, #84]	; (8003f34 <prvAddNewTaskToReadyList+0xd8>)
 8003ede:	441a      	add	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	3304      	adds	r3, #4
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4610      	mov	r0, r2
 8003ee8:	f7ff f913 	bl	8003112 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003eec:	f001 fa2a 	bl	8005344 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ef0:	4b0d      	ldr	r3, [pc, #52]	; (8003f28 <prvAddNewTaskToReadyList+0xcc>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <prvAddNewTaskToReadyList+0xc8>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d207      	bcs.n	8003f16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <prvAddNewTaskToReadyList+0xdc>)
 8003f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	20000cd8 	.word	0x20000cd8
 8003f24:	20000804 	.word	0x20000804
 8003f28:	20000ce4 	.word	0x20000ce4
 8003f2c:	20000cf4 	.word	0x20000cf4
 8003f30:	20000ce0 	.word	0x20000ce0
 8003f34:	20000808 	.word	0x20000808
 8003f38:	e000ed04 	.word	0xe000ed04

08003f3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d017      	beq.n	8003f7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <vTaskDelay+0x60>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00a      	beq.n	8003f6c <vTaskDelay+0x30>
	__asm volatile
 8003f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f5a:	f383 8811 	msr	BASEPRI, r3
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	f3bf 8f4f 	dsb	sy
 8003f66:	60bb      	str	r3, [r7, #8]
}
 8003f68:	bf00      	nop
 8003f6a:	e7fe      	b.n	8003f6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003f6c:	f000 f880 	bl	8004070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f70:	2100      	movs	r1, #0
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fcea 	bl	800494c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f78:	f000 f888 	bl	800408c <xTaskResumeAll>
 8003f7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d107      	bne.n	8003f94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <vTaskDelay+0x64>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f94:	bf00      	nop
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000d00 	.word	0x20000d00
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b08a      	sub	sp, #40	; 0x28
 8003fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003fb2:	463a      	mov	r2, r7
 8003fb4:	1d39      	adds	r1, r7, #4
 8003fb6:	f107 0308 	add.w	r3, r7, #8
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f7ff f848 	bl	8003050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003fc0:	6839      	ldr	r1, [r7, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	9202      	str	r2, [sp, #8]
 8003fc8:	9301      	str	r3, [sp, #4]
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	460a      	mov	r2, r1
 8003fd2:	4921      	ldr	r1, [pc, #132]	; (8004058 <vTaskStartScheduler+0xb4>)
 8003fd4:	4821      	ldr	r0, [pc, #132]	; (800405c <vTaskStartScheduler+0xb8>)
 8003fd6:	f7ff fe0f 	bl	8003bf8 <xTaskCreateStatic>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a20      	ldr	r2, [pc, #128]	; (8004060 <vTaskStartScheduler+0xbc>)
 8003fde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fe0:	4b1f      	ldr	r3, [pc, #124]	; (8004060 <vTaskStartScheduler+0xbc>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e001      	b.n	8003ff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d102      	bne.n	8003ffe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ff8:	f000 fcfc 	bl	80049f4 <xTimerCreateTimerTask>
 8003ffc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d116      	bne.n	8004032 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004008:	f383 8811 	msr	BASEPRI, r3
 800400c:	f3bf 8f6f 	isb	sy
 8004010:	f3bf 8f4f 	dsb	sy
 8004014:	613b      	str	r3, [r7, #16]
}
 8004016:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004018:	4b12      	ldr	r3, [pc, #72]	; (8004064 <vTaskStartScheduler+0xc0>)
 800401a:	f04f 32ff 	mov.w	r2, #4294967295
 800401e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <vTaskStartScheduler+0xc4>)
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004026:	4b11      	ldr	r3, [pc, #68]	; (800406c <vTaskStartScheduler+0xc8>)
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800402c:	f001 f8b8 	bl	80051a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004030:	e00e      	b.n	8004050 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d10a      	bne.n	8004050 <vTaskStartScheduler+0xac>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	60fb      	str	r3, [r7, #12]
}
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <vTaskStartScheduler+0xaa>
}
 8004050:	bf00      	nop
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	08005994 	.word	0x08005994
 800405c:	08004689 	.word	0x08004689
 8004060:	20000cfc 	.word	0x20000cfc
 8004064:	20000cf8 	.word	0x20000cf8
 8004068:	20000ce4 	.word	0x20000ce4
 800406c:	20000cdc 	.word	0x20000cdc

08004070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004074:	4b04      	ldr	r3, [pc, #16]	; (8004088 <vTaskSuspendAll+0x18>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3301      	adds	r3, #1
 800407a:	4a03      	ldr	r2, [pc, #12]	; (8004088 <vTaskSuspendAll+0x18>)
 800407c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000d00 	.word	0x20000d00

0800408c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004096:	2300      	movs	r3, #0
 8004098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800409a:	4b42      	ldr	r3, [pc, #264]	; (80041a4 <xTaskResumeAll+0x118>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10a      	bne.n	80040b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	603b      	str	r3, [r7, #0]
}
 80040b4:	bf00      	nop
 80040b6:	e7fe      	b.n	80040b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80040b8:	f001 f914 	bl	80052e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80040bc:	4b39      	ldr	r3, [pc, #228]	; (80041a4 <xTaskResumeAll+0x118>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	4a38      	ldr	r2, [pc, #224]	; (80041a4 <xTaskResumeAll+0x118>)
 80040c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c6:	4b37      	ldr	r3, [pc, #220]	; (80041a4 <xTaskResumeAll+0x118>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d162      	bne.n	8004194 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040ce:	4b36      	ldr	r3, [pc, #216]	; (80041a8 <xTaskResumeAll+0x11c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d05e      	beq.n	8004194 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040d6:	e02f      	b.n	8004138 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040d8:	4b34      	ldr	r3, [pc, #208]	; (80041ac <xTaskResumeAll+0x120>)
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	3318      	adds	r3, #24
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff f871 	bl	80031cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	3304      	adds	r3, #4
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff f86c 	bl	80031cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4b2d      	ldr	r3, [pc, #180]	; (80041b0 <xTaskResumeAll+0x124>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d903      	bls.n	8004108 <xTaskResumeAll+0x7c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	4a2a      	ldr	r2, [pc, #168]	; (80041b0 <xTaskResumeAll+0x124>)
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <xTaskResumeAll+0x128>)
 8004116:	441a      	add	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3304      	adds	r3, #4
 800411c:	4619      	mov	r1, r3
 800411e:	4610      	mov	r0, r2
 8004120:	f7fe fff7 	bl	8003112 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004128:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <xTaskResumeAll+0x12c>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	429a      	cmp	r2, r3
 8004130:	d302      	bcc.n	8004138 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004132:	4b22      	ldr	r3, [pc, #136]	; (80041bc <xTaskResumeAll+0x130>)
 8004134:	2201      	movs	r2, #1
 8004136:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004138:	4b1c      	ldr	r3, [pc, #112]	; (80041ac <xTaskResumeAll+0x120>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1cb      	bne.n	80040d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004146:	f000 fb55 	bl	80047f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800414a:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <xTaskResumeAll+0x134>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d010      	beq.n	8004178 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004156:	f000 f847 	bl	80041e8 <xTaskIncrementTick>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004160:	4b16      	ldr	r3, [pc, #88]	; (80041bc <xTaskResumeAll+0x130>)
 8004162:	2201      	movs	r2, #1
 8004164:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	3b01      	subs	r3, #1
 800416a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f1      	bne.n	8004156 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004172:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <xTaskResumeAll+0x134>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004178:	4b10      	ldr	r3, [pc, #64]	; (80041bc <xTaskResumeAll+0x130>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d009      	beq.n	8004194 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004180:	2301      	movs	r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004184:	4b0f      	ldr	r3, [pc, #60]	; (80041c4 <xTaskResumeAll+0x138>)
 8004186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004194:	f001 f8d6 	bl	8005344 <vPortExitCritical>

	return xAlreadyYielded;
 8004198:	68bb      	ldr	r3, [r7, #8]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000d00 	.word	0x20000d00
 80041a8:	20000cd8 	.word	0x20000cd8
 80041ac:	20000c98 	.word	0x20000c98
 80041b0:	20000ce0 	.word	0x20000ce0
 80041b4:	20000808 	.word	0x20000808
 80041b8:	20000804 	.word	0x20000804
 80041bc:	20000cec 	.word	0x20000cec
 80041c0:	20000ce8 	.word	0x20000ce8
 80041c4:	e000ed04 	.word	0xe000ed04

080041c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <xTaskGetTickCount+0x1c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041d4:	687b      	ldr	r3, [r7, #4]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	20000cdc 	.word	0x20000cdc

080041e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041f2:	4b4f      	ldr	r3, [pc, #316]	; (8004330 <xTaskIncrementTick+0x148>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 808f 	bne.w	800431a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041fc:	4b4d      	ldr	r3, [pc, #308]	; (8004334 <xTaskIncrementTick+0x14c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3301      	adds	r3, #1
 8004202:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004204:	4a4b      	ldr	r2, [pc, #300]	; (8004334 <xTaskIncrementTick+0x14c>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d120      	bne.n	8004252 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004210:	4b49      	ldr	r3, [pc, #292]	; (8004338 <xTaskIncrementTick+0x150>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <xTaskIncrementTick+0x48>
	__asm volatile
 800421a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800421e:	f383 8811 	msr	BASEPRI, r3
 8004222:	f3bf 8f6f 	isb	sy
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	603b      	str	r3, [r7, #0]
}
 800422c:	bf00      	nop
 800422e:	e7fe      	b.n	800422e <xTaskIncrementTick+0x46>
 8004230:	4b41      	ldr	r3, [pc, #260]	; (8004338 <xTaskIncrementTick+0x150>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	4b41      	ldr	r3, [pc, #260]	; (800433c <xTaskIncrementTick+0x154>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a3f      	ldr	r2, [pc, #252]	; (8004338 <xTaskIncrementTick+0x150>)
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	4a3f      	ldr	r2, [pc, #252]	; (800433c <xTaskIncrementTick+0x154>)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	4b3e      	ldr	r3, [pc, #248]	; (8004340 <xTaskIncrementTick+0x158>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3301      	adds	r3, #1
 800424a:	4a3d      	ldr	r2, [pc, #244]	; (8004340 <xTaskIncrementTick+0x158>)
 800424c:	6013      	str	r3, [r2, #0]
 800424e:	f000 fad1 	bl	80047f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004252:	4b3c      	ldr	r3, [pc, #240]	; (8004344 <xTaskIncrementTick+0x15c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	429a      	cmp	r2, r3
 800425a:	d349      	bcc.n	80042f0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800425c:	4b36      	ldr	r3, [pc, #216]	; (8004338 <xTaskIncrementTick+0x150>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004266:	4b37      	ldr	r3, [pc, #220]	; (8004344 <xTaskIncrementTick+0x15c>)
 8004268:	f04f 32ff 	mov.w	r2, #4294967295
 800426c:	601a      	str	r2, [r3, #0]
					break;
 800426e:	e03f      	b.n	80042f0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004270:	4b31      	ldr	r3, [pc, #196]	; (8004338 <xTaskIncrementTick+0x150>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	429a      	cmp	r2, r3
 8004286:	d203      	bcs.n	8004290 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004288:	4a2e      	ldr	r2, [pc, #184]	; (8004344 <xTaskIncrementTick+0x15c>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800428e:	e02f      	b.n	80042f0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	3304      	adds	r3, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7fe ff99 	bl	80031cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d004      	beq.n	80042ac <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3318      	adds	r3, #24
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7fe ff90 	bl	80031cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b0:	4b25      	ldr	r3, [pc, #148]	; (8004348 <xTaskIncrementTick+0x160>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d903      	bls.n	80042c0 <xTaskIncrementTick+0xd8>
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042bc:	4a22      	ldr	r2, [pc, #136]	; (8004348 <xTaskIncrementTick+0x160>)
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c4:	4613      	mov	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <xTaskIncrementTick+0x164>)
 80042ce:	441a      	add	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3304      	adds	r3, #4
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f7fe ff1b 	bl	8003112 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <xTaskIncrementTick+0x168>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d3b8      	bcc.n	800425c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80042ea:	2301      	movs	r3, #1
 80042ec:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042ee:	e7b5      	b.n	800425c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042f0:	4b17      	ldr	r3, [pc, #92]	; (8004350 <xTaskIncrementTick+0x168>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f6:	4915      	ldr	r1, [pc, #84]	; (800434c <xTaskIncrementTick+0x164>)
 80042f8:	4613      	mov	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	440b      	add	r3, r1
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d901      	bls.n	800430c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800430c:	4b11      	ldr	r3, [pc, #68]	; (8004354 <xTaskIncrementTick+0x16c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d007      	beq.n	8004324 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004314:	2301      	movs	r3, #1
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e004      	b.n	8004324 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <xTaskIncrementTick+0x170>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	3301      	adds	r3, #1
 8004320:	4a0d      	ldr	r2, [pc, #52]	; (8004358 <xTaskIncrementTick+0x170>)
 8004322:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004324:	697b      	ldr	r3, [r7, #20]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3718      	adds	r7, #24
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000d00 	.word	0x20000d00
 8004334:	20000cdc 	.word	0x20000cdc
 8004338:	20000c90 	.word	0x20000c90
 800433c:	20000c94 	.word	0x20000c94
 8004340:	20000cf0 	.word	0x20000cf0
 8004344:	20000cf8 	.word	0x20000cf8
 8004348:	20000ce0 	.word	0x20000ce0
 800434c:	20000808 	.word	0x20000808
 8004350:	20000804 	.word	0x20000804
 8004354:	20000cec 	.word	0x20000cec
 8004358:	20000ce8 	.word	0x20000ce8

0800435c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004362:	4b28      	ldr	r3, [pc, #160]	; (8004404 <vTaskSwitchContext+0xa8>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800436a:	4b27      	ldr	r3, [pc, #156]	; (8004408 <vTaskSwitchContext+0xac>)
 800436c:	2201      	movs	r2, #1
 800436e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004370:	e041      	b.n	80043f6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004372:	4b25      	ldr	r3, [pc, #148]	; (8004408 <vTaskSwitchContext+0xac>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004378:	4b24      	ldr	r3, [pc, #144]	; (800440c <vTaskSwitchContext+0xb0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e010      	b.n	80043a2 <vTaskSwitchContext+0x46>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <vTaskSwitchContext+0x40>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	607b      	str	r3, [r7, #4]
}
 8004398:	bf00      	nop
 800439a:	e7fe      	b.n	800439a <vTaskSwitchContext+0x3e>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	3b01      	subs	r3, #1
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	491b      	ldr	r1, [pc, #108]	; (8004410 <vTaskSwitchContext+0xb4>)
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0e4      	beq.n	8004380 <vTaskSwitchContext+0x24>
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4a13      	ldr	r2, [pc, #76]	; (8004410 <vTaskSwitchContext+0xb4>)
 80043c2:	4413      	add	r3, r2
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	3308      	adds	r3, #8
 80043d8:	429a      	cmp	r2, r3
 80043da:	d104      	bne.n	80043e6 <vTaskSwitchContext+0x8a>
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	605a      	str	r2, [r3, #4]
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	4a09      	ldr	r2, [pc, #36]	; (8004414 <vTaskSwitchContext+0xb8>)
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	4a06      	ldr	r2, [pc, #24]	; (800440c <vTaskSwitchContext+0xb0>)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6013      	str	r3, [r2, #0]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000d00 	.word	0x20000d00
 8004408:	20000cec 	.word	0x20000cec
 800440c:	20000ce0 	.word	0x20000ce0
 8004410:	20000808 	.word	0x20000808
 8004414:	20000804 	.word	0x20000804

08004418 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b084      	sub	sp, #16
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d10a      	bne.n	800443e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	60fb      	str	r3, [r7, #12]
}
 800443a:	bf00      	nop
 800443c:	e7fe      	b.n	800443c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <vTaskPlaceOnEventList+0x44>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3318      	adds	r3, #24
 8004444:	4619      	mov	r1, r3
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fe fe87 	bl	800315a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800444c:	2101      	movs	r1, #1
 800444e:	6838      	ldr	r0, [r7, #0]
 8004450:	f000 fa7c 	bl	800494c <prvAddCurrentTaskToDelayedList>
}
 8004454:	bf00      	nop
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	20000804 	.word	0x20000804

08004460 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10a      	bne.n	8004488 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	617b      	str	r3, [r7, #20]
}
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004488:	4b0a      	ldr	r3, [pc, #40]	; (80044b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3318      	adds	r3, #24
 800448e:	4619      	mov	r1, r3
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f7fe fe3e 	bl	8003112 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
 80044a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	68b8      	ldr	r0, [r7, #8]
 80044a6:	f000 fa51 	bl	800494c <prvAddCurrentTaskToDelayedList>
	}
 80044aa:	bf00      	nop
 80044ac:	3718      	adds	r7, #24
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	20000804 	.word	0x20000804

080044b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	60fb      	str	r3, [r7, #12]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3318      	adds	r3, #24
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fe fe6f 	bl	80031cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ee:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <xTaskRemoveFromEventList+0xb0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d11d      	bne.n	8004532 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	3304      	adds	r3, #4
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7fe fe66 	bl	80031cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004504:	4b19      	ldr	r3, [pc, #100]	; (800456c <xTaskRemoveFromEventList+0xb4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d903      	bls.n	8004514 <xTaskRemoveFromEventList+0x5c>
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a16      	ldr	r2, [pc, #88]	; (800456c <xTaskRemoveFromEventList+0xb4>)
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004518:	4613      	mov	r3, r2
 800451a:	009b      	lsls	r3, r3, #2
 800451c:	4413      	add	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4a13      	ldr	r2, [pc, #76]	; (8004570 <xTaskRemoveFromEventList+0xb8>)
 8004522:	441a      	add	r2, r3
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	3304      	adds	r3, #4
 8004528:	4619      	mov	r1, r3
 800452a:	4610      	mov	r0, r2
 800452c:	f7fe fdf1 	bl	8003112 <vListInsertEnd>
 8004530:	e005      	b.n	800453e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3318      	adds	r3, #24
 8004536:	4619      	mov	r1, r3
 8004538:	480e      	ldr	r0, [pc, #56]	; (8004574 <xTaskRemoveFromEventList+0xbc>)
 800453a:	f7fe fdea 	bl	8003112 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004542:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <xTaskRemoveFromEventList+0xc0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004548:	429a      	cmp	r2, r3
 800454a:	d905      	bls.n	8004558 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800454c:	2301      	movs	r3, #1
 800454e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004550:	4b0a      	ldr	r3, [pc, #40]	; (800457c <xTaskRemoveFromEventList+0xc4>)
 8004552:	2201      	movs	r2, #1
 8004554:	601a      	str	r2, [r3, #0]
 8004556:	e001      	b.n	800455c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800455c:	697b      	ldr	r3, [r7, #20]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000d00 	.word	0x20000d00
 800456c:	20000ce0 	.word	0x20000ce0
 8004570:	20000808 	.word	0x20000808
 8004574:	20000c98 	.word	0x20000c98
 8004578:	20000804 	.word	0x20000804
 800457c:	20000cec 	.word	0x20000cec

08004580 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <vTaskInternalSetTimeOutState+0x24>)
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004590:	4b05      	ldr	r3, [pc, #20]	; (80045a8 <vTaskInternalSetTimeOutState+0x28>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	20000cf0 	.word	0x20000cf0
 80045a8:	20000cdc 	.word	0x20000cdc

080045ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b088      	sub	sp, #32
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	613b      	str	r3, [r7, #16]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60fb      	str	r3, [r7, #12]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80045ee:	f000 fe79 	bl	80052e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045f2:	4b1d      	ldr	r3, [pc, #116]	; (8004668 <xTaskCheckForTimeOut+0xbc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460a:	d102      	bne.n	8004612 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	e023      	b.n	800465a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	4b15      	ldr	r3, [pc, #84]	; (800466c <xTaskCheckForTimeOut+0xc0>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d007      	beq.n	800462e <xTaskCheckForTimeOut+0x82>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	429a      	cmp	r2, r3
 8004626:	d302      	bcc.n	800462e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004628:	2301      	movs	r3, #1
 800462a:	61fb      	str	r3, [r7, #28]
 800462c:	e015      	b.n	800465a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	429a      	cmp	r2, r3
 8004636:	d20b      	bcs.n	8004650 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	1ad2      	subs	r2, r2, r3
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff9b 	bl	8004580 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	e004      	b.n	800465a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2200      	movs	r2, #0
 8004654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004656:	2301      	movs	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800465a:	f000 fe73 	bl	8005344 <vPortExitCritical>

	return xReturn;
 800465e:	69fb      	ldr	r3, [r7, #28]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000cdc 	.word	0x20000cdc
 800466c:	20000cf0 	.word	0x20000cf0

08004670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004670:	b480      	push	{r7}
 8004672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004674:	4b03      	ldr	r3, [pc, #12]	; (8004684 <vTaskMissedYield+0x14>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
}
 800467a:	bf00      	nop
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	20000cec 	.word	0x20000cec

08004688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004690:	f000 f852 	bl	8004738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004694:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <prvIdleTask+0x28>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d9f9      	bls.n	8004690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <prvIdleTask+0x2c>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80046ac:	e7f0      	b.n	8004690 <prvIdleTask+0x8>
 80046ae:	bf00      	nop
 80046b0:	20000808 	.word	0x20000808
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046be:	2300      	movs	r3, #0
 80046c0:	607b      	str	r3, [r7, #4]
 80046c2:	e00c      	b.n	80046de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	4413      	add	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4a12      	ldr	r2, [pc, #72]	; (8004718 <prvInitialiseTaskLists+0x60>)
 80046d0:	4413      	add	r3, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fcf0 	bl	80030b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	3301      	adds	r3, #1
 80046dc:	607b      	str	r3, [r7, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2b37      	cmp	r3, #55	; 0x37
 80046e2:	d9ef      	bls.n	80046c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046e4:	480d      	ldr	r0, [pc, #52]	; (800471c <prvInitialiseTaskLists+0x64>)
 80046e6:	f7fe fce7 	bl	80030b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ea:	480d      	ldr	r0, [pc, #52]	; (8004720 <prvInitialiseTaskLists+0x68>)
 80046ec:	f7fe fce4 	bl	80030b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046f0:	480c      	ldr	r0, [pc, #48]	; (8004724 <prvInitialiseTaskLists+0x6c>)
 80046f2:	f7fe fce1 	bl	80030b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046f6:	480c      	ldr	r0, [pc, #48]	; (8004728 <prvInitialiseTaskLists+0x70>)
 80046f8:	f7fe fcde 	bl	80030b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046fc:	480b      	ldr	r0, [pc, #44]	; (800472c <prvInitialiseTaskLists+0x74>)
 80046fe:	f7fe fcdb 	bl	80030b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004702:	4b0b      	ldr	r3, [pc, #44]	; (8004730 <prvInitialiseTaskLists+0x78>)
 8004704:	4a05      	ldr	r2, [pc, #20]	; (800471c <prvInitialiseTaskLists+0x64>)
 8004706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004708:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <prvInitialiseTaskLists+0x7c>)
 800470a:	4a05      	ldr	r2, [pc, #20]	; (8004720 <prvInitialiseTaskLists+0x68>)
 800470c:	601a      	str	r2, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000808 	.word	0x20000808
 800471c:	20000c68 	.word	0x20000c68
 8004720:	20000c7c 	.word	0x20000c7c
 8004724:	20000c98 	.word	0x20000c98
 8004728:	20000cac 	.word	0x20000cac
 800472c:	20000cc4 	.word	0x20000cc4
 8004730:	20000c90 	.word	0x20000c90
 8004734:	20000c94 	.word	0x20000c94

08004738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800473e:	e019      	b.n	8004774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004740:	f000 fdd0 	bl	80052e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	4b10      	ldr	r3, [pc, #64]	; (8004788 <prvCheckTasksWaitingTermination+0x50>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3304      	adds	r3, #4
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fd3b 	bl	80031cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004756:	4b0d      	ldr	r3, [pc, #52]	; (800478c <prvCheckTasksWaitingTermination+0x54>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3b01      	subs	r3, #1
 800475c:	4a0b      	ldr	r2, [pc, #44]	; (800478c <prvCheckTasksWaitingTermination+0x54>)
 800475e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <prvCheckTasksWaitingTermination+0x58>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3b01      	subs	r3, #1
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <prvCheckTasksWaitingTermination+0x58>)
 8004768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800476a:	f000 fdeb 	bl	8005344 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f810 	bl	8004794 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <prvCheckTasksWaitingTermination+0x58>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e1      	bne.n	8004740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000cac 	.word	0x20000cac
 800478c:	20000cd8 	.word	0x20000cd8
 8004790:	20000cc0 	.word	0x20000cc0

08004794 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d108      	bne.n	80047b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 ff88 	bl	80056c0 <vPortFree>
				vPortFree( pxTCB );
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 ff85 	bl	80056c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80047b6:	e018      	b.n	80047ea <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d103      	bne.n	80047ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 ff7c 	bl	80056c0 <vPortFree>
	}
 80047c8:	e00f      	b.n	80047ea <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d00a      	beq.n	80047ea <prvDeleteTCB+0x56>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <prvDeleteTCB+0x54>
	}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047fa:	4b0c      	ldr	r3, [pc, #48]	; (800482c <prvResetNextTaskUnblockTime+0x38>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <prvResetNextTaskUnblockTime+0x3c>)
 8004806:	f04f 32ff 	mov.w	r2, #4294967295
 800480a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800480c:	e008      	b.n	8004820 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800480e:	4b07      	ldr	r3, [pc, #28]	; (800482c <prvResetNextTaskUnblockTime+0x38>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4a04      	ldr	r2, [pc, #16]	; (8004830 <prvResetNextTaskUnblockTime+0x3c>)
 800481e:	6013      	str	r3, [r2, #0]
}
 8004820:	bf00      	nop
 8004822:	370c      	adds	r7, #12
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	20000c90 	.word	0x20000c90
 8004830:	20000cf8 	.word	0x20000cf8

08004834 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <xTaskGetSchedulerState+0x34>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d102      	bne.n	8004848 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004842:	2301      	movs	r3, #1
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	e008      	b.n	800485a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004848:	4b08      	ldr	r3, [pc, #32]	; (800486c <xTaskGetSchedulerState+0x38>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d102      	bne.n	8004856 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004850:	2302      	movs	r3, #2
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	e001      	b.n	800485a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004856:	2300      	movs	r3, #0
 8004858:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800485a:	687b      	ldr	r3, [r7, #4]
	}
 800485c:	4618      	mov	r0, r3
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	20000ce4 	.word	0x20000ce4
 800486c:	20000d00 	.word	0x20000d00

08004870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800487c:	2300      	movs	r3, #0
 800487e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d056      	beq.n	8004934 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004886:	4b2e      	ldr	r3, [pc, #184]	; (8004940 <xTaskPriorityDisinherit+0xd0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	693a      	ldr	r2, [r7, #16]
 800488c:	429a      	cmp	r2, r3
 800488e:	d00a      	beq.n	80048a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004894:	f383 8811 	msr	BASEPRI, r3
 8004898:	f3bf 8f6f 	isb	sy
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	60fb      	str	r3, [r7, #12]
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10a      	bne.n	80048c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60bb      	str	r3, [r7, #8]
}
 80048c0:	bf00      	nop
 80048c2:	e7fe      	b.n	80048c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c8:	1e5a      	subs	r2, r3, #1
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d02c      	beq.n	8004934 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d128      	bne.n	8004934 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe fc70 	bl	80031cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	4b0f      	ldr	r3, [pc, #60]	; (8004944 <xTaskPriorityDisinherit+0xd4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	429a      	cmp	r2, r3
 800490a:	d903      	bls.n	8004914 <xTaskPriorityDisinherit+0xa4>
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	4a0c      	ldr	r2, [pc, #48]	; (8004944 <xTaskPriorityDisinherit+0xd4>)
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4a09      	ldr	r2, [pc, #36]	; (8004948 <xTaskPriorityDisinherit+0xd8>)
 8004922:	441a      	add	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	3304      	adds	r3, #4
 8004928:	4619      	mov	r1, r3
 800492a:	4610      	mov	r0, r2
 800492c:	f7fe fbf1 	bl	8003112 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004930:	2301      	movs	r3, #1
 8004932:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004934:	697b      	ldr	r3, [r7, #20]
	}
 8004936:	4618      	mov	r0, r3
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	20000804 	.word	0x20000804
 8004944:	20000ce0 	.word	0x20000ce0
 8004948:	20000808 	.word	0x20000808

0800494c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004956:	4b21      	ldr	r3, [pc, #132]	; (80049dc <prvAddCurrentTaskToDelayedList+0x90>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800495c:	4b20      	ldr	r3, [pc, #128]	; (80049e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3304      	adds	r3, #4
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fc32 	bl	80031cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d10a      	bne.n	8004986 <prvAddCurrentTaskToDelayedList+0x3a>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004976:	4b1a      	ldr	r3, [pc, #104]	; (80049e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4819      	ldr	r0, [pc, #100]	; (80049e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004980:	f7fe fbc7 	bl	8003112 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004984:	e026      	b.n	80049d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4413      	add	r3, r2
 800498c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800498e:	4b14      	ldr	r3, [pc, #80]	; (80049e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68ba      	ldr	r2, [r7, #8]
 8004994:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	429a      	cmp	r2, r3
 800499c:	d209      	bcs.n	80049b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800499e:	4b12      	ldr	r3, [pc, #72]	; (80049e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fe fbd5 	bl	800315a <vListInsert>
}
 80049b0:	e010      	b.n	80049d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049b2:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	3304      	adds	r3, #4
 80049bc:	4619      	mov	r1, r3
 80049be:	4610      	mov	r0, r2
 80049c0:	f7fe fbcb 	bl	800315a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d202      	bcs.n	80049d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049ce:	4a08      	ldr	r2, [pc, #32]	; (80049f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6013      	str	r3, [r2, #0]
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000cdc 	.word	0x20000cdc
 80049e0:	20000804 	.word	0x20000804
 80049e4:	20000cc4 	.word	0x20000cc4
 80049e8:	20000c94 	.word	0x20000c94
 80049ec:	20000c90 	.word	0x20000c90
 80049f0:	20000cf8 	.word	0x20000cf8

080049f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08a      	sub	sp, #40	; 0x28
 80049f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049fe:	f000 fb07 	bl	8005010 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004a02:	4b1c      	ldr	r3, [pc, #112]	; (8004a74 <xTimerCreateTimerTask+0x80>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d021      	beq.n	8004a4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a12:	1d3a      	adds	r2, r7, #4
 8004a14:	f107 0108 	add.w	r1, r7, #8
 8004a18:	f107 030c 	add.w	r3, r7, #12
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe fb31 	bl	8003084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	9202      	str	r2, [sp, #8]
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2300      	movs	r3, #0
 8004a32:	460a      	mov	r2, r1
 8004a34:	4910      	ldr	r1, [pc, #64]	; (8004a78 <xTimerCreateTimerTask+0x84>)
 8004a36:	4811      	ldr	r0, [pc, #68]	; (8004a7c <xTimerCreateTimerTask+0x88>)
 8004a38:	f7ff f8de 	bl	8003bf8 <xTaskCreateStatic>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	4a10      	ldr	r2, [pc, #64]	; (8004a80 <xTimerCreateTimerTask+0x8c>)
 8004a40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a42:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <xTimerCreateTimerTask+0x8c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10a      	bne.n	8004a6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
 8004a64:	613b      	str	r3, [r7, #16]
}
 8004a66:	bf00      	nop
 8004a68:	e7fe      	b.n	8004a68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a6a:	697b      	ldr	r3, [r7, #20]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3718      	adds	r7, #24
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	20000d34 	.word	0x20000d34
 8004a78:	0800599c 	.word	0x0800599c
 8004a7c:	08004bb9 	.word	0x08004bb9
 8004a80:	20000d38 	.word	0x20000d38

08004a84 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10a      	bne.n	8004ab2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	623b      	str	r3, [r7, #32]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	; (8004b1c <xTimerGenericCommand+0x98>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d02a      	beq.n	8004b10 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	2b05      	cmp	r3, #5
 8004aca:	dc18      	bgt.n	8004afe <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004acc:	f7ff feb2 	bl	8004834 <xTaskGetSchedulerState>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d109      	bne.n	8004aea <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ad6:	4b11      	ldr	r3, [pc, #68]	; (8004b1c <xTimerGenericCommand+0x98>)
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	f107 0110 	add.w	r1, r7, #16
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	f7fe fca1 	bl	8003428 <xQueueGenericSend>
 8004ae6:	6278      	str	r0, [r7, #36]	; 0x24
 8004ae8:	e012      	b.n	8004b10 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004aea:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <xTimerGenericCommand+0x98>)
 8004aec:	6818      	ldr	r0, [r3, #0]
 8004aee:	f107 0110 	add.w	r1, r7, #16
 8004af2:	2300      	movs	r3, #0
 8004af4:	2200      	movs	r2, #0
 8004af6:	f7fe fc97 	bl	8003428 <xQueueGenericSend>
 8004afa:	6278      	str	r0, [r7, #36]	; 0x24
 8004afc:	e008      	b.n	8004b10 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004afe:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <xTimerGenericCommand+0x98>)
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	f107 0110 	add.w	r1, r7, #16
 8004b06:	2300      	movs	r3, #0
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	f7fe fd8b 	bl	8003624 <xQueueGenericSendFromISR>
 8004b0e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3728      	adds	r7, #40	; 0x28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000d34 	.word	0x20000d34

08004b20 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b2a:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <prvProcessExpiredTimer+0x94>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7fe fb47 	bl	80031cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d022      	beq.n	8004b92 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	699a      	ldr	r2, [r3, #24]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	18d1      	adds	r1, r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	6978      	ldr	r0, [r7, #20]
 8004b5a:	f000 f8d1 	bl	8004d00 <prvInsertTimerInActiveList>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01f      	beq.n	8004ba4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b64:	2300      	movs	r3, #0
 8004b66:	9300      	str	r3, [sp, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	6978      	ldr	r0, [r7, #20]
 8004b70:	f7ff ff88 	bl	8004a84 <xTimerGenericCommand>
 8004b74:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d113      	bne.n	8004ba4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	60fb      	str	r3, [r7, #12]
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	4798      	blx	r3
}
 8004bac:	bf00      	nop
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	20000d2c 	.word	0x20000d2c

08004bb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bc0:	f107 0308 	add.w	r3, r7, #8
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f857 	bl	8004c78 <prvGetNextExpireTime>
 8004bca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	4619      	mov	r1, r3
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f803 	bl	8004bdc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bd6:	f000 f8d5 	bl	8004d84 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bda:	e7f1      	b.n	8004bc0 <prvTimerTask+0x8>

08004bdc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004be6:	f7ff fa43 	bl	8004070 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bea:	f107 0308 	add.w	r3, r7, #8
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f866 	bl	8004cc0 <prvSampleTimeNow>
 8004bf4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d130      	bne.n	8004c5e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <prvProcessTimerOrBlockTask+0x3c>
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d806      	bhi.n	8004c18 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c0a:	f7ff fa3f 	bl	800408c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff ff85 	bl	8004b20 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c16:	e024      	b.n	8004c62 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d008      	beq.n	8004c30 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c1e:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <prvProcessTimerOrBlockTask+0x90>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <prvProcessTimerOrBlockTask+0x50>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <prvProcessTimerOrBlockTask+0x52>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c30:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <prvProcessTimerOrBlockTask+0x94>)
 8004c32:	6818      	ldr	r0, [r3, #0]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	f7fe ffa7 	bl	8003b90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c42:	f7ff fa23 	bl	800408c <xTaskResumeAll>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <prvProcessTimerOrBlockTask+0x98>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
}
 8004c5c:	e001      	b.n	8004c62 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c5e:	f7ff fa15 	bl	800408c <xTaskResumeAll>
}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000d30 	.word	0x20000d30
 8004c70:	20000d34 	.word	0x20000d34
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c80:	4b0e      	ldr	r3, [pc, #56]	; (8004cbc <prvGetNextExpireTime+0x44>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <prvGetNextExpireTime+0x16>
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	e000      	b.n	8004c90 <prvGetNextExpireTime+0x18>
 8004c8e:	2200      	movs	r2, #0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <prvGetNextExpireTime+0x44>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	e001      	b.n	8004cac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004cac:	68fb      	ldr	r3, [r7, #12]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000d2c 	.word	0x20000d2c

08004cc0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cc8:	f7ff fa7e 	bl	80041c8 <xTaskGetTickCount>
 8004ccc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cce:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <prvSampleTimeNow+0x3c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d205      	bcs.n	8004ce4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cd8:	f000 f936 	bl	8004f48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e002      	b.n	8004cea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cea:	4a04      	ldr	r2, [pc, #16]	; (8004cfc <prvSampleTimeNow+0x3c>)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20000d3c 	.word	0x20000d3c

08004d00 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	68ba      	ldr	r2, [r7, #8]
 8004d16:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d812      	bhi.n	8004d4c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	1ad2      	subs	r2, r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d34:	2301      	movs	r3, #1
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	e01b      	b.n	8004d72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <prvInsertTimerInActiveList+0x7c>)
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3304      	adds	r3, #4
 8004d42:	4619      	mov	r1, r3
 8004d44:	4610      	mov	r0, r2
 8004d46:	f7fe fa08 	bl	800315a <vListInsert>
 8004d4a:	e012      	b.n	8004d72 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d206      	bcs.n	8004d62 <prvInsertTimerInActiveList+0x62>
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d302      	bcc.n	8004d62 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	617b      	str	r3, [r7, #20]
 8004d60:	e007      	b.n	8004d72 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <prvInsertTimerInActiveList+0x80>)
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	4619      	mov	r1, r3
 8004d6c:	4610      	mov	r0, r2
 8004d6e:	f7fe f9f4 	bl	800315a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d72:	697b      	ldr	r3, [r7, #20]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20000d30 	.word	0x20000d30
 8004d80:	20000d2c 	.word	0x20000d2c

08004d84 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b08e      	sub	sp, #56	; 0x38
 8004d88:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d8a:	e0ca      	b.n	8004f22 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	da18      	bge.n	8004dc4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d92:	1d3b      	adds	r3, r7, #4
 8004d94:	3304      	adds	r3, #4
 8004d96:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	61fb      	str	r3, [r7, #28]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dba:	6850      	ldr	r0, [r2, #4]
 8004dbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dbe:	6892      	ldr	r2, [r2, #8]
 8004dc0:	4611      	mov	r1, r2
 8004dc2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f2c0 80aa 	blt.w	8004f20 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe f9f5 	bl	80031cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004de2:	463b      	mov	r3, r7
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7ff ff6b 	bl	8004cc0 <prvSampleTimeNow>
 8004dea:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	f200 8097 	bhi.w	8004f22 <prvProcessReceivedCommands+0x19e>
 8004df4:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <prvProcessReceivedCommands+0x78>)
 8004df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfa:	bf00      	nop
 8004dfc:	08004e25 	.word	0x08004e25
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e25 	.word	0x08004e25
 8004e08:	08004e99 	.word	0x08004e99
 8004e0c:	08004ead 	.word	0x08004ead
 8004e10:	08004ef7 	.word	0x08004ef7
 8004e14:	08004e25 	.word	0x08004e25
 8004e18:	08004e25 	.word	0x08004e25
 8004e1c:	08004e99 	.word	0x08004e99
 8004e20:	08004ead 	.word	0x08004ead
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	18d1      	adds	r1, r2, r3
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e44:	f7ff ff5c 	bl	8004d00 <prvInsertTimerInActiveList>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d069      	beq.n	8004f22 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e54:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05e      	beq.n	8004f22 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	699b      	ldr	r3, [r3, #24]
 8004e6a:	441a      	add	r2, r3
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	9300      	str	r3, [sp, #0]
 8004e70:	2300      	movs	r3, #0
 8004e72:	2100      	movs	r1, #0
 8004e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e76:	f7ff fe05 	bl	8004a84 <xTimerGenericCommand>
 8004e7a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e7c:	6a3b      	ldr	r3, [r7, #32]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d14f      	bne.n	8004f22 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	61bb      	str	r3, [r7, #24]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e9e:	f023 0301 	bic.w	r3, r3, #1
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004eaa:	e03a      	b.n	8004f22 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004eb2:	f043 0301 	orr.w	r3, r3, #1
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ebe:	68ba      	ldr	r2, [r7, #8]
 8004ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10a      	bne.n	8004ee2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed0:	f383 8811 	msr	BASEPRI, r3
 8004ed4:	f3bf 8f6f 	isb	sy
 8004ed8:	f3bf 8f4f 	dsb	sy
 8004edc:	617b      	str	r3, [r7, #20]
}
 8004ede:	bf00      	nop
 8004ee0:	e7fe      	b.n	8004ee0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	18d1      	adds	r1, r2, r3
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ef0:	f7ff ff06 	bl	8004d00 <prvInsertTimerInActiveList>
					break;
 8004ef4:	e015      	b.n	8004f22 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d103      	bne.n	8004f0c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004f04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f06:	f000 fbdb 	bl	80056c0 <vPortFree>
 8004f0a:	e00a      	b.n	8004f22 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f1e:	e000      	b.n	8004f22 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004f20:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f22:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <prvProcessReceivedCommands+0x1c0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	1d39      	adds	r1, r7, #4
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fe fc16 	bl	800375c <xQueueReceive>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f47f af2a 	bne.w	8004d8c <prvProcessReceivedCommands+0x8>
	}
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	3730      	adds	r7, #48	; 0x30
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000d34 	.word	0x20000d34

08004f48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b088      	sub	sp, #32
 8004f4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f4e:	e048      	b.n	8004fe2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f50:	4b2d      	ldr	r3, [pc, #180]	; (8005008 <prvSwitchTimerLists+0xc0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5a:	4b2b      	ldr	r3, [pc, #172]	; (8005008 <prvSwitchTimerLists+0xc0>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe f92f 	bl	80031cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d02e      	beq.n	8004fe2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d90e      	bls.n	8004fb4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fa2:	4b19      	ldr	r3, [pc, #100]	; (8005008 <prvSwitchTimerLists+0xc0>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3304      	adds	r3, #4
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f7fe f8d4 	bl	800315a <vListInsert>
 8004fb2:	e016      	b.n	8004fe2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	2300      	movs	r3, #0
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f7ff fd60 	bl	8004a84 <xTimerGenericCommand>
 8004fc4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d10a      	bne.n	8004fe2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd0:	f383 8811 	msr	BASEPRI, r3
 8004fd4:	f3bf 8f6f 	isb	sy
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	603b      	str	r3, [r7, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	e7fe      	b.n	8004fe0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <prvSwitchTimerLists+0xc0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1b1      	bne.n	8004f50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fec:	4b06      	ldr	r3, [pc, #24]	; (8005008 <prvSwitchTimerLists+0xc0>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ff2:	4b06      	ldr	r3, [pc, #24]	; (800500c <prvSwitchTimerLists+0xc4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a04      	ldr	r2, [pc, #16]	; (8005008 <prvSwitchTimerLists+0xc0>)
 8004ff8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ffa:	4a04      	ldr	r2, [pc, #16]	; (800500c <prvSwitchTimerLists+0xc4>)
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	6013      	str	r3, [r2, #0]
}
 8005000:	bf00      	nop
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000d2c 	.word	0x20000d2c
 800500c:	20000d30 	.word	0x20000d30

08005010 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005016:	f000 f965 	bl	80052e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800501a:	4b15      	ldr	r3, [pc, #84]	; (8005070 <prvCheckForValidListAndQueue+0x60>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d120      	bne.n	8005064 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005022:	4814      	ldr	r0, [pc, #80]	; (8005074 <prvCheckForValidListAndQueue+0x64>)
 8005024:	f7fe f848 	bl	80030b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005028:	4813      	ldr	r0, [pc, #76]	; (8005078 <prvCheckForValidListAndQueue+0x68>)
 800502a:	f7fe f845 	bl	80030b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800502e:	4b13      	ldr	r3, [pc, #76]	; (800507c <prvCheckForValidListAndQueue+0x6c>)
 8005030:	4a10      	ldr	r2, [pc, #64]	; (8005074 <prvCheckForValidListAndQueue+0x64>)
 8005032:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005034:	4b12      	ldr	r3, [pc, #72]	; (8005080 <prvCheckForValidListAndQueue+0x70>)
 8005036:	4a10      	ldr	r2, [pc, #64]	; (8005078 <prvCheckForValidListAndQueue+0x68>)
 8005038:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	4b11      	ldr	r3, [pc, #68]	; (8005084 <prvCheckForValidListAndQueue+0x74>)
 8005040:	4a11      	ldr	r2, [pc, #68]	; (8005088 <prvCheckForValidListAndQueue+0x78>)
 8005042:	2110      	movs	r1, #16
 8005044:	200a      	movs	r0, #10
 8005046:	f7fe f953 	bl	80032f0 <xQueueGenericCreateStatic>
 800504a:	4603      	mov	r3, r0
 800504c:	4a08      	ldr	r2, [pc, #32]	; (8005070 <prvCheckForValidListAndQueue+0x60>)
 800504e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005050:	4b07      	ldr	r3, [pc, #28]	; (8005070 <prvCheckForValidListAndQueue+0x60>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005058:	4b05      	ldr	r3, [pc, #20]	; (8005070 <prvCheckForValidListAndQueue+0x60>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	490b      	ldr	r1, [pc, #44]	; (800508c <prvCheckForValidListAndQueue+0x7c>)
 800505e:	4618      	mov	r0, r3
 8005060:	f7fe fd6c 	bl	8003b3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005064:	f000 f96e 	bl	8005344 <vPortExitCritical>
}
 8005068:	bf00      	nop
 800506a:	46bd      	mov	sp, r7
 800506c:	bd80      	pop	{r7, pc}
 800506e:	bf00      	nop
 8005070:	20000d34 	.word	0x20000d34
 8005074:	20000d04 	.word	0x20000d04
 8005078:	20000d18 	.word	0x20000d18
 800507c:	20000d2c 	.word	0x20000d2c
 8005080:	20000d30 	.word	0x20000d30
 8005084:	20000de0 	.word	0x20000de0
 8005088:	20000d40 	.word	0x20000d40
 800508c:	080059a4 	.word	0x080059a4

08005090 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	3b04      	subs	r3, #4
 80050a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3b04      	subs	r3, #4
 80050ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3b04      	subs	r3, #4
 80050be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050c0:	4a0c      	ldr	r2, [pc, #48]	; (80050f4 <pxPortInitialiseStack+0x64>)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	3b14      	subs	r3, #20
 80050ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3b04      	subs	r3, #4
 80050d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f06f 0202 	mvn.w	r2, #2
 80050de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	3b20      	subs	r3, #32
 80050e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3714      	adds	r7, #20
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	080050f9 	.word	0x080050f9

080050f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050fe:	2300      	movs	r3, #0
 8005100:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005102:	4b12      	ldr	r3, [pc, #72]	; (800514c <prvTaskExitError+0x54>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510a:	d00a      	beq.n	8005122 <prvTaskExitError+0x2a>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	60fb      	str	r3, [r7, #12]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <prvTaskExitError+0x28>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	60bb      	str	r3, [r7, #8]
}
 8005134:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005136:	bf00      	nop
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0fc      	beq.n	8005138 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800513e:	bf00      	nop
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	2000000c 	.word	0x2000000c

08005150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <pxCurrentTCBConst2>)
 8005152:	6819      	ldr	r1, [r3, #0]
 8005154:	6808      	ldr	r0, [r1, #0]
 8005156:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	f380 8809 	msr	PSP, r0
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8811 	msr	BASEPRI, r0
 800516a:	4770      	bx	lr
 800516c:	f3af 8000 	nop.w

08005170 <pxCurrentTCBConst2>:
 8005170:	20000804 	.word	0x20000804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop

08005178 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005178:	4808      	ldr	r0, [pc, #32]	; (800519c <prvPortStartFirstTask+0x24>)
 800517a:	6800      	ldr	r0, [r0, #0]
 800517c:	6800      	ldr	r0, [r0, #0]
 800517e:	f380 8808 	msr	MSP, r0
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f380 8814 	msr	CONTROL, r0
 800518a:	b662      	cpsie	i
 800518c:	b661      	cpsie	f
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	df00      	svc	0
 8005198:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800519a:	bf00      	nop
 800519c:	e000ed08 	.word	0xe000ed08

080051a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b086      	sub	sp, #24
 80051a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051a6:	4b46      	ldr	r3, [pc, #280]	; (80052c0 <xPortStartScheduler+0x120>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a46      	ldr	r2, [pc, #280]	; (80052c4 <xPortStartScheduler+0x124>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d10a      	bne.n	80051c6 <xPortStartScheduler+0x26>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	613b      	str	r3, [r7, #16]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051c6:	4b3e      	ldr	r3, [pc, #248]	; (80052c0 <xPortStartScheduler+0x120>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a3f      	ldr	r2, [pc, #252]	; (80052c8 <xPortStartScheduler+0x128>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d10a      	bne.n	80051e6 <xPortStartScheduler+0x46>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	60fb      	str	r3, [r7, #12]
}
 80051e2:	bf00      	nop
 80051e4:	e7fe      	b.n	80051e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051e6:	4b39      	ldr	r3, [pc, #228]	; (80052cc <xPortStartScheduler+0x12c>)
 80051e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	22ff      	movs	r2, #255	; 0xff
 80051f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005208:	b2da      	uxtb	r2, r3
 800520a:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <xPortStartScheduler+0x130>)
 800520c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800520e:	4b31      	ldr	r3, [pc, #196]	; (80052d4 <xPortStartScheduler+0x134>)
 8005210:	2207      	movs	r2, #7
 8005212:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005214:	e009      	b.n	800522a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005216:	4b2f      	ldr	r3, [pc, #188]	; (80052d4 <xPortStartScheduler+0x134>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	3b01      	subs	r3, #1
 800521c:	4a2d      	ldr	r2, [pc, #180]	; (80052d4 <xPortStartScheduler+0x134>)
 800521e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	b2db      	uxtb	r3, r3
 8005228:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800522a:	78fb      	ldrb	r3, [r7, #3]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005232:	2b80      	cmp	r3, #128	; 0x80
 8005234:	d0ef      	beq.n	8005216 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005236:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <xPortStartScheduler+0x134>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1c3 0307 	rsb	r3, r3, #7
 800523e:	2b04      	cmp	r3, #4
 8005240:	d00a      	beq.n	8005258 <xPortStartScheduler+0xb8>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	60bb      	str	r3, [r7, #8]
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005258:	4b1e      	ldr	r3, [pc, #120]	; (80052d4 <xPortStartScheduler+0x134>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	021b      	lsls	r3, r3, #8
 800525e:	4a1d      	ldr	r2, [pc, #116]	; (80052d4 <xPortStartScheduler+0x134>)
 8005260:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005262:	4b1c      	ldr	r3, [pc, #112]	; (80052d4 <xPortStartScheduler+0x134>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800526a:	4a1a      	ldr	r2, [pc, #104]	; (80052d4 <xPortStartScheduler+0x134>)
 800526c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	b2da      	uxtb	r2, r3
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005276:	4b18      	ldr	r3, [pc, #96]	; (80052d8 <xPortStartScheduler+0x138>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a17      	ldr	r2, [pc, #92]	; (80052d8 <xPortStartScheduler+0x138>)
 800527c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005280:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <xPortStartScheduler+0x138>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a14      	ldr	r2, [pc, #80]	; (80052d8 <xPortStartScheduler+0x138>)
 8005288:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800528c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800528e:	f000 f8dd 	bl	800544c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <xPortStartScheduler+0x13c>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005298:	f000 f8fc 	bl	8005494 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800529c:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <xPortStartScheduler+0x140>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a0f      	ldr	r2, [pc, #60]	; (80052e0 <xPortStartScheduler+0x140>)
 80052a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80052a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052a8:	f7ff ff66 	bl	8005178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052ac:	f7ff f856 	bl	800435c <vTaskSwitchContext>
	prvTaskExitError();
 80052b0:	f7ff ff22 	bl	80050f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	e000ed00 	.word	0xe000ed00
 80052c4:	410fc271 	.word	0x410fc271
 80052c8:	410fc270 	.word	0x410fc270
 80052cc:	e000e400 	.word	0xe000e400
 80052d0:	20000e30 	.word	0x20000e30
 80052d4:	20000e34 	.word	0x20000e34
 80052d8:	e000ed20 	.word	0xe000ed20
 80052dc:	2000000c 	.word	0x2000000c
 80052e0:	e000ef34 	.word	0xe000ef34

080052e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	607b      	str	r3, [r7, #4]
}
 80052fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052fe:	4b0f      	ldr	r3, [pc, #60]	; (800533c <vPortEnterCritical+0x58>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	3301      	adds	r3, #1
 8005304:	4a0d      	ldr	r2, [pc, #52]	; (800533c <vPortEnterCritical+0x58>)
 8005306:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005308:	4b0c      	ldr	r3, [pc, #48]	; (800533c <vPortEnterCritical+0x58>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d10f      	bne.n	8005330 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <vPortEnterCritical+0x5c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00a      	beq.n	8005330 <vPortEnterCritical+0x4c>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	603b      	str	r3, [r7, #0]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <vPortEnterCritical+0x4a>
	}
}
 8005330:	bf00      	nop
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr
 800533c:	2000000c 	.word	0x2000000c
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800534a:	4b12      	ldr	r3, [pc, #72]	; (8005394 <vPortExitCritical+0x50>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10a      	bne.n	8005368 <vPortExitCritical+0x24>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	f383 8811 	msr	BASEPRI, r3
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	607b      	str	r3, [r7, #4]
}
 8005364:	bf00      	nop
 8005366:	e7fe      	b.n	8005366 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005368:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <vPortExitCritical+0x50>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	3b01      	subs	r3, #1
 800536e:	4a09      	ldr	r2, [pc, #36]	; (8005394 <vPortExitCritical+0x50>)
 8005370:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005372:	4b08      	ldr	r3, [pc, #32]	; (8005394 <vPortExitCritical+0x50>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d105      	bne.n	8005386 <vPortExitCritical+0x42>
 800537a:	2300      	movs	r3, #0
 800537c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f383 8811 	msr	BASEPRI, r3
}
 8005384:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	2000000c 	.word	0x2000000c
	...

080053a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053a0:	f3ef 8009 	mrs	r0, PSP
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <pxCurrentTCBConst>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	f01e 0f10 	tst.w	lr, #16
 80053b0:	bf08      	it	eq
 80053b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ba:	6010      	str	r0, [r2, #0]
 80053bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053c4:	f380 8811 	msr	BASEPRI, r0
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f7fe ffc4 	bl	800435c <vTaskSwitchContext>
 80053d4:	f04f 0000 	mov.w	r0, #0
 80053d8:	f380 8811 	msr	BASEPRI, r0
 80053dc:	bc09      	pop	{r0, r3}
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e6:	f01e 0f10 	tst.w	lr, #16
 80053ea:	bf08      	it	eq
 80053ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053f0:	f380 8809 	msr	PSP, r0
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w

08005400 <pxCurrentTCBConst>:
 8005400:	20000804 	.word	0x20000804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
}
 8005420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005422:	f7fe fee1 	bl	80041e8 <xTaskIncrementTick>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800542c:	4b06      	ldr	r3, [pc, #24]	; (8005448 <xPortSysTickHandler+0x40>)
 800542e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	2300      	movs	r3, #0
 8005436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	f383 8811 	msr	BASEPRI, r3
}
 800543e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	e000ed04 	.word	0xe000ed04

0800544c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <vPortSetupTimerInterrupt+0x34>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005456:	4b0b      	ldr	r3, [pc, #44]	; (8005484 <vPortSetupTimerInterrupt+0x38>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800545c:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <vPortSetupTimerInterrupt+0x3c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0a      	ldr	r2, [pc, #40]	; (800548c <vPortSetupTimerInterrupt+0x40>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	099b      	lsrs	r3, r3, #6
 8005468:	4a09      	ldr	r2, [pc, #36]	; (8005490 <vPortSetupTimerInterrupt+0x44>)
 800546a:	3b01      	subs	r3, #1
 800546c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800546e:	4b04      	ldr	r3, [pc, #16]	; (8005480 <vPortSetupTimerInterrupt+0x34>)
 8005470:	2207      	movs	r2, #7
 8005472:	601a      	str	r2, [r3, #0]
}
 8005474:	bf00      	nop
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	e000e010 	.word	0xe000e010
 8005484:	e000e018 	.word	0xe000e018
 8005488:	20000000 	.word	0x20000000
 800548c:	10624dd3 	.word	0x10624dd3
 8005490:	e000e014 	.word	0xe000e014

08005494 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005494:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054a4 <vPortEnableVFP+0x10>
 8005498:	6801      	ldr	r1, [r0, #0]
 800549a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800549e:	6001      	str	r1, [r0, #0]
 80054a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054a2:	bf00      	nop
 80054a4:	e000ed88 	.word	0xe000ed88

080054a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054ae:	f3ef 8305 	mrs	r3, IPSR
 80054b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	d914      	bls.n	80054e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054ba:	4a17      	ldr	r2, [pc, #92]	; (8005518 <vPortValidateInterruptPriority+0x70>)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4413      	add	r3, r2
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054c4:	4b15      	ldr	r3, [pc, #84]	; (800551c <vPortValidateInterruptPriority+0x74>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	7afa      	ldrb	r2, [r7, #11]
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d20a      	bcs.n	80054e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	607b      	str	r3, [r7, #4]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054e4:	4b0e      	ldr	r3, [pc, #56]	; (8005520 <vPortValidateInterruptPriority+0x78>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054ec:	4b0d      	ldr	r3, [pc, #52]	; (8005524 <vPortValidateInterruptPriority+0x7c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d90a      	bls.n	800550a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	603b      	str	r3, [r7, #0]
}
 8005506:	bf00      	nop
 8005508:	e7fe      	b.n	8005508 <vPortValidateInterruptPriority+0x60>
	}
 800550a:	bf00      	nop
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000e3f0 	.word	0xe000e3f0
 800551c:	20000e30 	.word	0x20000e30
 8005520:	e000ed0c 	.word	0xe000ed0c
 8005524:	20000e34 	.word	0x20000e34

08005528 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b08a      	sub	sp, #40	; 0x28
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005534:	f7fe fd9c 	bl	8004070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005538:	4b5b      	ldr	r3, [pc, #364]	; (80056a8 <pvPortMalloc+0x180>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005540:	f000 f920 	bl	8005784 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005544:	4b59      	ldr	r3, [pc, #356]	; (80056ac <pvPortMalloc+0x184>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	f040 8093 	bne.w	8005678 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01d      	beq.n	8005594 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005558:	2208      	movs	r2, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4413      	add	r3, r2
 800555e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f003 0307 	and.w	r3, r3, #7
 8005566:	2b00      	cmp	r3, #0
 8005568:	d014      	beq.n	8005594 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	f023 0307 	bic.w	r3, r3, #7
 8005570:	3308      	adds	r3, #8
 8005572:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <pvPortMalloc+0x6c>
	__asm volatile
 800557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005582:	f383 8811 	msr	BASEPRI, r3
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	f3bf 8f4f 	dsb	sy
 800558e:	617b      	str	r3, [r7, #20]
}
 8005590:	bf00      	nop
 8005592:	e7fe      	b.n	8005592 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d06e      	beq.n	8005678 <pvPortMalloc+0x150>
 800559a:	4b45      	ldr	r3, [pc, #276]	; (80056b0 <pvPortMalloc+0x188>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d869      	bhi.n	8005678 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055a4:	4b43      	ldr	r3, [pc, #268]	; (80056b4 <pvPortMalloc+0x18c>)
 80055a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055a8:	4b42      	ldr	r3, [pc, #264]	; (80056b4 <pvPortMalloc+0x18c>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055ae:	e004      	b.n	80055ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d903      	bls.n	80055cc <pvPortMalloc+0xa4>
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1f1      	bne.n	80055b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055cc:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <pvPortMalloc+0x180>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d050      	beq.n	8005678 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2208      	movs	r2, #8
 80055dc:	4413      	add	r3, r2
 80055de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	1ad2      	subs	r2, r2, r3
 80055f0:	2308      	movs	r3, #8
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d91f      	bls.n	8005638 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	4413      	add	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f003 0307 	and.w	r3, r3, #7
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <pvPortMalloc+0xf8>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	613b      	str	r3, [r7, #16]
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	1ad2      	subs	r2, r2, r3
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005632:	69b8      	ldr	r0, [r7, #24]
 8005634:	f000 f908 	bl	8005848 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005638:	4b1d      	ldr	r3, [pc, #116]	; (80056b0 <pvPortMalloc+0x188>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	4a1b      	ldr	r2, [pc, #108]	; (80056b0 <pvPortMalloc+0x188>)
 8005644:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005646:	4b1a      	ldr	r3, [pc, #104]	; (80056b0 <pvPortMalloc+0x188>)
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	4b1b      	ldr	r3, [pc, #108]	; (80056b8 <pvPortMalloc+0x190>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d203      	bcs.n	800565a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005652:	4b17      	ldr	r3, [pc, #92]	; (80056b0 <pvPortMalloc+0x188>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a18      	ldr	r2, [pc, #96]	; (80056b8 <pvPortMalloc+0x190>)
 8005658:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	4b13      	ldr	r3, [pc, #76]	; (80056ac <pvPortMalloc+0x184>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	431a      	orrs	r2, r3
 8005664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005666:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800566e:	4b13      	ldr	r3, [pc, #76]	; (80056bc <pvPortMalloc+0x194>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	3301      	adds	r3, #1
 8005674:	4a11      	ldr	r2, [pc, #68]	; (80056bc <pvPortMalloc+0x194>)
 8005676:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005678:	f7fe fd08 	bl	800408c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00a      	beq.n	800569c <pvPortMalloc+0x174>
	__asm volatile
 8005686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	60fb      	str	r3, [r7, #12]
}
 8005698:	bf00      	nop
 800569a:	e7fe      	b.n	800569a <pvPortMalloc+0x172>
	return pvReturn;
 800569c:	69fb      	ldr	r3, [r7, #28]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3728      	adds	r7, #40	; 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20004a40 	.word	0x20004a40
 80056ac:	20004a54 	.word	0x20004a54
 80056b0:	20004a44 	.word	0x20004a44
 80056b4:	20004a38 	.word	0x20004a38
 80056b8:	20004a48 	.word	0x20004a48
 80056bc:	20004a4c 	.word	0x20004a4c

080056c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d04d      	beq.n	800576e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056d2:	2308      	movs	r3, #8
 80056d4:	425b      	negs	r3, r3
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4413      	add	r3, r2
 80056da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	685a      	ldr	r2, [r3, #4]
 80056e4:	4b24      	ldr	r3, [pc, #144]	; (8005778 <vPortFree+0xb8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4013      	ands	r3, r2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <vPortFree+0x44>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60fb      	str	r3, [r7, #12]
}
 8005700:	bf00      	nop
 8005702:	e7fe      	b.n	8005702 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <vPortFree+0x62>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	60bb      	str	r3, [r7, #8]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	4b14      	ldr	r3, [pc, #80]	; (8005778 <vPortFree+0xb8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4013      	ands	r3, r2
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01e      	beq.n	800576e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d11a      	bne.n	800576e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	4b0e      	ldr	r3, [pc, #56]	; (8005778 <vPortFree+0xb8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	43db      	mvns	r3, r3
 8005742:	401a      	ands	r2, r3
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005748:	f7fe fc92 	bl	8004070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	4b0a      	ldr	r3, [pc, #40]	; (800577c <vPortFree+0xbc>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4413      	add	r3, r2
 8005756:	4a09      	ldr	r2, [pc, #36]	; (800577c <vPortFree+0xbc>)
 8005758:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800575a:	6938      	ldr	r0, [r7, #16]
 800575c:	f000 f874 	bl	8005848 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005760:	4b07      	ldr	r3, [pc, #28]	; (8005780 <vPortFree+0xc0>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	3301      	adds	r3, #1
 8005766:	4a06      	ldr	r2, [pc, #24]	; (8005780 <vPortFree+0xc0>)
 8005768:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800576a:	f7fe fc8f 	bl	800408c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800576e:	bf00      	nop
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20004a54 	.word	0x20004a54
 800577c:	20004a44 	.word	0x20004a44
 8005780:	20004a50 	.word	0x20004a50

08005784 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800578a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800578e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005790:	4b27      	ldr	r3, [pc, #156]	; (8005830 <prvHeapInit+0xac>)
 8005792:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00c      	beq.n	80057b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3307      	adds	r3, #7
 80057a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0307 	bic.w	r3, r3, #7
 80057aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	4a1f      	ldr	r2, [pc, #124]	; (8005830 <prvHeapInit+0xac>)
 80057b4:	4413      	add	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057bc:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <prvHeapInit+0xb0>)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057c2:	4b1c      	ldr	r3, [pc, #112]	; (8005834 <prvHeapInit+0xb0>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4413      	add	r3, r2
 80057ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057d0:	2208      	movs	r2, #8
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0307 	bic.w	r3, r3, #7
 80057de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	4a15      	ldr	r2, [pc, #84]	; (8005838 <prvHeapInit+0xb4>)
 80057e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057e6:	4b14      	ldr	r3, [pc, #80]	; (8005838 <prvHeapInit+0xb4>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2200      	movs	r2, #0
 80057ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057ee:	4b12      	ldr	r3, [pc, #72]	; (8005838 <prvHeapInit+0xb4>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	1ad2      	subs	r2, r2, r3
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005804:	4b0c      	ldr	r3, [pc, #48]	; (8005838 <prvHeapInit+0xb4>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	4a0a      	ldr	r2, [pc, #40]	; (800583c <prvHeapInit+0xb8>)
 8005812:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4a09      	ldr	r2, [pc, #36]	; (8005840 <prvHeapInit+0xbc>)
 800581a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800581c:	4b09      	ldr	r3, [pc, #36]	; (8005844 <prvHeapInit+0xc0>)
 800581e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005822:	601a      	str	r2, [r3, #0]
}
 8005824:	bf00      	nop
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	20000e38 	.word	0x20000e38
 8005834:	20004a38 	.word	0x20004a38
 8005838:	20004a40 	.word	0x20004a40
 800583c:	20004a48 	.word	0x20004a48
 8005840:	20004a44 	.word	0x20004a44
 8005844:	20004a54 	.word	0x20004a54

08005848 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005850:	4b28      	ldr	r3, [pc, #160]	; (80058f4 <prvInsertBlockIntoFreeList+0xac>)
 8005852:	60fb      	str	r3, [r7, #12]
 8005854:	e002      	b.n	800585c <prvInsertBlockIntoFreeList+0x14>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d8f7      	bhi.n	8005856 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	4413      	add	r3, r2
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	d108      	bne.n	800588a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	441a      	add	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	68ba      	ldr	r2, [r7, #8]
 8005894:	441a      	add	r2, r3
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d118      	bne.n	80058d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b15      	ldr	r3, [pc, #84]	; (80058f8 <prvInsertBlockIntoFreeList+0xb0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d00d      	beq.n	80058c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	441a      	add	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	601a      	str	r2, [r3, #0]
 80058c4:	e008      	b.n	80058d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058c6:	4b0c      	ldr	r3, [pc, #48]	; (80058f8 <prvInsertBlockIntoFreeList+0xb0>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	e003      	b.n	80058d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d002      	beq.n	80058e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20004a38 	.word	0x20004a38
 80058f8:	20004a40 	.word	0x20004a40

080058fc <__libc_init_array>:
 80058fc:	b570      	push	{r4, r5, r6, lr}
 80058fe:	4d0d      	ldr	r5, [pc, #52]	; (8005934 <__libc_init_array+0x38>)
 8005900:	4c0d      	ldr	r4, [pc, #52]	; (8005938 <__libc_init_array+0x3c>)
 8005902:	1b64      	subs	r4, r4, r5
 8005904:	10a4      	asrs	r4, r4, #2
 8005906:	2600      	movs	r6, #0
 8005908:	42a6      	cmp	r6, r4
 800590a:	d109      	bne.n	8005920 <__libc_init_array+0x24>
 800590c:	4d0b      	ldr	r5, [pc, #44]	; (800593c <__libc_init_array+0x40>)
 800590e:	4c0c      	ldr	r4, [pc, #48]	; (8005940 <__libc_init_array+0x44>)
 8005910:	f000 f82e 	bl	8005970 <_init>
 8005914:	1b64      	subs	r4, r4, r5
 8005916:	10a4      	asrs	r4, r4, #2
 8005918:	2600      	movs	r6, #0
 800591a:	42a6      	cmp	r6, r4
 800591c:	d105      	bne.n	800592a <__libc_init_array+0x2e>
 800591e:	bd70      	pop	{r4, r5, r6, pc}
 8005920:	f855 3b04 	ldr.w	r3, [r5], #4
 8005924:	4798      	blx	r3
 8005926:	3601      	adds	r6, #1
 8005928:	e7ee      	b.n	8005908 <__libc_init_array+0xc>
 800592a:	f855 3b04 	ldr.w	r3, [r5], #4
 800592e:	4798      	blx	r3
 8005930:	3601      	adds	r6, #1
 8005932:	e7f2      	b.n	800591a <__libc_init_array+0x1e>
 8005934:	080059f0 	.word	0x080059f0
 8005938:	080059f0 	.word	0x080059f0
 800593c:	080059f0 	.word	0x080059f0
 8005940:	080059f4 	.word	0x080059f4

08005944 <memcpy>:
 8005944:	440a      	add	r2, r1
 8005946:	4291      	cmp	r1, r2
 8005948:	f100 33ff 	add.w	r3, r0, #4294967295
 800594c:	d100      	bne.n	8005950 <memcpy+0xc>
 800594e:	4770      	bx	lr
 8005950:	b510      	push	{r4, lr}
 8005952:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800595a:	4291      	cmp	r1, r2
 800595c:	d1f9      	bne.n	8005952 <memcpy+0xe>
 800595e:	bd10      	pop	{r4, pc}

08005960 <memset>:
 8005960:	4402      	add	r2, r0
 8005962:	4603      	mov	r3, r0
 8005964:	4293      	cmp	r3, r2
 8005966:	d100      	bne.n	800596a <memset+0xa>
 8005968:	4770      	bx	lr
 800596a:	f803 1b01 	strb.w	r1, [r3], #1
 800596e:	e7f9      	b.n	8005964 <memset+0x4>

08005970 <_init>:
 8005970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005972:	bf00      	nop
 8005974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005976:	bc08      	pop	{r3}
 8005978:	469e      	mov	lr, r3
 800597a:	4770      	bx	lr

0800597c <_fini>:
 800597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597e:	bf00      	nop
 8005980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005982:	bc08      	pop	{r3}
 8005984:	469e      	mov	lr, r3
 8005986:	4770      	bx	lr
