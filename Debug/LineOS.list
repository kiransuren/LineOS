
LineOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005ea8  08005ea8  00015ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f64  08005f64  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005f64  08005f64  00015f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f6c  08005f6c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f6c  08005f6c  00015f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f70  08005f70  00015f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a94  20000010  08005f84  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aa4  08005f84  00024aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001778a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe2  00000000  00000000  000377ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  0003a7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012c8  00000000  00000000  0003bb80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002da3  00000000  00000000  0003ce48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cfd  00000000  00000000  0003fbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096c36  00000000  00000000  000548e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb51e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053dc  00000000  00000000  000eb570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005e90 	.word	0x08005e90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	08005e90 	.word	0x08005e90

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fd00 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f846 	bl	800057c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f9c2 	bl	8000878 <MX_GPIO_Init>
  MX_TIM1_Init();
 80004f4:	f000 f8ae 	bl	8000654 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80004f8:	f000 f994 	bl	8000824 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004fc:	f000 f92e 	bl	800075c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Start timer for grabber servo
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000500:	2100      	movs	r1, #0
 8000502:	4816      	ldr	r0, [pc, #88]	; (800055c <main+0x78>)
 8000504:	f001 fd8a 	bl	800201c <HAL_TIM_PWM_Start>
  htim1.Instance->CCR1 = 50; // initialize pulse width to 1ms = 0 degree positon
 8000508:	4b14      	ldr	r3, [pc, #80]	; (800055c <main+0x78>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2232      	movs	r2, #50	; 0x32
 800050e:	635a      	str	r2, [r3, #52]	; 0x34

  // Start timer for motor driver (left and right motors)
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000510:	2100      	movs	r1, #0
 8000512:	4813      	ldr	r0, [pc, #76]	; (8000560 <main+0x7c>)
 8000514:	f001 fd82 	bl	800201c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000518:	2104      	movs	r1, #4
 800051a:	4811      	ldr	r0, [pc, #68]	; (8000560 <main+0x7c>)
 800051c:	f001 fd7e 	bl	800201c <HAL_TIM_PWM_Start>
  htim3.Instance->CCR1 = 0; // initialize duty cycle to 0% - Motor off
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <main+0x7c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2200      	movs	r2, #0
 8000526:	635a      	str	r2, [r3, #52]	; 0x34
  htim3.Instance->CCR2 = 0; // initialize duty cycle to 0% - Motor off
 8000528:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <main+0x7c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	639a      	str	r2, [r3, #56]	; 0x38

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000530:	f002 ff22 	bl	8003378 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of heartbeatTsk */
  heartbeatTskHandle = osThreadNew(hearbeatTaskFunc, NULL, &heartbeatTsk_attributes);
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <main+0x80>)
 8000536:	2100      	movs	r1, #0
 8000538:	480b      	ldr	r0, [pc, #44]	; (8000568 <main+0x84>)
 800053a:	f002 ff67 	bl	800340c <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0a      	ldr	r2, [pc, #40]	; (800056c <main+0x88>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of grabberMotorTsk */
  grabberMotorTskHandle = osThreadNew(grabberMotorTaskFunc, NULL, &grabberMotorTsk_attributes);
 8000544:	4a0a      	ldr	r2, [pc, #40]	; (8000570 <main+0x8c>)
 8000546:	2100      	movs	r1, #0
 8000548:	480a      	ldr	r0, [pc, #40]	; (8000574 <main+0x90>)
 800054a:	f002 ff5f 	bl	800340c <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a09      	ldr	r2, [pc, #36]	; (8000578 <main+0x94>)
 8000552:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000554:	f002 ff34 	bl	80033c0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000558:	e7fe      	b.n	8000558 <main+0x74>
 800055a:	bf00      	nop
 800055c:	2000002c 	.word	0x2000002c
 8000560:	20000074 	.word	0x20000074
 8000564:	08005f04 	.word	0x08005f04
 8000568:	08000a49 	.word	0x08000a49
 800056c:	20000100 	.word	0x20000100
 8000570:	08005f28 	.word	0x08005f28
 8000574:	08000aad 	.word	0x08000aad
 8000578:	20000104 	.word	0x20000104

0800057c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b094      	sub	sp, #80	; 0x50
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0320 	add.w	r3, r7, #32
 8000586:	2230      	movs	r2, #48	; 0x30
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fc78 	bl	8005e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	f107 030c 	add.w	r3, r7, #12
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	605a      	str	r2, [r3, #4]
 800059a:	609a      	str	r2, [r3, #8]
 800059c:	60da      	str	r2, [r3, #12]
 800059e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a0:	2300      	movs	r3, #0
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	4b29      	ldr	r3, [pc, #164]	; (800064c <SystemClock_Config+0xd0>)
 80005a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a8:	4a28      	ldr	r2, [pc, #160]	; (800064c <SystemClock_Config+0xd0>)
 80005aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ae:	6413      	str	r3, [r2, #64]	; 0x40
 80005b0:	4b26      	ldr	r3, [pc, #152]	; (800064c <SystemClock_Config+0xd0>)
 80005b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005bc:	2300      	movs	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <SystemClock_Config+0xd4>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd4>)
 80005ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f0:	2308      	movs	r3, #8
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005f4:	2354      	movs	r3, #84	; 0x54
 80005f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fc:	2307      	movs	r3, #7
 80005fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f000 ff33 	bl	8001470 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000610:	f000 fa73 	bl	8000afa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8000620:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000626:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800062a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f001 f994 	bl	8001960 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063e:	f000 fa5c 	bl	8000afa <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b092      	sub	sp, #72	; 0x48
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800065a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
 8000674:	615a      	str	r2, [r3, #20]
 8000676:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2220      	movs	r2, #32
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f005 fbfe 	bl	8005e80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000684:	4b33      	ldr	r3, [pc, #204]	; (8000754 <MX_TIM1_Init+0x100>)
 8000686:	4a34      	ldr	r2, [pc, #208]	; (8000758 <MX_TIM1_Init+0x104>)
 8000688:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 210-1;
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <MX_TIM1_Init+0x100>)
 800068c:	22d1      	movs	r2, #209	; 0xd1
 800068e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000690:	4b30      	ldr	r3, [pc, #192]	; (8000754 <MX_TIM1_Init+0x100>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <MX_TIM1_Init+0x100>)
 8000698:	f240 32e7 	movw	r2, #999	; 0x3e7
 800069c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069e:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <MX_TIM1_Init+0x100>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <MX_TIM1_Init+0x100>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006aa:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_TIM1_Init+0x100>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006b0:	4828      	ldr	r0, [pc, #160]	; (8000754 <MX_TIM1_Init+0x100>)
 80006b2:	f001 fc63 	bl	8001f7c <HAL_TIM_PWM_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006bc:	f000 fa1d 	bl	8000afa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006cc:	4619      	mov	r1, r3
 80006ce:	4821      	ldr	r0, [pc, #132]	; (8000754 <MX_TIM1_Init+0x100>)
 80006d0:	f002 f978 	bl	80029c4 <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80006da:	f000 fa0e 	bl	8000afa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006de:	2360      	movs	r3, #96	; 0x60
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006e6:	2300      	movs	r3, #0
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006ea:	2300      	movs	r3, #0
 80006ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006f2:	2300      	movs	r3, #0
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	4619      	mov	r1, r3
 8000702:	4814      	ldr	r0, [pc, #80]	; (8000754 <MX_TIM1_Init+0x100>)
 8000704:	f001 fe42 	bl	800238c <HAL_TIM_PWM_ConfigChannel>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800070e:	f000 f9f4 	bl	8000afa <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	4807      	ldr	r0, [pc, #28]	; (8000754 <MX_TIM1_Init+0x100>)
 8000736:	f002 f9b3 	bl	8002aa0 <HAL_TIMEx_ConfigBreakDeadTime>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000740:	f000 f9db 	bl	8000afa <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000744:	4803      	ldr	r0, [pc, #12]	; (8000754 <MX_TIM1_Init+0x100>)
 8000746:	f000 fa47 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 800074a:	bf00      	nop
 800074c:	3748      	adds	r7, #72	; 0x48
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000002c 	.word	0x2000002c
 8000758:	40010000 	.word	0x40010000

0800075c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08a      	sub	sp, #40	; 0x28
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800077e:	4b27      	ldr	r3, [pc, #156]	; (800081c <MX_TIM3_Init+0xc0>)
 8000780:	4a27      	ldr	r2, [pc, #156]	; (8000820 <MX_TIM3_Init+0xc4>)
 8000782:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21-1;
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_TIM3_Init+0xc0>)
 8000786:	2214      	movs	r2, #20
 8000788:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b24      	ldr	r3, [pc, #144]	; (800081c <MX_TIM3_Init+0xc0>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 250-1;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_TIM3_Init+0xc0>)
 8000792:	22f9      	movs	r2, #249	; 0xf9
 8000794:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000796:	4b21      	ldr	r3, [pc, #132]	; (800081c <MX_TIM3_Init+0xc0>)
 8000798:	2200      	movs	r2, #0
 800079a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_TIM3_Init+0xc0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007a2:	481e      	ldr	r0, [pc, #120]	; (800081c <MX_TIM3_Init+0xc0>)
 80007a4:	f001 fbea 	bl	8001f7c <HAL_TIM_PWM_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80007ae:	f000 f9a4 	bl	8000afa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	4619      	mov	r1, r3
 80007c0:	4816      	ldr	r0, [pc, #88]	; (800081c <MX_TIM3_Init+0xc0>)
 80007c2:	f002 f8ff 	bl	80029c4 <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80007cc:	f000 f995 	bl	8000afa <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007d0:	2360      	movs	r3, #96	; 0x60
 80007d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	480d      	ldr	r0, [pc, #52]	; (800081c <MX_TIM3_Init+0xc0>)
 80007e8:	f001 fdd0 	bl	800238c <HAL_TIM_PWM_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80007f2:	f000 f982 	bl	8000afa <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007f6:	1d3b      	adds	r3, r7, #4
 80007f8:	2204      	movs	r2, #4
 80007fa:	4619      	mov	r1, r3
 80007fc:	4807      	ldr	r0, [pc, #28]	; (800081c <MX_TIM3_Init+0xc0>)
 80007fe:	f001 fdc5 	bl	800238c <HAL_TIM_PWM_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000808:	f000 f977 	bl	8000afa <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800080c:	4803      	ldr	r0, [pc, #12]	; (800081c <MX_TIM3_Init+0xc0>)
 800080e:	f000 f9e3 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 8000812:	bf00      	nop
 8000814:	3728      	adds	r7, #40	; 0x28
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000074 	.word	0x20000074
 8000820:	40000400 	.word	0x40000400

08000824 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <MX_USART2_UART_Init+0x50>)
 800082c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000834:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000848:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800084a:	220c      	movs	r2, #12
 800084c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084e:	4b08      	ldr	r3, [pc, #32]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_USART2_UART_Init+0x4c>)
 800085c:	f002 f986 	bl	8002b6c <HAL_UART_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000866:	f000 f948 	bl	8000afa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000bc 	.word	0x200000bc
 8000874:	40004400 	.word	0x40004400

08000878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b08a      	sub	sp, #40	; 0x28
 800087c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]
 8000888:	609a      	str	r2, [r3, #8]
 800088a:	60da      	str	r2, [r3, #12]
 800088c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	613b      	str	r3, [r7, #16]
 8000892:	4b40      	ldr	r3, [pc, #256]	; (8000994 <MX_GPIO_Init+0x11c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <MX_GPIO_Init+0x11c>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b3d      	ldr	r3, [pc, #244]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	4b39      	ldr	r3, [pc, #228]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a38      	ldr	r2, [pc, #224]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b36      	ldr	r3, [pc, #216]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b32      	ldr	r3, [pc, #200]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a31      	ldr	r2, [pc, #196]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	4b2b      	ldr	r3, [pc, #172]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a2a      	ldr	r2, [pc, #168]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b28      	ldr	r3, [pc, #160]	; (8000994 <MX_GPIO_Init+0x11c>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Output_4_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000904:	4824      	ldr	r0, [pc, #144]	; (8000998 <MX_GPIO_Init+0x120>)
 8000906:	f000 fd99 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Output_1_Pin|Output_2_Pin|Output_3_Pin, GPIO_PIN_RESET);
 800090a:	2200      	movs	r2, #0
 800090c:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8000910:	4822      	ldr	r0, [pc, #136]	; (800099c <MX_GPIO_Init+0x124>)
 8000912:	f000 fd93 	bl	800143c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800091c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	481c      	ldr	r0, [pc, #112]	; (80009a0 <MX_GPIO_Init+0x128>)
 800092e:	f000 fc01 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000936:	2301      	movs	r3, #1
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4813      	ldr	r0, [pc, #76]	; (8000998 <MX_GPIO_Init+0x120>)
 800094a:	f000 fbf3 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pins : Output_1_Pin Output_2_Pin Output_3_Pin */
  GPIO_InitStruct.Pin = Output_1_Pin|Output_2_Pin|Output_3_Pin;
 800094e:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800095c:	2301      	movs	r3, #1
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	480d      	ldr	r0, [pc, #52]	; (800099c <MX_GPIO_Init+0x124>)
 8000968:	f000 fbe4 	bl	8001134 <HAL_GPIO_Init>

  /*Configure GPIO pin : Output_4_Pin */
  GPIO_InitStruct.Pin = Output_4_Pin;
 800096c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Output_4_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_GPIO_Init+0x120>)
 8000986:	f000 fbd5 	bl	8001134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020400 	.word	0x40020400
 80009a0:	40020800 	.word	0x40020800

080009a4 <setMotorDirection>:
    FORWARD,
    BACKWARD
} motor_direction_t;

void setMotorDirection(motor_direction_t direction)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]
	// Resetting all
	HAL_GPIO_WritePin(GPIOB, Output_1_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b4:	4820      	ldr	r0, [pc, #128]	; (8000a38 <setMotorDirection+0x94>)
 80009b6:	f000 fd41 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Output_2_Pin, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	2110      	movs	r1, #16
 80009be:	481e      	ldr	r0, [pc, #120]	; (8000a38 <setMotorDirection+0x94>)
 80009c0:	f000 fd3c 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, Output_3_Pin, GPIO_PIN_RESET);
 80009c4:	2200      	movs	r2, #0
 80009c6:	2120      	movs	r1, #32
 80009c8:	481b      	ldr	r0, [pc, #108]	; (8000a38 <setMotorDirection+0x94>)
 80009ca:	f000 fd37 	bl	800143c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Output_4_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009d4:	4819      	ldr	r0, [pc, #100]	; (8000a3c <setMotorDirection+0x98>)
 80009d6:	f000 fd31 	bl	800143c <HAL_GPIO_WritePin>
	uint8_t broken_message[] = "FIX MOTORS\r\n"; // message to send
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <setMotorDirection+0x9c>)
 80009dc:	f107 0408 	add.w	r4, r7, #8
 80009e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009e2:	c407      	stmia	r4!, {r0, r1, r2}
 80009e4:	7023      	strb	r3, [r4, #0]
	if (direction == FORWARD)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d10b      	bne.n	8000a04 <setMotorDirection+0x60>
	{
		//Setting motor 1 to forward
		//HAL_GPIO_WritePin(GPIOB, Output_2_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOB, Output_2_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	2110      	movs	r1, #16
 80009f0:	4811      	ldr	r0, [pc, #68]	; (8000a38 <setMotorDirection+0x94>)
 80009f2:	f000 fd23 	bl	800143c <HAL_GPIO_WritePin>

		//Setting motor 2 to forward
		//HAL_GPIO_WritePin(GPIOB, Output_4_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, Output_4_Pin, GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <setMotorDirection+0x98>)
 80009fe:	f000 fd1d 	bl	800143c <HAL_GPIO_WritePin>
	}
	else
	{
		HAL_UART_Transmit(&huart2,broken_message,sizeof(broken_message),10);
	}
}
 8000a02:	e015      	b.n	8000a30 <setMotorDirection+0x8c>
	else if (direction == BACKWARD)
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d10b      	bne.n	8000a22 <setMotorDirection+0x7e>
		HAL_GPIO_WritePin(GPIOB, Output_1_Pin, GPIO_PIN_SET);
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a10:	4809      	ldr	r0, [pc, #36]	; (8000a38 <setMotorDirection+0x94>)
 8000a12:	f000 fd13 	bl	800143c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, Output_3_Pin, GPIO_PIN_SET);
 8000a16:	2201      	movs	r2, #1
 8000a18:	2120      	movs	r1, #32
 8000a1a:	4807      	ldr	r0, [pc, #28]	; (8000a38 <setMotorDirection+0x94>)
 8000a1c:	f000 fd0e 	bl	800143c <HAL_GPIO_WritePin>
}
 8000a20:	e006      	b.n	8000a30 <setMotorDirection+0x8c>
		HAL_UART_Transmit(&huart2,broken_message,sizeof(broken_message),10);
 8000a22:	f107 0108 	add.w	r1, r7, #8
 8000a26:	230a      	movs	r3, #10
 8000a28:	220d      	movs	r2, #13
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <setMotorDirection+0xa0>)
 8000a2c:	f002 f8eb 	bl	8002c06 <HAL_UART_Transmit>
}
 8000a30:	bf00      	nop
 8000a32:	371c      	adds	r7, #28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd90      	pop	{r4, r7, pc}
 8000a38:	40020400 	.word	0x40020400
 8000a3c:	40020000 	.word	0x40020000
 8000a40:	08005ec8 	.word	0x08005ec8
 8000a44:	200000bc 	.word	0x200000bc

08000a48 <hearbeatTaskFunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_hearbeatTaskFunc */
void hearbeatTaskFunc(void *argument)
{
 8000a48:	b5b0      	push	{r4, r5, r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint8_t heartbeat_message[] = "Hello World !!!\r\n"; // message to send
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <hearbeatTaskFunc+0x5c>)
 8000a52:	f107 0408 	add.w	r4, r7, #8
 8000a56:	461d      	mov	r5, r3
 8000a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	8023      	strh	r3, [r4, #0]
  int i = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  /* Infinite loop */
  for(;;)
  {
	 //HAL_UART_Transmit(&huart2,heartbeat_message,sizeof(heartbeat_message),10);// Sending in normal mode

	setMotorDirection(FORWARD);
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff ff9d 	bl	80009a4 <setMotorDirection>
	htim3.Instance->CCR1 = 125;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <hearbeatTaskFunc+0x60>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	227d      	movs	r2, #125	; 0x7d
 8000a70:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 125;
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <hearbeatTaskFunc+0x60>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	227d      	movs	r2, #125	; 0x7d
 8000a78:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(2000);
 8000a7a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a7e:	f002 fd57 	bl	8003530 <osDelay>
	setMotorDirection(BACKWARD);
 8000a82:	2001      	movs	r0, #1
 8000a84:	f7ff ff8e 	bl	80009a4 <setMotorDirection>
	htim3.Instance->CCR1 = 125;
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <hearbeatTaskFunc+0x60>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	227d      	movs	r2, #125	; 0x7d
 8000a8e:	635a      	str	r2, [r3, #52]	; 0x34
	htim3.Instance->CCR2 = 125;
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <hearbeatTaskFunc+0x60>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	227d      	movs	r2, #125	; 0x7d
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
	osDelay(2000);
 8000a98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a9c:	f002 fd48 	bl	8003530 <osDelay>
	setMotorDirection(FORWARD);
 8000aa0:	e7e0      	b.n	8000a64 <hearbeatTaskFunc+0x1c>
 8000aa2:	bf00      	nop
 8000aa4:	08005ed8 	.word	0x08005ed8
 8000aa8:	20000074 	.word	0x20000074

08000aac <grabberMotorTaskFunc>:
*/


/* USER CODE END Header_grabberMotorTaskFunc */
void grabberMotorTaskFunc(void *argument)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN grabberMotorTaskFunc */
  /* This task moves the grabber servo motor from 0degrees to 180degrees then resets to 0degrees and repeats*/
  // 50 -> 100 : 0deg to 180deg linearly
  int i = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	if (i==100) {
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b64      	cmp	r3, #100	; 0x64
 8000abc:	d101      	bne.n	8000ac2 <grabberMotorTaskFunc+0x16>
		i=0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
	}
	htim1.Instance->CCR1 = i;
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <grabberMotorTaskFunc+0x2c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34
	i+=10;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	330a      	adds	r3, #10
 8000ace:	60fb      	str	r3, [r7, #12]
	osDelay(10);
 8000ad0:	200a      	movs	r0, #10
 8000ad2:	f002 fd2d 	bl	8003530 <osDelay>
	if (i==100) {
 8000ad6:	e7ef      	b.n	8000ab8 <grabberMotorTaskFunc+0xc>
 8000ad8:	2000002c 	.word	0x2000002c

08000adc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aec:	d101      	bne.n	8000af2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000aee:	f000 fa1f 	bl	8000f30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afe:	b672      	cpsid	i
}
 8000b00:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b02:	e7fe      	b.n	8000b02 <Error_Handler+0x8>

08000b04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <HAL_MspInit+0x54>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	4a11      	ldr	r2, [pc, #68]	; (8000b58 <HAL_MspInit+0x54>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6453      	str	r3, [r2, #68]	; 0x44
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_MspInit+0x54>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	603b      	str	r3, [r7, #0]
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <HAL_MspInit+0x54>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <HAL_MspInit+0x54>)
 8000b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b34:	6413      	str	r3, [r2, #64]	; 0x40
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <HAL_MspInit+0x54>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3e:	603b      	str	r3, [r7, #0]
 8000b40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	210f      	movs	r1, #15
 8000b46:	f06f 0001 	mvn.w	r0, #1
 8000b4a:	f000 fac9 	bl	80010e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a18      	ldr	r2, [pc, #96]	; (8000bcc <HAL_TIM_PWM_MspInit+0x70>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d116      	bne.n	8000b9c <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x74>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x74>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x74>)
 8000b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	201a      	movs	r0, #26
 8000b90:	f000 faa6 	bl	80010e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b94:	201a      	movs	r0, #26
 8000b96:	f000 fabf 	bl	8001118 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b9a:	e012      	b.n	8000bc2 <HAL_TIM_PWM_MspInit+0x66>
  else if(htim_pwm->Instance==TIM3)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <HAL_TIM_PWM_MspInit+0x78>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d10d      	bne.n	8000bc2 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x74>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a08      	ldr	r2, [pc, #32]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x74>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_TIM_PWM_MspInit+0x74>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
}
 8000bc2:	bf00      	nop
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40010000 	.word	0x40010000
 8000bd0:	40023800 	.word	0x40023800
 8000bd4:	40000400 	.word	0x40000400

08000bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a24      	ldr	r2, [pc, #144]	; (8000c88 <HAL_TIM_MspPostInit+0xb0>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d11f      	bne.n	8000c3a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	613b      	str	r3, [r7, #16]
 8000bfe:	4b23      	ldr	r3, [pc, #140]	; (8000c8c <HAL_TIM_MspPostInit+0xb4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a22      	ldr	r2, [pc, #136]	; (8000c8c <HAL_TIM_MspPostInit+0xb4>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b20      	ldr	r3, [pc, #128]	; (8000c8c <HAL_TIM_MspPostInit+0xb4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4817      	ldr	r0, [pc, #92]	; (8000c90 <HAL_TIM_MspPostInit+0xb8>)
 8000c34:	f000 fa7e 	bl	8001134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c38:	e022      	b.n	8000c80 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <HAL_TIM_MspPostInit+0xbc>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d11d      	bne.n	8000c80 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c44:	2300      	movs	r3, #0
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_TIM_MspPostInit+0xb4>)
 8000c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4c:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <HAL_TIM_MspPostInit+0xb4>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6313      	str	r3, [r2, #48]	; 0x30
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_TIM_MspPostInit+0xb4>)
 8000c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c60:	23c0      	movs	r3, #192	; 0xc0
 8000c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c64:	2302      	movs	r3, #2
 8000c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c70:	2302      	movs	r3, #2
 8000c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_TIM_MspPostInit+0xb8>)
 8000c7c:	f000 fa5a 	bl	8001134 <HAL_GPIO_Init>
}
 8000c80:	bf00      	nop
 8000c82:	3728      	adds	r7, #40	; 0x28
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40010000 	.word	0x40010000
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40000400 	.word	0x40000400

08000c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_UART_MspInit+0x84>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d12b      	bne.n	8000d12 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a17      	ldr	r2, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd2:	613b      	str	r3, [r7, #16]
 8000cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0x88>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf2:	230c      	movs	r3, #12
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d02:	2307      	movs	r3, #7
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x8c>)
 8000d0e:	f000 fa11 	bl	8001134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3728      	adds	r7, #40	; 0x28
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40023800 	.word	0x40023800
 8000d24:	40020000 	.word	0x40020000

08000d28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d30:	2300      	movs	r3, #0
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000d38:	2300      	movs	r3, #0
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	4b34      	ldr	r3, [pc, #208]	; (8000e10 <HAL_InitTick+0xe8>)
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <HAL_InitTick+0xe8>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	6413      	str	r3, [r2, #64]	; 0x40
 8000d48:	4b31      	ldr	r3, [pc, #196]	; (8000e10 <HAL_InitTick+0xe8>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f003 0301 	and.w	r3, r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d54:	f107 0210 	add.w	r2, r7, #16
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 f81e 	bl	8001da0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d64:	6a3b      	ldr	r3, [r7, #32]
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d103      	bne.n	8000d76 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d6e:	f000 ffef 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8000d72:	6378      	str	r0, [r7, #52]	; 0x34
 8000d74:	e004      	b.n	8000d80 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d76:	f000 ffeb 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d82:	4a24      	ldr	r2, [pc, #144]	; (8000e14 <HAL_InitTick+0xec>)
 8000d84:	fba2 2303 	umull	r2, r3, r2, r3
 8000d88:	0c9b      	lsrs	r3, r3, #18
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <HAL_InitTick+0xf0>)
 8000d90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d94:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <HAL_InitTick+0xf0>)
 8000d98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d9c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000d9e:	4a1e      	ldr	r2, [pc, #120]	; (8000e18 <HAL_InitTick+0xf0>)
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000da4:	4b1c      	ldr	r3, [pc, #112]	; (8000e18 <HAL_InitTick+0xf0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <HAL_InitTick+0xf0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <HAL_InitTick+0xf0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000db6:	4818      	ldr	r0, [pc, #96]	; (8000e18 <HAL_InitTick+0xf0>)
 8000db8:	f001 f824 	bl	8001e04 <HAL_TIM_Base_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dc2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d11b      	bne.n	8000e02 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000dca:	4813      	ldr	r0, [pc, #76]	; (8000e18 <HAL_InitTick+0xf0>)
 8000dcc:	f001 f874 	bl	8001eb8 <HAL_TIM_Base_Start_IT>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d111      	bne.n	8000e02 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dde:	201c      	movs	r0, #28
 8000de0:	f000 f99a 	bl	8001118 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b0f      	cmp	r3, #15
 8000de8:	d808      	bhi.n	8000dfc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000dea:	2200      	movs	r2, #0
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	201c      	movs	r0, #28
 8000df0:	f000 f976 	bl	80010e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df4:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <HAL_InitTick+0xf4>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e002      	b.n	8000e02 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e02:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3738      	adds	r7, #56	; 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	431bde83 	.word	0x431bde83
 8000e18:	20000108 	.word	0x20000108
 8000e1c:	20000004 	.word	0x20000004

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e50:	4802      	ldr	r0, [pc, #8]	; (8000e5c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000e52:	f001 f993 	bl	800217c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	2000002c 	.word	0x2000002c

08000e60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e64:	4802      	ldr	r0, [pc, #8]	; (8000e70 <TIM2_IRQHandler+0x10>)
 8000e66:	f001 f989 	bl	800217c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000108 	.word	0x20000108

08000e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e78:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <SystemInit+0x20>)
 8000e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7e:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <SystemInit+0x20>)
 8000e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e9e:	490e      	ldr	r1, [pc, #56]	; (8000ed8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ea0:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea4:	e002      	b.n	8000eac <LoopCopyDataInit>

08000ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eaa:	3304      	adds	r3, #4

08000eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb0:	d3f9      	bcc.n	8000ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eb4:	4c0b      	ldr	r4, [pc, #44]	; (8000ee4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb8:	e001      	b.n	8000ebe <LoopFillZerobss>

08000eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ebc:	3204      	adds	r2, #4

08000ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec0:	d3fb      	bcc.n	8000eba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ec2:	f7ff ffd7 	bl	8000e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f004 ffa9 	bl	8005e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fb0b 	bl	80004e4 <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ed0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000edc:	08005f74 	.word	0x08005f74
  ldr r2, =_sbss
 8000ee0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000ee4:	20004aa4 	.word	0x20004aa4

08000ee8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <ADC_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_Init+0x40>)
 8000ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_Init+0x40>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x40>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 f8d8 	bl	80010ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	200f      	movs	r0, #15
 8000f1c:	f7ff ff04 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fdf0 	bl	8000b04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	20000150 	.word	0x20000150

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000150 	.word	0x20000150

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff4c 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f2:	f7ff ff61 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffb1 	bl	8001064 <NVIC_EncodePriority>
 8001102:	4602      	mov	r2, r0
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff80 	bl	8001010 <__NVIC_SetPriority>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff54 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
 800114e:	e159      	b.n	8001404 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001150:	2201      	movs	r2, #1
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	429a      	cmp	r2, r3
 800116a:	f040 8148 	bne.w	80013fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d005      	beq.n	8001186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001182:	2b02      	cmp	r3, #2
 8001184:	d130      	bne.n	80011e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	2203      	movs	r2, #3
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	fa02 f303 	lsl.w	r3, r2, r3
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011bc:	2201      	movs	r2, #1
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	091b      	lsrs	r3, r3, #4
 80011d2:	f003 0201 	and.w	r2, r3, #1
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d017      	beq.n	8001224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2203      	movs	r2, #3
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d123      	bne.n	8001278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	220f      	movs	r2, #15
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	43db      	mvns	r3, r3
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4013      	ands	r3, r2
 8001252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691a      	ldr	r2, [r3, #16]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	fa02 f303 	lsl.w	r3, r2, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	69b9      	ldr	r1, [r7, #24]
 8001274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	2203      	movs	r2, #3
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0203 	and.w	r2, r3, #3
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	f000 80a2 	beq.w	80013fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b57      	ldr	r3, [pc, #348]	; (800141c <HAL_GPIO_Init+0x2e8>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c2:	4a56      	ldr	r2, [pc, #344]	; (800141c <HAL_GPIO_Init+0x2e8>)
 80012c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ca:	4b54      	ldr	r3, [pc, #336]	; (800141c <HAL_GPIO_Init+0x2e8>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d6:	4a52      	ldr	r2, [pc, #328]	; (8001420 <HAL_GPIO_Init+0x2ec>)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4013      	ands	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a49      	ldr	r2, [pc, #292]	; (8001424 <HAL_GPIO_Init+0x2f0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x202>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a48      	ldr	r2, [pc, #288]	; (8001428 <HAL_GPIO_Init+0x2f4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x1fe>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a47      	ldr	r2, [pc, #284]	; (800142c <HAL_GPIO_Init+0x2f8>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x1fa>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a46      	ldr	r2, [pc, #280]	; (8001430 <HAL_GPIO_Init+0x2fc>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x1f6>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a45      	ldr	r2, [pc, #276]	; (8001434 <HAL_GPIO_Init+0x300>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x1f2>
 8001322:	2304      	movs	r3, #4
 8001324:	e008      	b.n	8001338 <HAL_GPIO_Init+0x204>
 8001326:	2307      	movs	r3, #7
 8001328:	e006      	b.n	8001338 <HAL_GPIO_Init+0x204>
 800132a:	2303      	movs	r3, #3
 800132c:	e004      	b.n	8001338 <HAL_GPIO_Init+0x204>
 800132e:	2302      	movs	r3, #2
 8001330:	e002      	b.n	8001338 <HAL_GPIO_Init+0x204>
 8001332:	2301      	movs	r3, #1
 8001334:	e000      	b.n	8001338 <HAL_GPIO_Init+0x204>
 8001336:	2300      	movs	r3, #0
 8001338:	69fa      	ldr	r2, [r7, #28]
 800133a:	f002 0203 	and.w	r2, r2, #3
 800133e:	0092      	lsls	r2, r2, #2
 8001340:	4093      	lsls	r3, r2
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001348:	4935      	ldr	r1, [pc, #212]	; (8001420 <HAL_GPIO_Init+0x2ec>)
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	089b      	lsrs	r3, r3, #2
 800134e:	3302      	adds	r3, #2
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <HAL_GPIO_Init+0x304>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	43db      	mvns	r3, r3
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	4013      	ands	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800137a:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <HAL_GPIO_Init+0x304>)
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001380:	4b2d      	ldr	r3, [pc, #180]	; (8001438 <HAL_GPIO_Init+0x304>)
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	43db      	mvns	r3, r3
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4013      	ands	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001398:	2b00      	cmp	r3, #0
 800139a:	d003      	beq.n	80013a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013a4:	4a24      	ldr	r2, [pc, #144]	; (8001438 <HAL_GPIO_Init+0x304>)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <HAL_GPIO_Init+0x304>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ce:	4a1a      	ldr	r2, [pc, #104]	; (8001438 <HAL_GPIO_Init+0x304>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013d4:	4b18      	ldr	r3, [pc, #96]	; (8001438 <HAL_GPIO_Init+0x304>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013f8:	4a0f      	ldr	r2, [pc, #60]	; (8001438 <HAL_GPIO_Init+0x304>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3301      	adds	r3, #1
 8001402:	61fb      	str	r3, [r7, #28]
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	2b0f      	cmp	r3, #15
 8001408:	f67f aea2 	bls.w	8001150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40023800 	.word	0x40023800
 8001420:	40013800 	.word	0x40013800
 8001424:	40020000 	.word	0x40020000
 8001428:	40020400 	.word	0x40020400
 800142c:	40020800 	.word	0x40020800
 8001430:	40020c00 	.word	0x40020c00
 8001434:	40021000 	.word	0x40021000
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
 8001448:	4613      	mov	r3, r2
 800144a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800144c:	787b      	ldrb	r3, [r7, #1]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001452:	887a      	ldrh	r2, [r7, #2]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001458:	e003      	b.n	8001462 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800145a:	887b      	ldrh	r3, [r7, #2]
 800145c:	041a      	lsls	r2, r3, #16
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	619a      	str	r2, [r3, #24]
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
	...

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e267      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d075      	beq.n	800157a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b82      	ldr	r3, [pc, #520]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b7e      	ldr	r3, [pc, #504]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d05b      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d157      	bne.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e242      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d4:	d106      	bne.n	80014e4 <HAL_RCC_OscConfig+0x74>
 80014d6:	4b76      	ldr	r3, [pc, #472]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a75      	ldr	r2, [pc, #468]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e0:	6013      	str	r3, [r2, #0]
 80014e2:	e01d      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b70      	ldr	r3, [pc, #448]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a6f      	ldr	r2, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b6d      	ldr	r3, [pc, #436]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a6c      	ldr	r2, [pc, #432]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e00b      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
 8001508:	4b69      	ldr	r3, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a68      	ldr	r2, [pc, #416]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b66      	ldr	r3, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a65      	ldr	r2, [pc, #404]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fd16 	bl	8000f58 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fd12 	bl	8000f58 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e207      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001550:	f7ff fd02 	bl	8000f58 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fcfe 	bl	8000f58 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	; 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1f3      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800156a:	4b51      	ldr	r3, [pc, #324]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d063      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001586:	4b4a      	ldr	r3, [pc, #296]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f003 030c 	and.w	r3, r3, #12
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001592:	4b47      	ldr	r3, [pc, #284]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800159a:	2b08      	cmp	r3, #8
 800159c:	d11c      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800159e:	4b44      	ldr	r3, [pc, #272]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d116      	bne.n	80015d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015aa:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d005      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d001      	beq.n	80015c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e1c7      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c2:	4b3b      	ldr	r3, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	4937      	ldr	r1, [pc, #220]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015d6:	e03a      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e0:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x244>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fcb7 	bl	8000f58 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fcb3 	bl	8000f58 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e1a8      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001600:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4925      	ldr	r1, [pc, #148]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 800161c:	4313      	orrs	r3, r2
 800161e:	600b      	str	r3, [r1, #0]
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_OscConfig+0x244>)
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001628:	f7ff fc96 	bl	8000f58 <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001630:	f7ff fc92 	bl	8000f58 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e187      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f0      	bne.n	8001630 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d036      	beq.n	80016c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d016      	beq.n	8001690 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fc76 	bl	8000f58 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7ff fc72 	bl	8000f58 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e167      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x240>)
 8001684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x200>
 800168e:	e01b      	b.n	80016c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x248>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fc5f 	bl	8000f58 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	e00e      	b.n	80016bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169e:	f7ff fc5b 	bl	8000f58 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d907      	bls.n	80016bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e150      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	42470000 	.word	0x42470000
 80016b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	4b88      	ldr	r3, [pc, #544]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1ea      	bne.n	800169e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f000 8097 	beq.w	8001804 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016d6:	2300      	movs	r3, #0
 80016d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016da:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d10f      	bne.n	8001706 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	4b7d      	ldr	r3, [pc, #500]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	4a7c      	ldr	r2, [pc, #496]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f4:	6413      	str	r3, [r2, #64]	; 0x40
 80016f6:	4b7a      	ldr	r3, [pc, #488]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001702:	2301      	movs	r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	4b77      	ldr	r3, [pc, #476]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d118      	bne.n	8001744 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001712:	4b74      	ldr	r3, [pc, #464]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a73      	ldr	r2, [pc, #460]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7ff fc1b 	bl	8000f58 <HAL_GetTick>
 8001722:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001726:	f7ff fc17 	bl	8000f58 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e10c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	4b6a      	ldr	r3, [pc, #424]	; (80018e4 <HAL_RCC_OscConfig+0x474>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001740:	2b00      	cmp	r3, #0
 8001742:	d0f0      	beq.n	8001726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d106      	bne.n	800175a <HAL_RCC_OscConfig+0x2ea>
 800174c:	4b64      	ldr	r3, [pc, #400]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	4a63      	ldr	r2, [pc, #396]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6713      	str	r3, [r2, #112]	; 0x70
 8001758:	e01c      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d10c      	bne.n	800177c <HAL_RCC_OscConfig+0x30c>
 8001762:	4b5f      	ldr	r3, [pc, #380]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001766:	4a5e      	ldr	r2, [pc, #376]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6713      	str	r3, [r2, #112]	; 0x70
 800176e:	4b5c      	ldr	r3, [pc, #368]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001770:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001772:	4a5b      	ldr	r2, [pc, #364]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6713      	str	r3, [r2, #112]	; 0x70
 800177a:	e00b      	b.n	8001794 <HAL_RCC_OscConfig+0x324>
 800177c:	4b58      	ldr	r3, [pc, #352]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800177e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001780:	4a57      	ldr	r2, [pc, #348]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001782:	f023 0301 	bic.w	r3, r3, #1
 8001786:	6713      	str	r3, [r2, #112]	; 0x70
 8001788:	4b55      	ldr	r3, [pc, #340]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a54      	ldr	r2, [pc, #336]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800178e:	f023 0304 	bic.w	r3, r3, #4
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d015      	beq.n	80017c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800179c:	f7ff fbdc 	bl	8000f58 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a2:	e00a      	b.n	80017ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017a4:	f7ff fbd8 	bl	8000f58 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e0cb      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ba:	4b49      	ldr	r3, [pc, #292]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0ee      	beq.n	80017a4 <HAL_RCC_OscConfig+0x334>
 80017c6:	e014      	b.n	80017f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c8:	f7ff fbc6 	bl	8000f58 <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fbc2 	bl	8000f58 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0b5      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e6:	4b3e      	ldr	r3, [pc, #248]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1ee      	bne.n	80017d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017f2:	7dfb      	ldrb	r3, [r7, #23]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d105      	bne.n	8001804 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f8:	4b39      	ldr	r3, [pc, #228]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	4a38      	ldr	r2, [pc, #224]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 80a1 	beq.w	8001950 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800180e:	4b34      	ldr	r3, [pc, #208]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d05c      	beq.n	80018d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d141      	bne.n	80018a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7ff fb96 	bl	8000f58 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001830:	f7ff fb92 	bl	8000f58 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e087      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69da      	ldr	r2, [r3, #28]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	431a      	orrs	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	3b01      	subs	r3, #1
 8001868:	041b      	lsls	r3, r3, #16
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	061b      	lsls	r3, r3, #24
 8001872:	491b      	ldr	r1, [pc, #108]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 8001874:	4313      	orrs	r3, r2
 8001876:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187e:	f7ff fb6b 	bl	8000f58 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001886:	f7ff fb67 	bl	8000f58 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e05c      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x416>
 80018a4:	e054      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x478>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ac:	f7ff fb54 	bl	8000f58 <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b4:	f7ff fb50 	bl	8000f58 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e045      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c6:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
 80018d2:	e03d      	b.n	8001950 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e038      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40007000 	.word	0x40007000
 80018e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_RCC_OscConfig+0x4ec>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	699b      	ldr	r3, [r3, #24]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d028      	beq.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001904:	429a      	cmp	r2, r3
 8001906:	d121      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	429a      	cmp	r2, r3
 8001914:	d11a      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800191c:	4013      	ands	r3, r2
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001922:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001924:	4293      	cmp	r3, r2
 8001926:	d111      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d107      	bne.n	800194c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001948:	429a      	cmp	r2, r3
 800194a:	d001      	beq.n	8001950 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3718      	adds	r7, #24
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0cc      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b68      	ldr	r3, [pc, #416]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0307 	and.w	r3, r3, #7
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d90c      	bls.n	800199c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001984:	683a      	ldr	r2, [r7, #0]
 8001986:	b2d2      	uxtb	r2, r2
 8001988:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	429a      	cmp	r2, r3
 8001996:	d001      	beq.n	800199c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e0b8      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d020      	beq.n	80019ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b4:	4b59      	ldr	r3, [pc, #356]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a58      	ldr	r2, [pc, #352]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019cc:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	4a52      	ldr	r2, [pc, #328]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019d8:	4b50      	ldr	r3, [pc, #320]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	494d      	ldr	r1, [pc, #308]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d044      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019fe:	4b47      	ldr	r3, [pc, #284]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e07f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d003      	beq.n	8001a1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b3f      	ldr	r3, [pc, #252]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e06f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3b      	ldr	r3, [pc, #236]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e067      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b37      	ldr	r3, [pc, #220]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4934      	ldr	r1, [pc, #208]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a50:	f7ff fa82 	bl	8000f58 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff fa7e 	bl	8000f58 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e04f      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b25      	ldr	r3, [pc, #148]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0307 	and.w	r3, r3, #7
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d20c      	bcs.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b22      	ldr	r3, [pc, #136]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d001      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e032      	b.n	8001b0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d008      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4916      	ldr	r1, [pc, #88]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad2:	4b12      	ldr	r3, [pc, #72]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	00db      	lsls	r3, r3, #3
 8001ae0:	490e      	ldr	r1, [pc, #56]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001ae6:	f000 f821 	bl	8001b2c <HAL_RCC_GetSysClockFreq>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	490a      	ldr	r1, [pc, #40]	; (8001b20 <HAL_RCC_ClockConfig+0x1c0>)
 8001af8:	5ccb      	ldrb	r3, [r1, r3]
 8001afa:	fa22 f303 	lsr.w	r3, r2, r3
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b02:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <HAL_RCC_ClockConfig+0x1c8>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f7ff f90e 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023c00 	.word	0x40023c00
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	08005f4c 	.word	0x08005f4c
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000004 	.word	0x20000004

08001b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b30:	b094      	sub	sp, #80	; 0x50
 8001b32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	647b      	str	r3, [r7, #68]	; 0x44
 8001b38:	2300      	movs	r3, #0
 8001b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b44:	4b79      	ldr	r3, [pc, #484]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f003 030c 	and.w	r3, r3, #12
 8001b4c:	2b08      	cmp	r3, #8
 8001b4e:	d00d      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x40>
 8001b50:	2b08      	cmp	r3, #8
 8001b52:	f200 80e1 	bhi.w	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	d003      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b5e:	e0db      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b73      	ldr	r3, [pc, #460]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001b64:	e0db      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b6a:	e0d8      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6c:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b76:	4b6d      	ldr	r3, [pc, #436]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d063      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b6a      	ldr	r3, [pc, #424]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	633b      	str	r3, [r7, #48]	; 0x30
 8001b96:	2300      	movs	r3, #0
 8001b98:	637b      	str	r3, [r7, #52]	; 0x34
 8001b9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b9e:	4622      	mov	r2, r4
 8001ba0:	462b      	mov	r3, r5
 8001ba2:	f04f 0000 	mov.w	r0, #0
 8001ba6:	f04f 0100 	mov.w	r1, #0
 8001baa:	0159      	lsls	r1, r3, #5
 8001bac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bb0:	0150      	lsls	r0, r2, #5
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	1a51      	subs	r1, r2, r1
 8001bba:	6139      	str	r1, [r7, #16]
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001bd0:	4659      	mov	r1, fp
 8001bd2:	018b      	lsls	r3, r1, #6
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bda:	4651      	mov	r1, sl
 8001bdc:	018a      	lsls	r2, r1, #6
 8001bde:	4651      	mov	r1, sl
 8001be0:	ebb2 0801 	subs.w	r8, r2, r1
 8001be4:	4659      	mov	r1, fp
 8001be6:	eb63 0901 	sbc.w	r9, r3, r1
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bfe:	4690      	mov	r8, r2
 8001c00:	4699      	mov	r9, r3
 8001c02:	4623      	mov	r3, r4
 8001c04:	eb18 0303 	adds.w	r3, r8, r3
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	462b      	mov	r3, r5
 8001c0c:	eb49 0303 	adc.w	r3, r9, r3
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	f04f 0300 	mov.w	r3, #0
 8001c1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c1e:	4629      	mov	r1, r5
 8001c20:	024b      	lsls	r3, r1, #9
 8001c22:	4621      	mov	r1, r4
 8001c24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c28:	4621      	mov	r1, r4
 8001c2a:	024a      	lsls	r2, r1, #9
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	4619      	mov	r1, r3
 8001c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c32:	2200      	movs	r2, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c3c:	f7fe fad0 	bl	80001e0 <__aeabi_uldivmod>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4613      	mov	r3, r2
 8001c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c48:	e058      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c4a:	4b38      	ldr	r3, [pc, #224]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	099b      	lsrs	r3, r3, #6
 8001c50:	2200      	movs	r2, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	4611      	mov	r1, r2
 8001c56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001c60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c64:	4642      	mov	r2, r8
 8001c66:	464b      	mov	r3, r9
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0159      	lsls	r1, r3, #5
 8001c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c76:	0150      	lsls	r0, r2, #5
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4641      	mov	r1, r8
 8001c7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c82:	4649      	mov	r1, r9
 8001c84:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c88:	f04f 0200 	mov.w	r2, #0
 8001c8c:	f04f 0300 	mov.w	r3, #0
 8001c90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c9c:	ebb2 040a 	subs.w	r4, r2, sl
 8001ca0:	eb63 050b 	sbc.w	r5, r3, fp
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	00eb      	lsls	r3, r5, #3
 8001cae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cb2:	00e2      	lsls	r2, r4, #3
 8001cb4:	4614      	mov	r4, r2
 8001cb6:	461d      	mov	r5, r3
 8001cb8:	4643      	mov	r3, r8
 8001cba:	18e3      	adds	r3, r4, r3
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	eb45 0303 	adc.w	r3, r5, r3
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	f04f 0200 	mov.w	r2, #0
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001cd2:	4629      	mov	r1, r5
 8001cd4:	028b      	lsls	r3, r1, #10
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cdc:	4621      	mov	r1, r4
 8001cde:	028a      	lsls	r2, r1, #10
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	61fa      	str	r2, [r7, #28]
 8001cec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cf0:	f7fe fa76 	bl	80001e0 <__aeabi_uldivmod>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	460b      	mov	r3, r1
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	0c1b      	lsrs	r3, r3, #16
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	3301      	adds	r3, #1
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d16:	e002      	b.n	8001d1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3750      	adds	r7, #80	; 0x50
 8001d24:	46bd      	mov	sp, r7
 8001d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	00f42400 	.word	0x00f42400
 8001d34:	007a1200 	.word	0x007a1200

08001d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000000 	.word	0x20000000

08001d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d54:	f7ff fff0 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	0a9b      	lsrs	r3, r3, #10
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	4903      	ldr	r1, [pc, #12]	; (8001d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d66:	5ccb      	ldrb	r3, [r1, r3]
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	08005f5c 	.word	0x08005f5c

08001d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d7c:	f7ff ffdc 	bl	8001d38 <HAL_RCC_GetHCLKFreq>
 8001d80:	4602      	mov	r2, r0
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	0b5b      	lsrs	r3, r3, #13
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	4903      	ldr	r1, [pc, #12]	; (8001d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d8e:	5ccb      	ldrb	r3, [r1, r3]
 8001d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	08005f5c 	.word	0x08005f5c

08001da0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	220f      	movs	r2, #15
 8001dae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f003 0203 	and.w	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	08db      	lsrs	r3, r3, #3
 8001dda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_RCC_GetClockConfig+0x60>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0207 	and.w	r2, r3, #7
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	601a      	str	r2, [r3, #0]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e041      	b.n	8001e9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f839 	bl	8001ea2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f000 fb8c 	bl	8002560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d001      	beq.n	8001ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e044      	b.n	8001f5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1e      	ldr	r2, [pc, #120]	; (8001f68 <HAL_TIM_Base_Start_IT+0xb0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d018      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x6c>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001efa:	d013      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x6c>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1a      	ldr	r2, [pc, #104]	; (8001f6c <HAL_TIM_Base_Start_IT+0xb4>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d00e      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x6c>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a19      	ldr	r2, [pc, #100]	; (8001f70 <HAL_TIM_Base_Start_IT+0xb8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x6c>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a17      	ldr	r2, [pc, #92]	; (8001f74 <HAL_TIM_Base_Start_IT+0xbc>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d004      	beq.n	8001f24 <HAL_TIM_Base_Start_IT+0x6c>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a16      	ldr	r2, [pc, #88]	; (8001f78 <HAL_TIM_Base_Start_IT+0xc0>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d111      	bne.n	8001f48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2b06      	cmp	r3, #6
 8001f34:	d010      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f46:	e007      	b.n	8001f58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	40000400 	.word	0x40000400
 8001f70:	40000800 	.word	0x40000800
 8001f74:	40000c00 	.word	0x40000c00
 8001f78:	40014000 	.word	0x40014000

08001f7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e041      	b.n	8002012 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7fe fdda 	bl	8000b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	f000 fad0 	bl	8002560 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d109      	bne.n	8002040 <HAL_TIM_PWM_Start+0x24>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	bf14      	ite	ne
 8002038:	2301      	movne	r3, #1
 800203a:	2300      	moveq	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	e022      	b.n	8002086 <HAL_TIM_PWM_Start+0x6a>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d109      	bne.n	800205a <HAL_TIM_PWM_Start+0x3e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b01      	cmp	r3, #1
 8002050:	bf14      	ite	ne
 8002052:	2301      	movne	r3, #1
 8002054:	2300      	moveq	r3, #0
 8002056:	b2db      	uxtb	r3, r3
 8002058:	e015      	b.n	8002086 <HAL_TIM_PWM_Start+0x6a>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b08      	cmp	r3, #8
 800205e:	d109      	bne.n	8002074 <HAL_TIM_PWM_Start+0x58>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002066:	b2db      	uxtb	r3, r3
 8002068:	2b01      	cmp	r3, #1
 800206a:	bf14      	ite	ne
 800206c:	2301      	movne	r3, #1
 800206e:	2300      	moveq	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	e008      	b.n	8002086 <HAL_TIM_PWM_Start+0x6a>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b01      	cmp	r3, #1
 800207e:	bf14      	ite	ne
 8002080:	2301      	movne	r3, #1
 8002082:	2300      	moveq	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e068      	b.n	8002160 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d104      	bne.n	800209e <HAL_TIM_PWM_Start+0x82>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2202      	movs	r2, #2
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800209c:	e013      	b.n	80020c6 <HAL_TIM_PWM_Start+0xaa>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d104      	bne.n	80020ae <HAL_TIM_PWM_Start+0x92>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2202      	movs	r2, #2
 80020a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80020ac:	e00b      	b.n	80020c6 <HAL_TIM_PWM_Start+0xaa>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d104      	bne.n	80020be <HAL_TIM_PWM_Start+0xa2>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2202      	movs	r2, #2
 80020b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80020bc:	e003      	b.n	80020c6 <HAL_TIM_PWM_Start+0xaa>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2202      	movs	r2, #2
 80020c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2201      	movs	r2, #1
 80020cc:	6839      	ldr	r1, [r7, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f000 fc52 	bl	8002978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_TIM_PWM_Start+0x14c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d107      	bne.n	80020ee <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_TIM_PWM_Start+0x14c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d018      	beq.n	800212a <HAL_TIM_PWM_Start+0x10e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002100:	d013      	beq.n	800212a <HAL_TIM_PWM_Start+0x10e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a19      	ldr	r2, [pc, #100]	; (800216c <HAL_TIM_PWM_Start+0x150>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d00e      	beq.n	800212a <HAL_TIM_PWM_Start+0x10e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a17      	ldr	r2, [pc, #92]	; (8002170 <HAL_TIM_PWM_Start+0x154>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d009      	beq.n	800212a <HAL_TIM_PWM_Start+0x10e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a16      	ldr	r2, [pc, #88]	; (8002174 <HAL_TIM_PWM_Start+0x158>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d004      	beq.n	800212a <HAL_TIM_PWM_Start+0x10e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_TIM_PWM_Start+0x15c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d111      	bne.n	800214e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b06      	cmp	r3, #6
 800213a:	d010      	beq.n	800215e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214c:	e007      	b.n	800215e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 0201 	orr.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40010000 	.word	0x40010000
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800
 8002174:	40000c00 	.word	0x40000c00
 8002178:	40014000 	.word	0x40014000

0800217c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b02      	cmp	r3, #2
 8002190:	d122      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b02      	cmp	r3, #2
 800219e:	d11b      	bne.n	80021d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0202 	mvn.w	r2, #2
 80021a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f9b0 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 80021c4:	e005      	b.n	80021d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f9a2 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f9b3 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d122      	bne.n	800222c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d11b      	bne.n	800222c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f06f 0204 	mvn.w	r2, #4
 80021fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2202      	movs	r2, #2
 8002202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	2b00      	cmp	r3, #0
 8002210:	d003      	beq.n	800221a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f986 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 8002218:	e005      	b.n	8002226 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f978 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f000 f989 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0308 	and.w	r3, r3, #8
 8002236:	2b08      	cmp	r3, #8
 8002238:	d122      	bne.n	8002280 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0308 	and.w	r3, r3, #8
 8002244:	2b08      	cmp	r3, #8
 8002246:	d11b      	bne.n	8002280 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0208 	mvn.w	r2, #8
 8002250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2204      	movs	r2, #4
 8002256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	69db      	ldr	r3, [r3, #28]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d003      	beq.n	800226e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f95c 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 800226c:	e005      	b.n	800227a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f94e 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 f95f 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	f003 0310 	and.w	r3, r3, #16
 800228a:	2b10      	cmp	r3, #16
 800228c:	d122      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b10      	cmp	r3, #16
 800229a:	d11b      	bne.n	80022d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f06f 0210 	mvn.w	r2, #16
 80022a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2208      	movs	r2, #8
 80022aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	69db      	ldr	r3, [r3, #28]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d003      	beq.n	80022c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f932 	bl	8002524 <HAL_TIM_IC_CaptureCallback>
 80022c0:	e005      	b.n	80022ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f000 f924 	bl	8002510 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 f935 	bl	8002538 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d10e      	bne.n	8002300 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d107      	bne.n	8002300 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f06f 0201 	mvn.w	r2, #1
 80022f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7fe fbee 	bl	8000adc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800230a:	2b80      	cmp	r3, #128	; 0x80
 800230c:	d10e      	bne.n	800232c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	2b80      	cmp	r3, #128	; 0x80
 800231a:	d107      	bne.n	800232c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fc16 	bl	8002b58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002336:	2b40      	cmp	r3, #64	; 0x40
 8002338:	d10e      	bne.n	8002358 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002344:	2b40      	cmp	r3, #64	; 0x40
 8002346:	d107      	bne.n	8002358 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f8fa 	bl	800254c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	2b20      	cmp	r3, #32
 8002364:	d10e      	bne.n	8002384 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0320 	and.w	r3, r3, #32
 8002370:	2b20      	cmp	r3, #32
 8002372:	d107      	bne.n	8002384 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f06f 0220 	mvn.w	r2, #32
 800237c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fbe0 	bl	8002b44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e0ae      	b.n	8002508 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b0c      	cmp	r3, #12
 80023b6:	f200 809f 	bhi.w	80024f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023f5 	.word	0x080023f5
 80023c4:	080024f9 	.word	0x080024f9
 80023c8:	080024f9 	.word	0x080024f9
 80023cc:	080024f9 	.word	0x080024f9
 80023d0:	08002435 	.word	0x08002435
 80023d4:	080024f9 	.word	0x080024f9
 80023d8:	080024f9 	.word	0x080024f9
 80023dc:	080024f9 	.word	0x080024f9
 80023e0:	08002477 	.word	0x08002477
 80023e4:	080024f9 	.word	0x080024f9
 80023e8:	080024f9 	.word	0x080024f9
 80023ec:	080024f9 	.word	0x080024f9
 80023f0:	080024b7 	.word	0x080024b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 f930 	bl	8002660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0208 	orr.w	r2, r2, #8
 800240e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0204 	bic.w	r2, r2, #4
 800241e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6999      	ldr	r1, [r3, #24]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	430a      	orrs	r2, r1
 8002430:	619a      	str	r2, [r3, #24]
      break;
 8002432:	e064      	b.n	80024fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	4618      	mov	r0, r3
 800243c:	f000 f976 	bl	800272c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699a      	ldr	r2, [r3, #24]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800244e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6999      	ldr	r1, [r3, #24]
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	021a      	lsls	r2, r3, #8
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	619a      	str	r2, [r3, #24]
      break;
 8002474:	e043      	b.n	80024fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68b9      	ldr	r1, [r7, #8]
 800247c:	4618      	mov	r0, r3
 800247e:	f000 f9c1 	bl	8002804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0208 	orr.w	r2, r2, #8
 8002490:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	69da      	ldr	r2, [r3, #28]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0204 	bic.w	r2, r2, #4
 80024a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	69d9      	ldr	r1, [r3, #28]
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	61da      	str	r2, [r3, #28]
      break;
 80024b4:	e023      	b.n	80024fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fa0b 	bl	80028d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	69da      	ldr	r2, [r3, #28]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	69da      	ldr	r2, [r3, #28]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69d9      	ldr	r1, [r3, #28]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	021a      	lsls	r2, r3, #8
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	61da      	str	r2, [r3, #28]
      break;
 80024f6:	e002      	b.n	80024fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	75fb      	strb	r3, [r7, #23]
      break;
 80024fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002506:	7dfb      	ldrb	r3, [r7, #23]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a34      	ldr	r2, [pc, #208]	; (8002644 <TIM_Base_SetConfig+0xe4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00f      	beq.n	8002598 <TIM_Base_SetConfig+0x38>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800257e:	d00b      	beq.n	8002598 <TIM_Base_SetConfig+0x38>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a31      	ldr	r2, [pc, #196]	; (8002648 <TIM_Base_SetConfig+0xe8>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d007      	beq.n	8002598 <TIM_Base_SetConfig+0x38>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a30      	ldr	r2, [pc, #192]	; (800264c <TIM_Base_SetConfig+0xec>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d003      	beq.n	8002598 <TIM_Base_SetConfig+0x38>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a2f      	ldr	r2, [pc, #188]	; (8002650 <TIM_Base_SetConfig+0xf0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d108      	bne.n	80025aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800259e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a25      	ldr	r2, [pc, #148]	; (8002644 <TIM_Base_SetConfig+0xe4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d01b      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025b8:	d017      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a22      	ldr	r2, [pc, #136]	; (8002648 <TIM_Base_SetConfig+0xe8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d013      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a21      	ldr	r2, [pc, #132]	; (800264c <TIM_Base_SetConfig+0xec>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00f      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a20      	ldr	r2, [pc, #128]	; (8002650 <TIM_Base_SetConfig+0xf0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00b      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4a1f      	ldr	r2, [pc, #124]	; (8002654 <TIM_Base_SetConfig+0xf4>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a1e      	ldr	r2, [pc, #120]	; (8002658 <TIM_Base_SetConfig+0xf8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0x8a>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1d      	ldr	r2, [pc, #116]	; (800265c <TIM_Base_SetConfig+0xfc>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a08      	ldr	r2, [pc, #32]	; (8002644 <TIM_Base_SetConfig+0xe4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d103      	bne.n	8002630 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	615a      	str	r2, [r3, #20]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000
 8002648:	40000400 	.word	0x40000400
 800264c:	40000800 	.word	0x40000800
 8002650:	40000c00 	.word	0x40000c00
 8002654:	40014000 	.word	0x40014000
 8002658:	40014400 	.word	0x40014400
 800265c:	40014800 	.word	0x40014800

08002660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	f023 0201 	bic.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0303 	bic.w	r3, r3, #3
 8002696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f023 0302 	bic.w	r3, r3, #2
 80026a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a1c      	ldr	r2, [pc, #112]	; (8002728 <TIM_OC1_SetConfig+0xc8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d10c      	bne.n	80026d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	f023 0308 	bic.w	r3, r3, #8
 80026c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f023 0304 	bic.w	r3, r3, #4
 80026d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <TIM_OC1_SetConfig+0xc8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d111      	bne.n	8002702 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	4313      	orrs	r3, r2
 8002700:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	621a      	str	r2, [r3, #32]
}
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40010000 	.word	0x40010000

0800272c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f023 0210 	bic.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a1b      	ldr	r3, [r3, #32]
 8002746:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	021b      	lsls	r3, r3, #8
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4313      	orrs	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f023 0320 	bic.w	r3, r3, #32
 8002776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <TIM_OC2_SetConfig+0xd4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d10d      	bne.n	80027a8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a15      	ldr	r2, [pc, #84]	; (8002800 <TIM_OC2_SetConfig+0xd4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d113      	bne.n	80027d8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	693a      	ldr	r2, [r7, #16]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40010000 	.word	0x40010000

08002804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f023 0303 	bic.w	r3, r3, #3
 800283a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800284c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	021b      	lsls	r3, r3, #8
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <TIM_OC3_SetConfig+0xd0>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d10d      	bne.n	800287e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	021b      	lsls	r3, r3, #8
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4313      	orrs	r3, r2
 8002874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800287c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <TIM_OC3_SetConfig+0xd0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d113      	bne.n	80028ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800288c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	695b      	ldr	r3, [r3, #20]
 800289a:	011b      	lsls	r3, r3, #4
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	693a      	ldr	r2, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	621a      	str	r2, [r3, #32]
}
 80028c8:	bf00      	nop
 80028ca:	371c      	adds	r7, #28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	40010000 	.word	0x40010000

080028d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	021b      	lsls	r3, r3, #8
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	4313      	orrs	r3, r2
 800291a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	031b      	lsls	r3, r3, #12
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4313      	orrs	r3, r2
 800292e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a10      	ldr	r2, [pc, #64]	; (8002974 <TIM_OC4_SetConfig+0x9c>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d109      	bne.n	800294c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800293e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	4313      	orrs	r3, r2
 800294a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	621a      	str	r2, [r3, #32]
}
 8002966:	bf00      	nop
 8002968:	371c      	adds	r7, #28
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000

08002978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	2201      	movs	r2, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1a      	ldr	r2, [r3, #32]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	43db      	mvns	r3, r3
 800299a:	401a      	ands	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a1a      	ldr	r2, [r3, #32]
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 031f 	and.w	r3, r3, #31
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	621a      	str	r2, [r3, #32]
}
 80029b6:	bf00      	nop
 80029b8:	371c      	adds	r7, #28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d101      	bne.n	80029dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029d8:	2302      	movs	r3, #2
 80029da:	e050      	b.n	8002a7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d018      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a28:	d013      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d10c      	bne.n	8002a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40014000 	.word	0x40014000

08002aa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e03d      	b.n	8002b38 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	695b      	ldr	r3, [r3, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e03f      	b.n	8002bfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fe f880 	bl	8000c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68da      	ldr	r2, [r3, #12]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f929 	bl	8002e08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b08a      	sub	sp, #40	; 0x28
 8002c0a:	af02      	add	r7, sp, #8
 8002c0c:	60f8      	str	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b20      	cmp	r3, #32
 8002c24:	d17c      	bne.n	8002d20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_UART_Transmit+0x2c>
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e075      	b.n	8002d22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d101      	bne.n	8002c44 <HAL_UART_Transmit+0x3e>
 8002c40:	2302      	movs	r3, #2
 8002c42:	e06e      	b.n	8002d22 <HAL_UART_Transmit+0x11c>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2221      	movs	r2, #33	; 0x21
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c5a:	f7fe f97d 	bl	8000f58 <HAL_GetTick>
 8002c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	88fa      	ldrh	r2, [r7, #6]
 8002c64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	88fa      	ldrh	r2, [r7, #6]
 8002c6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c74:	d108      	bne.n	8002c88 <HAL_UART_Transmit+0x82>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d104      	bne.n	8002c88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	e003      	b.n	8002c90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c98:	e02a      	b.n	8002cf0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2180      	movs	r1, #128	; 0x80
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f840 	bl	8002d2a <UART_WaitOnFlagUntilTimeout>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e036      	b.n	8002d22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	881b      	ldrh	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cc8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	3302      	adds	r3, #2
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	e007      	b.n	8002ce2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	781a      	ldrb	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3b01      	subs	r3, #1
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1cf      	bne.n	8002c9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	2200      	movs	r2, #0
 8002d02:	2140      	movs	r1, #64	; 0x40
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f810 	bl	8002d2a <UART_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e006      	b.n	8002d22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b090      	sub	sp, #64	; 0x40
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d3a:	e050      	b.n	8002dde <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	d04c      	beq.n	8002dde <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d007      	beq.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d4a:	f7fe f905 	bl	8000f58 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d241      	bcs.n	8002dde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d7a:	637a      	str	r2, [r7, #52]	; 0x34
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e5      	bne.n	8002d5a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3314      	adds	r3, #20
 8002d94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dae:	623a      	str	r2, [r7, #32]
 8002db0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	69f9      	ldr	r1, [r7, #28]
 8002db4:	6a3a      	ldr	r2, [r7, #32]
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	61bb      	str	r3, [r7, #24]
   return(result);
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e5      	bne.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e00f      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4013      	ands	r3, r2
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	bf0c      	ite	eq
 8002dee:	2301      	moveq	r3, #1
 8002df0:	2300      	movne	r3, #0
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	461a      	mov	r2, r3
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d09f      	beq.n	8002d3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3740      	adds	r7, #64	; 0x40
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e0c:	b0c0      	sub	sp, #256	; 0x100
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e24:	68d9      	ldr	r1, [r3, #12]
 8002e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	ea40 0301 	orr.w	r3, r0, r1
 8002e30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e44:	695b      	ldr	r3, [r3, #20]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002e60:	f021 010c 	bic.w	r1, r1, #12
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e82:	6999      	ldr	r1, [r3, #24]
 8002e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	ea40 0301 	orr.w	r3, r0, r1
 8002e8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4b8f      	ldr	r3, [pc, #572]	; (80030d4 <UART_SetConfig+0x2cc>)
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d005      	beq.n	8002ea8 <UART_SetConfig+0xa0>
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b8d      	ldr	r3, [pc, #564]	; (80030d8 <UART_SetConfig+0x2d0>)
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d104      	bne.n	8002eb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ea8:	f7fe ff66 	bl	8001d78 <HAL_RCC_GetPCLK2Freq>
 8002eac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002eb0:	e003      	b.n	8002eba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002eb2:	f7fe ff4d 	bl	8001d50 <HAL_RCC_GetPCLK1Freq>
 8002eb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ec4:	f040 810c 	bne.w	80030e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ec8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ed2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002ed6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002eda:	4622      	mov	r2, r4
 8002edc:	462b      	mov	r3, r5
 8002ede:	1891      	adds	r1, r2, r2
 8002ee0:	65b9      	str	r1, [r7, #88]	; 0x58
 8002ee2:	415b      	adcs	r3, r3
 8002ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ee6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002eea:	4621      	mov	r1, r4
 8002eec:	eb12 0801 	adds.w	r8, r2, r1
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	eb43 0901 	adc.w	r9, r3, r1
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	f04f 0300 	mov.w	r3, #0
 8002efe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f0a:	4690      	mov	r8, r2
 8002f0c:	4699      	mov	r9, r3
 8002f0e:	4623      	mov	r3, r4
 8002f10:	eb18 0303 	adds.w	r3, r8, r3
 8002f14:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f18:	462b      	mov	r3, r5
 8002f1a:	eb49 0303 	adc.w	r3, r9, r3
 8002f1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f2e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f36:	460b      	mov	r3, r1
 8002f38:	18db      	adds	r3, r3, r3
 8002f3a:	653b      	str	r3, [r7, #80]	; 0x50
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	eb42 0303 	adc.w	r3, r2, r3
 8002f42:	657b      	str	r3, [r7, #84]	; 0x54
 8002f44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002f4c:	f7fd f948 	bl	80001e0 <__aeabi_uldivmod>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4b61      	ldr	r3, [pc, #388]	; (80030dc <UART_SetConfig+0x2d4>)
 8002f56:	fba3 2302 	umull	r2, r3, r3, r2
 8002f5a:	095b      	lsrs	r3, r3, #5
 8002f5c:	011c      	lsls	r4, r3, #4
 8002f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002f68:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002f6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002f70:	4642      	mov	r2, r8
 8002f72:	464b      	mov	r3, r9
 8002f74:	1891      	adds	r1, r2, r2
 8002f76:	64b9      	str	r1, [r7, #72]	; 0x48
 8002f78:	415b      	adcs	r3, r3
 8002f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f80:	4641      	mov	r1, r8
 8002f82:	eb12 0a01 	adds.w	sl, r2, r1
 8002f86:	4649      	mov	r1, r9
 8002f88:	eb43 0b01 	adc.w	fp, r3, r1
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	f04f 0300 	mov.w	r3, #0
 8002f94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002fa0:	4692      	mov	sl, r2
 8002fa2:	469b      	mov	fp, r3
 8002fa4:	4643      	mov	r3, r8
 8002fa6:	eb1a 0303 	adds.w	r3, sl, r3
 8002faa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	eb4b 0303 	adc.w	r3, fp, r3
 8002fb4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002fc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002fc8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	18db      	adds	r3, r3, r3
 8002fd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	eb42 0303 	adc.w	r3, r2, r3
 8002fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002fda:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002fde:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002fe2:	f7fd f8fd 	bl	80001e0 <__aeabi_uldivmod>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <UART_SetConfig+0x2d4>)
 8002fee:	fba3 2301 	umull	r2, r3, r3, r1
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2264      	movs	r2, #100	; 0x64
 8002ff6:	fb02 f303 	mul.w	r3, r2, r3
 8002ffa:	1acb      	subs	r3, r1, r3
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003002:	4b36      	ldr	r3, [pc, #216]	; (80030dc <UART_SetConfig+0x2d4>)
 8003004:	fba3 2302 	umull	r2, r3, r3, r2
 8003008:	095b      	lsrs	r3, r3, #5
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003010:	441c      	add	r4, r3
 8003012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800301c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003020:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003024:	4642      	mov	r2, r8
 8003026:	464b      	mov	r3, r9
 8003028:	1891      	adds	r1, r2, r2
 800302a:	63b9      	str	r1, [r7, #56]	; 0x38
 800302c:	415b      	adcs	r3, r3
 800302e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003030:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003034:	4641      	mov	r1, r8
 8003036:	1851      	adds	r1, r2, r1
 8003038:	6339      	str	r1, [r7, #48]	; 0x30
 800303a:	4649      	mov	r1, r9
 800303c:	414b      	adcs	r3, r1
 800303e:	637b      	str	r3, [r7, #52]	; 0x34
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800304c:	4659      	mov	r1, fp
 800304e:	00cb      	lsls	r3, r1, #3
 8003050:	4651      	mov	r1, sl
 8003052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003056:	4651      	mov	r1, sl
 8003058:	00ca      	lsls	r2, r1, #3
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	4603      	mov	r3, r0
 8003060:	4642      	mov	r2, r8
 8003062:	189b      	adds	r3, r3, r2
 8003064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003068:	464b      	mov	r3, r9
 800306a:	460a      	mov	r2, r1
 800306c:	eb42 0303 	adc.w	r3, r2, r3
 8003070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003080:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003084:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003088:	460b      	mov	r3, r1
 800308a:	18db      	adds	r3, r3, r3
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
 800308e:	4613      	mov	r3, r2
 8003090:	eb42 0303 	adc.w	r3, r2, r3
 8003094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003096:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800309a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800309e:	f7fd f89f 	bl	80001e0 <__aeabi_uldivmod>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <UART_SetConfig+0x2d4>)
 80030a8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	2164      	movs	r1, #100	; 0x64
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	3332      	adds	r3, #50	; 0x32
 80030ba:	4a08      	ldr	r2, [pc, #32]	; (80030dc <UART_SetConfig+0x2d4>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	f003 0207 	and.w	r2, r3, #7
 80030c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4422      	add	r2, r4
 80030ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030d0:	e105      	b.n	80032de <UART_SetConfig+0x4d6>
 80030d2:	bf00      	nop
 80030d4:	40011000 	.word	0x40011000
 80030d8:	40011400 	.word	0x40011400
 80030dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030e4:	2200      	movs	r2, #0
 80030e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80030ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80030ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80030f2:	4642      	mov	r2, r8
 80030f4:	464b      	mov	r3, r9
 80030f6:	1891      	adds	r1, r2, r2
 80030f8:	6239      	str	r1, [r7, #32]
 80030fa:	415b      	adcs	r3, r3
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
 80030fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003102:	4641      	mov	r1, r8
 8003104:	1854      	adds	r4, r2, r1
 8003106:	4649      	mov	r1, r9
 8003108:	eb43 0501 	adc.w	r5, r3, r1
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	00eb      	lsls	r3, r5, #3
 8003116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800311a:	00e2      	lsls	r2, r4, #3
 800311c:	4614      	mov	r4, r2
 800311e:	461d      	mov	r5, r3
 8003120:	4643      	mov	r3, r8
 8003122:	18e3      	adds	r3, r4, r3
 8003124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003128:	464b      	mov	r3, r9
 800312a:	eb45 0303 	adc.w	r3, r5, r3
 800312e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800313e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800314e:	4629      	mov	r1, r5
 8003150:	008b      	lsls	r3, r1, #2
 8003152:	4621      	mov	r1, r4
 8003154:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003158:	4621      	mov	r1, r4
 800315a:	008a      	lsls	r2, r1, #2
 800315c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003160:	f7fd f83e 	bl	80001e0 <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4b60      	ldr	r3, [pc, #384]	; (80032ec <UART_SetConfig+0x4e4>)
 800316a:	fba3 2302 	umull	r2, r3, r3, r2
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	011c      	lsls	r4, r3, #4
 8003172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003176:	2200      	movs	r2, #0
 8003178:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800317c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003180:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003184:	4642      	mov	r2, r8
 8003186:	464b      	mov	r3, r9
 8003188:	1891      	adds	r1, r2, r2
 800318a:	61b9      	str	r1, [r7, #24]
 800318c:	415b      	adcs	r3, r3
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003194:	4641      	mov	r1, r8
 8003196:	1851      	adds	r1, r2, r1
 8003198:	6139      	str	r1, [r7, #16]
 800319a:	4649      	mov	r1, r9
 800319c:	414b      	adcs	r3, r1
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031ac:	4659      	mov	r1, fp
 80031ae:	00cb      	lsls	r3, r1, #3
 80031b0:	4651      	mov	r1, sl
 80031b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031b6:	4651      	mov	r1, sl
 80031b8:	00ca      	lsls	r2, r1, #3
 80031ba:	4610      	mov	r0, r2
 80031bc:	4619      	mov	r1, r3
 80031be:	4603      	mov	r3, r0
 80031c0:	4642      	mov	r2, r8
 80031c2:	189b      	adds	r3, r3, r2
 80031c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80031c8:	464b      	mov	r3, r9
 80031ca:	460a      	mov	r2, r1
 80031cc:	eb42 0303 	adc.w	r3, r2, r3
 80031d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80031de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80031e0:	f04f 0200 	mov.w	r2, #0
 80031e4:	f04f 0300 	mov.w	r3, #0
 80031e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80031ec:	4649      	mov	r1, r9
 80031ee:	008b      	lsls	r3, r1, #2
 80031f0:	4641      	mov	r1, r8
 80031f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031f6:	4641      	mov	r1, r8
 80031f8:	008a      	lsls	r2, r1, #2
 80031fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80031fe:	f7fc ffef 	bl	80001e0 <__aeabi_uldivmod>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4b39      	ldr	r3, [pc, #228]	; (80032ec <UART_SetConfig+0x4e4>)
 8003208:	fba3 1302 	umull	r1, r3, r3, r2
 800320c:	095b      	lsrs	r3, r3, #5
 800320e:	2164      	movs	r1, #100	; 0x64
 8003210:	fb01 f303 	mul.w	r3, r1, r3
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	3332      	adds	r3, #50	; 0x32
 800321a:	4a34      	ldr	r2, [pc, #208]	; (80032ec <UART_SetConfig+0x4e4>)
 800321c:	fba2 2303 	umull	r2, r3, r2, r3
 8003220:	095b      	lsrs	r3, r3, #5
 8003222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003226:	441c      	add	r4, r3
 8003228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800322c:	2200      	movs	r2, #0
 800322e:	673b      	str	r3, [r7, #112]	; 0x70
 8003230:	677a      	str	r2, [r7, #116]	; 0x74
 8003232:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003236:	4642      	mov	r2, r8
 8003238:	464b      	mov	r3, r9
 800323a:	1891      	adds	r1, r2, r2
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	415b      	adcs	r3, r3
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003246:	4641      	mov	r1, r8
 8003248:	1851      	adds	r1, r2, r1
 800324a:	6039      	str	r1, [r7, #0]
 800324c:	4649      	mov	r1, r9
 800324e:	414b      	adcs	r3, r1
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800325e:	4659      	mov	r1, fp
 8003260:	00cb      	lsls	r3, r1, #3
 8003262:	4651      	mov	r1, sl
 8003264:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003268:	4651      	mov	r1, sl
 800326a:	00ca      	lsls	r2, r1, #3
 800326c:	4610      	mov	r0, r2
 800326e:	4619      	mov	r1, r3
 8003270:	4603      	mov	r3, r0
 8003272:	4642      	mov	r2, r8
 8003274:	189b      	adds	r3, r3, r2
 8003276:	66bb      	str	r3, [r7, #104]	; 0x68
 8003278:	464b      	mov	r3, r9
 800327a:	460a      	mov	r2, r1
 800327c:	eb42 0303 	adc.w	r3, r2, r3
 8003280:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	663b      	str	r3, [r7, #96]	; 0x60
 800328c:	667a      	str	r2, [r7, #100]	; 0x64
 800328e:	f04f 0200 	mov.w	r2, #0
 8003292:	f04f 0300 	mov.w	r3, #0
 8003296:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800329a:	4649      	mov	r1, r9
 800329c:	008b      	lsls	r3, r1, #2
 800329e:	4641      	mov	r1, r8
 80032a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032a4:	4641      	mov	r1, r8
 80032a6:	008a      	lsls	r2, r1, #2
 80032a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032ac:	f7fc ff98 	bl	80001e0 <__aeabi_uldivmod>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <UART_SetConfig+0x4e4>)
 80032b6:	fba3 1302 	umull	r1, r3, r3, r2
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	2164      	movs	r1, #100	; 0x64
 80032be:	fb01 f303 	mul.w	r3, r1, r3
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	3332      	adds	r3, #50	; 0x32
 80032c8:	4a08      	ldr	r2, [pc, #32]	; (80032ec <UART_SetConfig+0x4e4>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	095b      	lsrs	r3, r3, #5
 80032d0:	f003 020f 	and.w	r2, r3, #15
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4422      	add	r2, r4
 80032dc:	609a      	str	r2, [r3, #8]
}
 80032de:	bf00      	nop
 80032e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80032e4:	46bd      	mov	sp, r7
 80032e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ea:	bf00      	nop
 80032ec:	51eb851f 	.word	0x51eb851f

080032f0 <__NVIC_SetPriority>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003300:	2b00      	cmp	r3, #0
 8003302:	db0a      	blt.n	800331a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	490c      	ldr	r1, [pc, #48]	; (800333c <__NVIC_SetPriority+0x4c>)
 800330a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330e:	0112      	lsls	r2, r2, #4
 8003310:	b2d2      	uxtb	r2, r2
 8003312:	440b      	add	r3, r1
 8003314:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003318:	e00a      	b.n	8003330 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4908      	ldr	r1, [pc, #32]	; (8003340 <__NVIC_SetPriority+0x50>)
 8003320:	79fb      	ldrb	r3, [r7, #7]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	3b04      	subs	r3, #4
 8003328:	0112      	lsls	r2, r2, #4
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	440b      	add	r3, r1
 800332e:	761a      	strb	r2, [r3, #24]
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	e000e100 	.word	0xe000e100
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <SysTick_Handler+0x1c>)
 800334a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800334c:	f001 fcfe 	bl	8004d4c <xTaskGetSchedulerState>
 8003350:	4603      	mov	r3, r0
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003356:	f002 fae7 	bl	8005928 <xPortSysTickHandler>
  }
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	e000e010 	.word	0xe000e010

08003364 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003368:	2100      	movs	r1, #0
 800336a:	f06f 0004 	mvn.w	r0, #4
 800336e:	f7ff ffbf 	bl	80032f0 <__NVIC_SetPriority>
#endif
}
 8003372:	bf00      	nop
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800337e:	f3ef 8305 	mrs	r3, IPSR
 8003382:	603b      	str	r3, [r7, #0]
  return(result);
 8003384:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800338a:	f06f 0305 	mvn.w	r3, #5
 800338e:	607b      	str	r3, [r7, #4]
 8003390:	e00c      	b.n	80033ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <osKernelInitialize+0x44>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d105      	bne.n	80033a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800339a:	4b08      	ldr	r3, [pc, #32]	; (80033bc <osKernelInitialize+0x44>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	607b      	str	r3, [r7, #4]
 80033a4:	e002      	b.n	80033ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
 80033aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033ac:	687b      	ldr	r3, [r7, #4]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000154 	.word	0x20000154

080033c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033c6:	f3ef 8305 	mrs	r3, IPSR
 80033ca:	603b      	str	r3, [r7, #0]
  return(result);
 80033cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d003      	beq.n	80033da <osKernelStart+0x1a>
    stat = osErrorISR;
 80033d2:	f06f 0305 	mvn.w	r3, #5
 80033d6:	607b      	str	r3, [r7, #4]
 80033d8:	e010      	b.n	80033fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80033da:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <osKernelStart+0x48>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d109      	bne.n	80033f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80033e2:	f7ff ffbf 	bl	8003364 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80033e6:	4b08      	ldr	r3, [pc, #32]	; (8003408 <osKernelStart+0x48>)
 80033e8:	2202      	movs	r2, #2
 80033ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80033ec:	f001 f866 	bl	80044bc <vTaskStartScheduler>
      stat = osOK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	607b      	str	r3, [r7, #4]
 80033f4:	e002      	b.n	80033fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80033f6:	f04f 33ff 	mov.w	r3, #4294967295
 80033fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80033fc:	687b      	ldr	r3, [r7, #4]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000154 	.word	0x20000154

0800340c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b08e      	sub	sp, #56	; 0x38
 8003410:	af04      	add	r7, sp, #16
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800341c:	f3ef 8305 	mrs	r3, IPSR
 8003420:	617b      	str	r3, [r7, #20]
  return(result);
 8003422:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003424:	2b00      	cmp	r3, #0
 8003426:	d17e      	bne.n	8003526 <osThreadNew+0x11a>
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d07b      	beq.n	8003526 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003432:	2318      	movs	r3, #24
 8003434:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003436:	2300      	movs	r3, #0
 8003438:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800343a:	f04f 33ff 	mov.w	r3, #4294967295
 800343e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d045      	beq.n	80034d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <osThreadNew+0x48>
        name = attr->name;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <osThreadNew+0x6e>
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	2b38      	cmp	r3, #56	; 0x38
 800346c:	d805      	bhi.n	800347a <osThreadNew+0x6e>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <osThreadNew+0x72>
        return (NULL);
 800347a:	2300      	movs	r3, #0
 800347c:	e054      	b.n	8003528 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	089b      	lsrs	r3, r3, #2
 800348c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00e      	beq.n	80034b4 <osThreadNew+0xa8>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	2b5b      	cmp	r3, #91	; 0x5b
 800349c:	d90a      	bls.n	80034b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d006      	beq.n	80034b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <osThreadNew+0xa8>
        mem = 1;
 80034ae:	2301      	movs	r3, #1
 80034b0:	61bb      	str	r3, [r7, #24]
 80034b2:	e010      	b.n	80034d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10c      	bne.n	80034d6 <osThreadNew+0xca>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d108      	bne.n	80034d6 <osThreadNew+0xca>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d104      	bne.n	80034d6 <osThreadNew+0xca>
          mem = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	e001      	b.n	80034d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d110      	bne.n	80034fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034e4:	9202      	str	r2, [sp, #8]
 80034e6:	9301      	str	r3, [sp, #4]
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	6a3a      	ldr	r2, [r7, #32]
 80034f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fe0c 	bl	8004110 <xTaskCreateStatic>
 80034f8:	4603      	mov	r3, r0
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	e013      	b.n	8003526 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d110      	bne.n	8003526 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	b29a      	uxth	r2, r3
 8003508:	f107 0310 	add.w	r3, r7, #16
 800350c:	9301      	str	r3, [sp, #4]
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fe57 	bl	80041ca <xTaskCreate>
 800351c:	4603      	mov	r3, r0
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <osThreadNew+0x11a>
            hTask = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003526:	693b      	ldr	r3, [r7, #16]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3728      	adds	r7, #40	; 0x28
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003538:	f3ef 8305 	mrs	r3, IPSR
 800353c:	60bb      	str	r3, [r7, #8]
  return(result);
 800353e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <osDelay+0x1c>
    stat = osErrorISR;
 8003544:	f06f 0305 	mvn.w	r3, #5
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	e007      	b.n	800355c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 ff7c 	bl	8004454 <vTaskDelay>
    }
  }

  return (stat);
 800355c:	68fb      	ldr	r3, [r7, #12]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4a07      	ldr	r2, [pc, #28]	; (8003594 <vApplicationGetIdleTaskMemory+0x2c>)
 8003578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4a06      	ldr	r2, [pc, #24]	; (8003598 <vApplicationGetIdleTaskMemory+0x30>)
 800357e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2280      	movs	r2, #128	; 0x80
 8003584:	601a      	str	r2, [r3, #0]
}
 8003586:	bf00      	nop
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	20000158 	.word	0x20000158
 8003598:	200001b4 	.word	0x200001b4

0800359c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a07      	ldr	r2, [pc, #28]	; (80035c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80035ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4a06      	ldr	r2, [pc, #24]	; (80035cc <vApplicationGetTimerTaskMemory+0x30>)
 80035b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ba:	601a      	str	r2, [r3, #0]
}
 80035bc:	bf00      	nop
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	200003b4 	.word	0x200003b4
 80035cc:	20000410 	.word	0x20000410

080035d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f103 0208 	add.w	r2, r3, #8
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f103 0208 	add.w	r2, r3, #8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f103 0208 	add.w	r2, r3, #8
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800361e:	bf00      	nop
 8003620:	370c      	adds	r7, #12
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr

0800362a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800362a:	b480      	push	{r7}
 800362c:	b085      	sub	sp, #20
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	683a      	ldr	r2, [r7, #0]
 800364e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	683a      	ldr	r2, [r7, #0]
 8003654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	601a      	str	r2, [r3, #0]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003672:	b480      	push	{r7}
 8003674:	b085      	sub	sp, #20
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d103      	bne.n	8003692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	60fb      	str	r3, [r7, #12]
 8003690:	e00c      	b.n	80036ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	3308      	adds	r3, #8
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e002      	b.n	80036a0 <vListInsert+0x2e>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	60fb      	str	r3, [r7, #12]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d2f6      	bcs.n	800369a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	601a      	str	r2, [r3, #0]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	6892      	ldr	r2, [r2, #8]
 80036fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6852      	ldr	r2, [r2, #4]
 8003704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	d103      	bne.n	8003718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1e5a      	subs	r2, r3, #1
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10a      	bne.n	8003762 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800374c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003750:	f383 8811 	msr	BASEPRI, r3
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800375e:	bf00      	nop
 8003760:	e7fe      	b.n	8003760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003762:	f002 f84f 	bl	8005804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003772:	fb01 f303 	mul.w	r3, r1, r3
 8003776:	441a      	add	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	3b01      	subs	r3, #1
 8003794:	68f9      	ldr	r1, [r7, #12]
 8003796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003798:	fb01 f303 	mul.w	r3, r1, r3
 800379c:	441a      	add	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	22ff      	movs	r2, #255	; 0xff
 80037a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	22ff      	movs	r2, #255	; 0xff
 80037ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d114      	bne.n	80037e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01a      	beq.n	80037f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3310      	adds	r3, #16
 80037c4:	4618      	mov	r0, r3
 80037c6:	f001 f903 	bl	80049d0 <xTaskRemoveFromEventList>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d012      	beq.n	80037f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <xQueueGenericReset+0xcc>)
 80037d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	e009      	b.n	80037f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	3310      	adds	r3, #16
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7ff fef2 	bl	80035d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	3324      	adds	r3, #36	; 0x24
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff feed 	bl	80035d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80037f6:	f002 f835 	bl	8005864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80037fa:	2301      	movs	r3, #1
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	e000ed04 	.word	0xe000ed04

08003808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08e      	sub	sp, #56	; 0x38
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10a      	bne.n	800384e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800384a:	bf00      	nop
 800384c:	e7fe      	b.n	800384c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <xQueueGenericCreateStatic+0x52>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d001      	beq.n	800385e <xQueueGenericCreateStatic+0x56>
 800385a:	2301      	movs	r3, #1
 800385c:	e000      	b.n	8003860 <xQueueGenericCreateStatic+0x58>
 800385e:	2300      	movs	r3, #0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003868:	f383 8811 	msr	BASEPRI, r3
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f3bf 8f4f 	dsb	sy
 8003874:	623b      	str	r3, [r7, #32]
}
 8003876:	bf00      	nop
 8003878:	e7fe      	b.n	8003878 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d102      	bne.n	8003886 <xQueueGenericCreateStatic+0x7e>
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <xQueueGenericCreateStatic+0x82>
 8003886:	2301      	movs	r3, #1
 8003888:	e000      	b.n	800388c <xQueueGenericCreateStatic+0x84>
 800388a:	2300      	movs	r3, #0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10a      	bne.n	80038a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	61fb      	str	r3, [r7, #28]
}
 80038a2:	bf00      	nop
 80038a4:	e7fe      	b.n	80038a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80038a6:	2350      	movs	r3, #80	; 0x50
 80038a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	2b50      	cmp	r3, #80	; 0x50
 80038ae:	d00a      	beq.n	80038c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	61bb      	str	r3, [r7, #24]
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80038c6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00d      	beq.n	80038ee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80038d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80038da:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80038de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	4613      	mov	r3, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68b9      	ldr	r1, [r7, #8]
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 f805 	bl	80038f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3730      	adds	r7, #48	; 0x30
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
 8003904:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d103      	bne.n	8003914 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	e002      	b.n	800391a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003914:	69bb      	ldr	r3, [r7, #24]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003926:	2101      	movs	r1, #1
 8003928:	69b8      	ldr	r0, [r7, #24]
 800392a:	f7ff ff05 	bl	8003738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08e      	sub	sp, #56	; 0x38
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800394e:	2300      	movs	r3, #0
 8003950:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <xQueueGenericSend+0x32>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <xQueueGenericSend+0x40>
 8003978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <xQueueGenericSend+0x44>
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <xQueueGenericSend+0x46>
 8003984:	2300      	movs	r3, #0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <xQueueGenericSend+0x60>
	__asm volatile
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800399c:	bf00      	nop
 800399e:	e7fe      	b.n	800399e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d103      	bne.n	80039ae <xQueueGenericSend+0x6e>
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d101      	bne.n	80039b2 <xQueueGenericSend+0x72>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <xQueueGenericSend+0x74>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10a      	bne.n	80039ce <xQueueGenericSend+0x8e>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	623b      	str	r3, [r7, #32]
}
 80039ca:	bf00      	nop
 80039cc:	e7fe      	b.n	80039cc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039ce:	f001 f9bd 	bl	8004d4c <xTaskGetSchedulerState>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d102      	bne.n	80039de <xQueueGenericSend+0x9e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <xQueueGenericSend+0xa2>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <xQueueGenericSend+0xa4>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10a      	bne.n	80039fe <xQueueGenericSend+0xbe>
	__asm volatile
 80039e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ec:	f383 8811 	msr	BASEPRI, r3
 80039f0:	f3bf 8f6f 	isb	sy
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	61fb      	str	r3, [r7, #28]
}
 80039fa:	bf00      	nop
 80039fc:	e7fe      	b.n	80039fc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039fe:	f001 ff01 	bl	8005804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <xQueueGenericSend+0xd4>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d129      	bne.n	8003a68 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a1a:	f000 fa0b 	bl	8003e34 <prvCopyDataToQueue>
 8003a1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d010      	beq.n	8003a4a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	3324      	adds	r3, #36	; 0x24
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 ffcf 	bl	80049d0 <xTaskRemoveFromEventList>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d013      	beq.n	8003a60 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a38:	4b3f      	ldr	r3, [pc, #252]	; (8003b38 <xQueueGenericSend+0x1f8>)
 8003a3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	f3bf 8f6f 	isb	sy
 8003a48:	e00a      	b.n	8003a60 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a50:	4b39      	ldr	r3, [pc, #228]	; (8003b38 <xQueueGenericSend+0x1f8>)
 8003a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a60:	f001 ff00 	bl	8005864 <vPortExitCritical>
				return pdPASS;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e063      	b.n	8003b30 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d103      	bne.n	8003a76 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a6e:	f001 fef9 	bl	8005864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e05c      	b.n	8003b30 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a7c:	f107 0314 	add.w	r3, r7, #20
 8003a80:	4618      	mov	r0, r3
 8003a82:	f001 f809 	bl	8004a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a86:	2301      	movs	r3, #1
 8003a88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a8a:	f001 feeb 	bl	8005864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a8e:	f000 fd7b 	bl	8004588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a92:	f001 feb7 	bl	8005804 <vPortEnterCritical>
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a9c:	b25b      	sxtb	r3, r3
 8003a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa2:	d103      	bne.n	8003aac <xQueueGenericSend+0x16c>
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ab2:	b25b      	sxtb	r3, r3
 8003ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab8:	d103      	bne.n	8003ac2 <xQueueGenericSend+0x182>
 8003aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ac2:	f001 fecf 	bl	8005864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ac6:	1d3a      	adds	r2, r7, #4
 8003ac8:	f107 0314 	add.w	r3, r7, #20
 8003acc:	4611      	mov	r1, r2
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 fff8 	bl	8004ac4 <xTaskCheckForTimeOut>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d124      	bne.n	8003b24 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003adc:	f000 faa2 	bl	8004024 <prvIsQueueFull>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d018      	beq.n	8003b18 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	3310      	adds	r3, #16
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	4611      	mov	r1, r2
 8003aee:	4618      	mov	r0, r3
 8003af0:	f000 ff1e 	bl	8004930 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003af4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003af6:	f000 fa2d 	bl	8003f54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003afa:	f000 fd53 	bl	80045a4 <xTaskResumeAll>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f47f af7c 	bne.w	80039fe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003b06:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <xQueueGenericSend+0x1f8>)
 8003b08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b0c:	601a      	str	r2, [r3, #0]
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	e772      	b.n	80039fe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b1a:	f000 fa1b 	bl	8003f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b1e:	f000 fd41 	bl	80045a4 <xTaskResumeAll>
 8003b22:	e76c      	b.n	80039fe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b26:	f000 fa15 	bl	8003f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b2a:	f000 fd3b 	bl	80045a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b2e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3738      	adds	r7, #56	; 0x38
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	e000ed04 	.word	0xe000ed04

08003b3c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b090      	sub	sp, #64	; 0x40
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b58:	f383 8811 	msr	BASEPRI, r3
 8003b5c:	f3bf 8f6f 	isb	sy
 8003b60:	f3bf 8f4f 	dsb	sy
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b66:	bf00      	nop
 8003b68:	e7fe      	b.n	8003b68 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d103      	bne.n	8003b78 <xQueueGenericSendFromISR+0x3c>
 8003b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <xQueueGenericSendFromISR+0x40>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <xQueueGenericSendFromISR+0x42>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10a      	bne.n	8003b98 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b94:	bf00      	nop
 8003b96:	e7fe      	b.n	8003b96 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d103      	bne.n	8003ba6 <xQueueGenericSendFromISR+0x6a>
 8003b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <xQueueGenericSendFromISR+0x6e>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueGenericSendFromISR+0x70>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	623b      	str	r3, [r7, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bc6:	f001 feff 	bl	80059c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003bca:	f3ef 8211 	mrs	r2, BASEPRI
 8003bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd2:	f383 8811 	msr	BASEPRI, r3
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	f3bf 8f4f 	dsb	sy
 8003bde:	61fa      	str	r2, [r7, #28]
 8003be0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003be2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003be4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d302      	bcc.n	8003bf8 <xQueueGenericSendFromISR+0xbc>
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d12f      	bne.n	8003c58 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	68b9      	ldr	r1, [r7, #8]
 8003c0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003c0e:	f000 f911 	bl	8003e34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c12:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1a:	d112      	bne.n	8003c42 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d016      	beq.n	8003c52 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c26:	3324      	adds	r3, #36	; 0x24
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fed1 	bl	80049d0 <xTaskRemoveFromEventList>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00e      	beq.n	8003c52 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	e007      	b.n	8003c52 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c42:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003c46:	3301      	adds	r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	b25a      	sxtb	r2, r3
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c52:	2301      	movs	r3, #1
 8003c54:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003c56:	e001      	b.n	8003c5c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c5e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3740      	adds	r7, #64	; 0x40
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08c      	sub	sp, #48	; 0x30
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10a      	bne.n	8003ca4 <xQueueReceive+0x30>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	623b      	str	r3, [r7, #32]
}
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d103      	bne.n	8003cb2 <xQueueReceive+0x3e>
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <xQueueReceive+0x42>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e000      	b.n	8003cb8 <xQueueReceive+0x44>
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d10a      	bne.n	8003cd2 <xQueueReceive+0x5e>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	61fb      	str	r3, [r7, #28]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cd2:	f001 f83b 	bl	8004d4c <xTaskGetSchedulerState>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d102      	bne.n	8003ce2 <xQueueReceive+0x6e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <xQueueReceive+0x72>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <xQueueReceive+0x74>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10a      	bne.n	8003d02 <xQueueReceive+0x8e>
	__asm volatile
 8003cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf0:	f383 8811 	msr	BASEPRI, r3
 8003cf4:	f3bf 8f6f 	isb	sy
 8003cf8:	f3bf 8f4f 	dsb	sy
 8003cfc:	61bb      	str	r3, [r7, #24]
}
 8003cfe:	bf00      	nop
 8003d00:	e7fe      	b.n	8003d00 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d02:	f001 fd7f 	bl	8005804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d0a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d01f      	beq.n	8003d52 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d12:	68b9      	ldr	r1, [r7, #8]
 8003d14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d16:	f000 f8f7 	bl	8003f08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	1e5a      	subs	r2, r3, #1
 8003d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d20:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00f      	beq.n	8003d4a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2c:	3310      	adds	r3, #16
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fe4e 	bl	80049d0 <xTaskRemoveFromEventList>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d3a:	4b3d      	ldr	r3, [pc, #244]	; (8003e30 <xQueueReceive+0x1bc>)
 8003d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d4a:	f001 fd8b 	bl	8005864 <vPortExitCritical>
				return pdPASS;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e069      	b.n	8003e26 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d58:	f001 fd84 	bl	8005864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	e062      	b.n	8003e26 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d66:	f107 0310 	add.w	r3, r7, #16
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 fe94 	bl	8004a98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d70:	2301      	movs	r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d74:	f001 fd76 	bl	8005864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d78:	f000 fc06 	bl	8004588 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d7c:	f001 fd42 	bl	8005804 <vPortEnterCritical>
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d86:	b25b      	sxtb	r3, r3
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d103      	bne.n	8003d96 <xQueueReceive+0x122>
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d9c:	b25b      	sxtb	r3, r3
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da2:	d103      	bne.n	8003dac <xQueueReceive+0x138>
 8003da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dac:	f001 fd5a 	bl	8005864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003db0:	1d3a      	adds	r2, r7, #4
 8003db2:	f107 0310 	add.w	r3, r7, #16
 8003db6:	4611      	mov	r1, r2
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fe83 	bl	8004ac4 <xTaskCheckForTimeOut>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d123      	bne.n	8003e0c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dc6:	f000 f917 	bl	8003ff8 <prvIsQueueEmpty>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d017      	beq.n	8003e00 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	3324      	adds	r3, #36	; 0x24
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	4611      	mov	r1, r2
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fda9 	bl	8004930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003de0:	f000 f8b8 	bl	8003f54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003de4:	f000 fbde 	bl	80045a4 <xTaskResumeAll>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d189      	bne.n	8003d02 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003dee:	4b10      	ldr	r3, [pc, #64]	; (8003e30 <xQueueReceive+0x1bc>)
 8003df0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	f3bf 8f4f 	dsb	sy
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	e780      	b.n	8003d02 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e02:	f000 f8a7 	bl	8003f54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e06:	f000 fbcd 	bl	80045a4 <xTaskResumeAll>
 8003e0a:	e77a      	b.n	8003d02 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e0e:	f000 f8a1 	bl	8003f54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e12:	f000 fbc7 	bl	80045a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e18:	f000 f8ee 	bl	8003ff8 <prvIsQueueEmpty>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f43f af6f 	beq.w	8003d02 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3730      	adds	r7, #48	; 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b086      	sub	sp, #24
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d14d      	bne.n	8003ef6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 ff92 	bl	8004d88 <xTaskPriorityDisinherit>
 8003e64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	e043      	b.n	8003ef6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d119      	bne.n	8003ea8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6858      	ldr	r0, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	f001 fff0 	bl	8005e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	441a      	add	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d32b      	bcc.n	8003ef6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	e026      	b.n	8003ef6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	68d8      	ldr	r0, [r3, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	f001 ffd6 	bl	8005e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	68da      	ldr	r2, [r3, #12]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	441a      	add	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d207      	bcs.n	8003ee4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003edc:	425b      	negs	r3, r3
 8003ede:	441a      	add	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d105      	bne.n	8003ef6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003efe:	697b      	ldr	r3, [r7, #20]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3718      	adds	r7, #24
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d018      	beq.n	8003f4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f22:	441a      	add	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d303      	bcc.n	8003f3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	68d9      	ldr	r1, [r3, #12]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	461a      	mov	r2, r3
 8003f46:	6838      	ldr	r0, [r7, #0]
 8003f48:	f001 ff8c 	bl	8005e64 <memcpy>
	}
}
 8003f4c:	bf00      	nop
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003f5c:	f001 fc52 	bl	8005804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f68:	e011      	b.n	8003f8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d012      	beq.n	8003f98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3324      	adds	r3, #36	; 0x24
 8003f76:	4618      	mov	r0, r3
 8003f78:	f000 fd2a 	bl	80049d0 <xTaskRemoveFromEventList>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003f82:	f000 fe01 	bl	8004b88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003f86:	7bfb      	ldrb	r3, [r7, #15]
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	dce9      	bgt.n	8003f6a <prvUnlockQueue+0x16>
 8003f96:	e000      	b.n	8003f9a <prvUnlockQueue+0x46>
					break;
 8003f98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	22ff      	movs	r2, #255	; 0xff
 8003f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003fa2:	f001 fc5f 	bl	8005864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003fa6:	f001 fc2d 	bl	8005804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fb2:	e011      	b.n	8003fd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d012      	beq.n	8003fe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3310      	adds	r3, #16
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fd05 	bl	80049d0 <xTaskRemoveFromEventList>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003fcc:	f000 fddc 	bl	8004b88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003fd0:	7bbb      	ldrb	r3, [r7, #14]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003fd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	dce9      	bgt.n	8003fb4 <prvUnlockQueue+0x60>
 8003fe0:	e000      	b.n	8003fe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003fe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	22ff      	movs	r2, #255	; 0xff
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003fec:	f001 fc3a 	bl	8005864 <vPortExitCritical>
}
 8003ff0:	bf00      	nop
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004000:	f001 fc00 	bl	8005804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004008:	2b00      	cmp	r3, #0
 800400a:	d102      	bne.n	8004012 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800400c:	2301      	movs	r3, #1
 800400e:	60fb      	str	r3, [r7, #12]
 8004010:	e001      	b.n	8004016 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004012:	2300      	movs	r3, #0
 8004014:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004016:	f001 fc25 	bl	8005864 <vPortExitCritical>

	return xReturn;
 800401a:	68fb      	ldr	r3, [r7, #12]
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800402c:	f001 fbea 	bl	8005804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	429a      	cmp	r2, r3
 800403a:	d102      	bne.n	8004042 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800403c:	2301      	movs	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	e001      	b.n	8004046 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004046:	f001 fc0d 	bl	8005864 <vPortExitCritical>

	return xReturn;
 800404a:	68fb      	ldr	r3, [r7, #12]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e014      	b.n	800408e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004064:	4a0f      	ldr	r2, [pc, #60]	; (80040a4 <vQueueAddToRegistry+0x50>)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10b      	bne.n	8004088 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004070:	490c      	ldr	r1, [pc, #48]	; (80040a4 <vQueueAddToRegistry+0x50>)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	683a      	ldr	r2, [r7, #0]
 8004076:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <vQueueAddToRegistry+0x50>)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	4413      	add	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004086:	e006      	b.n	8004096 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	3301      	adds	r3, #1
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2b07      	cmp	r3, #7
 8004092:	d9e7      	bls.n	8004064 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000810 	.word	0x20000810

080040a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80040b8:	f001 fba4 	bl	8005804 <vPortEnterCritical>
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040c2:	b25b      	sxtb	r3, r3
 80040c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c8:	d103      	bne.n	80040d2 <vQueueWaitForMessageRestricted+0x2a>
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d8:	b25b      	sxtb	r3, r3
 80040da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040de:	d103      	bne.n	80040e8 <vQueueWaitForMessageRestricted+0x40>
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040e8:	f001 fbbc 	bl	8005864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d106      	bne.n	8004102 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3324      	adds	r3, #36	; 0x24
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fc3b 	bl	8004978 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7ff ff26 	bl	8003f54 <prvUnlockQueue>
	}
 8004108:	bf00      	nop
 800410a:	3718      	adds	r7, #24
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08e      	sub	sp, #56	; 0x38
 8004114:	af04      	add	r7, sp, #16
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10a      	bne.n	800413a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	623b      	str	r3, [r7, #32]
}
 8004136:	bf00      	nop
 8004138:	e7fe      	b.n	8004138 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10a      	bne.n	8004156 <xTaskCreateStatic+0x46>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	61fb      	str	r3, [r7, #28]
}
 8004152:	bf00      	nop
 8004154:	e7fe      	b.n	8004154 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004156:	235c      	movs	r3, #92	; 0x5c
 8004158:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b5c      	cmp	r3, #92	; 0x5c
 800415e:	d00a      	beq.n	8004176 <xTaskCreateStatic+0x66>
	__asm volatile
 8004160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004164:	f383 8811 	msr	BASEPRI, r3
 8004168:	f3bf 8f6f 	isb	sy
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	61bb      	str	r3, [r7, #24]
}
 8004172:	bf00      	nop
 8004174:	e7fe      	b.n	8004174 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004176:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	2b00      	cmp	r3, #0
 800417c:	d01e      	beq.n	80041bc <xTaskCreateStatic+0xac>
 800417e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01b      	beq.n	80041bc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800418c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	2202      	movs	r2, #2
 8004192:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004196:	2300      	movs	r3, #0
 8004198:	9303      	str	r3, [sp, #12]
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	9302      	str	r3, [sp, #8]
 800419e:	f107 0314 	add.w	r3, r7, #20
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	68b9      	ldr	r1, [r7, #8]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f850 	bl	8004254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041b6:	f000 f8dd 	bl	8004374 <prvAddNewTaskToReadyList>
 80041ba:	e001      	b.n	80041c0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80041c0:	697b      	ldr	r3, [r7, #20]
	}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3728      	adds	r7, #40	; 0x28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b08c      	sub	sp, #48	; 0x30
 80041ce:	af04      	add	r7, sp, #16
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	603b      	str	r3, [r7, #0]
 80041d6:	4613      	mov	r3, r2
 80041d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f001 fc32 	bl	8005a48 <pvPortMalloc>
 80041e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00e      	beq.n	800420a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041ec:	205c      	movs	r0, #92	; 0x5c
 80041ee:	f001 fc2b 	bl	8005a48 <pvPortMalloc>
 80041f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004200:	e005      	b.n	800420e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004202:	6978      	ldr	r0, [r7, #20]
 8004204:	f001 fcec 	bl	8005be0 <vPortFree>
 8004208:	e001      	b.n	800420e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800420a:	2300      	movs	r3, #0
 800420c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d017      	beq.n	8004244 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800421c:	88fa      	ldrh	r2, [r7, #6]
 800421e:	2300      	movs	r3, #0
 8004220:	9303      	str	r3, [sp, #12]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	9302      	str	r3, [sp, #8]
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	68b9      	ldr	r1, [r7, #8]
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f80e 	bl	8004254 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004238:	69f8      	ldr	r0, [r7, #28]
 800423a:	f000 f89b 	bl	8004374 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800423e:	2301      	movs	r3, #1
 8004240:	61bb      	str	r3, [r7, #24]
 8004242:	e002      	b.n	800424a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004244:	f04f 33ff 	mov.w	r3, #4294967295
 8004248:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800424a:	69bb      	ldr	r3, [r7, #24]
	}
 800424c:	4618      	mov	r0, r3
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b088      	sub	sp, #32
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	461a      	mov	r2, r3
 800426c:	21a5      	movs	r1, #165	; 0xa5
 800426e:	f001 fe07 	bl	8005e80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800427c:	3b01      	subs	r3, #1
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4413      	add	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f023 0307 	bic.w	r3, r3, #7
 800428a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f003 0307 	and.w	r3, r3, #7
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <prvInitialiseNewTask+0x58>
	__asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	617b      	str	r3, [r7, #20]
}
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01f      	beq.n	80042f2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
 80042b6:	e012      	b.n	80042de <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	4413      	add	r3, r2
 80042be:	7819      	ldrb	r1, [r3, #0]
 80042c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	3334      	adds	r3, #52	; 0x34
 80042c8:	460a      	mov	r2, r1
 80042ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	4413      	add	r3, r2
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d006      	beq.n	80042e6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3301      	adds	r3, #1
 80042dc:	61fb      	str	r3, [r7, #28]
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d9e9      	bls.n	80042b8 <prvInitialiseNewTask+0x64>
 80042e4:	e000      	b.n	80042e8 <prvInitialiseNewTask+0x94>
			{
				break;
 80042e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	2200      	movs	r2, #0
 80042ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042f0:	e003      	b.n	80042fa <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	2b37      	cmp	r3, #55	; 0x37
 80042fe:	d901      	bls.n	8004304 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004300:	2337      	movs	r3, #55	; 0x37
 8004302:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800430a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004312:	2200      	movs	r2, #0
 8004314:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004318:	3304      	adds	r3, #4
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff f978 	bl	8003610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	3318      	adds	r3, #24
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff f973 	bl	8003610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800432a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800432c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800432e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004338:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800433a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800433c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004342:	2200      	movs	r2, #0
 8004344:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	69b8      	ldr	r0, [r7, #24]
 8004354:	f001 f928 	bl	80055a8 <pxPortInitialiseStack>
 8004358:	4602      	mov	r2, r0
 800435a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800435c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	d002      	beq.n	800436a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004368:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800436a:	bf00      	nop
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
	...

08004374 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800437c:	f001 fa42 	bl	8005804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004380:	4b2d      	ldr	r3, [pc, #180]	; (8004438 <prvAddNewTaskToReadyList+0xc4>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3301      	adds	r3, #1
 8004386:	4a2c      	ldr	r2, [pc, #176]	; (8004438 <prvAddNewTaskToReadyList+0xc4>)
 8004388:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800438a:	4b2c      	ldr	r3, [pc, #176]	; (800443c <prvAddNewTaskToReadyList+0xc8>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004392:	4a2a      	ldr	r2, [pc, #168]	; (800443c <prvAddNewTaskToReadyList+0xc8>)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004398:	4b27      	ldr	r3, [pc, #156]	; (8004438 <prvAddNewTaskToReadyList+0xc4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d110      	bne.n	80043c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80043a0:	f000 fc16 	bl	8004bd0 <prvInitialiseTaskLists>
 80043a4:	e00d      	b.n	80043c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043a6:	4b26      	ldr	r3, [pc, #152]	; (8004440 <prvAddNewTaskToReadyList+0xcc>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d109      	bne.n	80043c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043ae:	4b23      	ldr	r3, [pc, #140]	; (800443c <prvAddNewTaskToReadyList+0xc8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d802      	bhi.n	80043c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043bc:	4a1f      	ldr	r2, [pc, #124]	; (800443c <prvAddNewTaskToReadyList+0xc8>)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <prvAddNewTaskToReadyList+0xd0>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	3301      	adds	r3, #1
 80043c8:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <prvAddNewTaskToReadyList+0xd0>)
 80043ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043cc:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <prvAddNewTaskToReadyList+0xd0>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4b1b      	ldr	r3, [pc, #108]	; (8004448 <prvAddNewTaskToReadyList+0xd4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d903      	bls.n	80043e8 <prvAddNewTaskToReadyList+0x74>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e4:	4a18      	ldr	r2, [pc, #96]	; (8004448 <prvAddNewTaskToReadyList+0xd4>)
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ec:	4613      	mov	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4a15      	ldr	r2, [pc, #84]	; (800444c <prvAddNewTaskToReadyList+0xd8>)
 80043f6:	441a      	add	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	4619      	mov	r1, r3
 80043fe:	4610      	mov	r0, r2
 8004400:	f7ff f913 	bl	800362a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004404:	f001 fa2e 	bl	8005864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004408:	4b0d      	ldr	r3, [pc, #52]	; (8004440 <prvAddNewTaskToReadyList+0xcc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00e      	beq.n	800442e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004410:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvAddNewTaskToReadyList+0xc8>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441a:	429a      	cmp	r2, r3
 800441c:	d207      	bcs.n	800442e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800441e:	4b0c      	ldr	r3, [pc, #48]	; (8004450 <prvAddNewTaskToReadyList+0xdc>)
 8004420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004424:	601a      	str	r2, [r3, #0]
 8004426:	f3bf 8f4f 	dsb	sy
 800442a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800442e:	bf00      	nop
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	20000d24 	.word	0x20000d24
 800443c:	20000850 	.word	0x20000850
 8004440:	20000d30 	.word	0x20000d30
 8004444:	20000d40 	.word	0x20000d40
 8004448:	20000d2c 	.word	0x20000d2c
 800444c:	20000854 	.word	0x20000854
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800445c:	2300      	movs	r3, #0
 800445e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d017      	beq.n	8004496 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004466:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <vTaskDelay+0x60>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <vTaskDelay+0x30>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	60bb      	str	r3, [r7, #8]
}
 8004480:	bf00      	nop
 8004482:	e7fe      	b.n	8004482 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004484:	f000 f880 	bl	8004588 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004488:	2100      	movs	r1, #0
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fcea 	bl	8004e64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004490:	f000 f888 	bl	80045a4 <xTaskResumeAll>
 8004494:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d107      	bne.n	80044ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800449c:	4b06      	ldr	r3, [pc, #24]	; (80044b8 <vTaskDelay+0x64>)
 800449e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	20000d4c 	.word	0x20000d4c
 80044b8:	e000ed04 	.word	0xe000ed04

080044bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	; 0x28
 80044c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044c2:	2300      	movs	r3, #0
 80044c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044ca:	463a      	mov	r2, r7
 80044cc:	1d39      	adds	r1, r7, #4
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff f848 	bl	8003568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044d8:	6839      	ldr	r1, [r7, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68ba      	ldr	r2, [r7, #8]
 80044de:	9202      	str	r2, [sp, #8]
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	2300      	movs	r3, #0
 80044e8:	460a      	mov	r2, r1
 80044ea:	4921      	ldr	r1, [pc, #132]	; (8004570 <vTaskStartScheduler+0xb4>)
 80044ec:	4821      	ldr	r0, [pc, #132]	; (8004574 <vTaskStartScheduler+0xb8>)
 80044ee:	f7ff fe0f 	bl	8004110 <xTaskCreateStatic>
 80044f2:	4603      	mov	r3, r0
 80044f4:	4a20      	ldr	r2, [pc, #128]	; (8004578 <vTaskStartScheduler+0xbc>)
 80044f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044f8:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <vTaskStartScheduler+0xbc>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004500:	2301      	movs	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	e001      	b.n	800450a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d102      	bne.n	8004516 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004510:	f000 fcfc 	bl	8004f0c <xTimerCreateTimerTask>
 8004514:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d116      	bne.n	800454a <vTaskStartScheduler+0x8e>
	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	613b      	str	r3, [r7, #16]
}
 800452e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004530:	4b12      	ldr	r3, [pc, #72]	; (800457c <vTaskStartScheduler+0xc0>)
 8004532:	f04f 32ff 	mov.w	r2, #4294967295
 8004536:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004538:	4b11      	ldr	r3, [pc, #68]	; (8004580 <vTaskStartScheduler+0xc4>)
 800453a:	2201      	movs	r2, #1
 800453c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800453e:	4b11      	ldr	r3, [pc, #68]	; (8004584 <vTaskStartScheduler+0xc8>)
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004544:	f001 f8bc 	bl	80056c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004548:	e00e      	b.n	8004568 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d10a      	bne.n	8004568 <vTaskStartScheduler+0xac>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	60fb      	str	r3, [r7, #12]
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <vTaskStartScheduler+0xaa>
}
 8004568:	bf00      	nop
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	08005eec 	.word	0x08005eec
 8004574:	08004ba1 	.word	0x08004ba1
 8004578:	20000d48 	.word	0x20000d48
 800457c:	20000d44 	.word	0x20000d44
 8004580:	20000d30 	.word	0x20000d30
 8004584:	20000d28 	.word	0x20000d28

08004588 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800458c:	4b04      	ldr	r3, [pc, #16]	; (80045a0 <vTaskSuspendAll+0x18>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3301      	adds	r3, #1
 8004592:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <vTaskSuspendAll+0x18>)
 8004594:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004596:	bf00      	nop
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	20000d4c 	.word	0x20000d4c

080045a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045b2:	4b42      	ldr	r3, [pc, #264]	; (80046bc <xTaskResumeAll+0x118>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <xTaskResumeAll+0x2c>
	__asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	603b      	str	r3, [r7, #0]
}
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045d0:	f001 f918 	bl	8005804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045d4:	4b39      	ldr	r3, [pc, #228]	; (80046bc <xTaskResumeAll+0x118>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3b01      	subs	r3, #1
 80045da:	4a38      	ldr	r2, [pc, #224]	; (80046bc <xTaskResumeAll+0x118>)
 80045dc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045de:	4b37      	ldr	r3, [pc, #220]	; (80046bc <xTaskResumeAll+0x118>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d162      	bne.n	80046ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045e6:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <xTaskResumeAll+0x11c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d05e      	beq.n	80046ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ee:	e02f      	b.n	8004650 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f0:	4b34      	ldr	r3, [pc, #208]	; (80046c4 <xTaskResumeAll+0x120>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3318      	adds	r3, #24
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff f871 	bl	80036e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3304      	adds	r3, #4
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff f86c 	bl	80036e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <xTaskResumeAll+0x124>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d903      	bls.n	8004620 <xTaskResumeAll+0x7c>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	4a2a      	ldr	r2, [pc, #168]	; (80046c8 <xTaskResumeAll+0x124>)
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4a27      	ldr	r2, [pc, #156]	; (80046cc <xTaskResumeAll+0x128>)
 800462e:	441a      	add	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fe fff7 	bl	800362a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004640:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <xTaskResumeAll+0x12c>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	429a      	cmp	r2, r3
 8004648:	d302      	bcc.n	8004650 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800464a:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <xTaskResumeAll+0x130>)
 800464c:	2201      	movs	r2, #1
 800464e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004650:	4b1c      	ldr	r3, [pc, #112]	; (80046c4 <xTaskResumeAll+0x120>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1cb      	bne.n	80045f0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800465e:	f000 fb55 	bl	8004d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004662:	4b1d      	ldr	r3, [pc, #116]	; (80046d8 <xTaskResumeAll+0x134>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d010      	beq.n	8004690 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800466e:	f000 f847 	bl	8004700 <xTaskIncrementTick>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004678:	4b16      	ldr	r3, [pc, #88]	; (80046d4 <xTaskResumeAll+0x130>)
 800467a:	2201      	movs	r2, #1
 800467c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	3b01      	subs	r3, #1
 8004682:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1f1      	bne.n	800466e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <xTaskResumeAll+0x134>)
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004690:	4b10      	ldr	r3, [pc, #64]	; (80046d4 <xTaskResumeAll+0x130>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004698:	2301      	movs	r3, #1
 800469a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800469c:	4b0f      	ldr	r3, [pc, #60]	; (80046dc <xTaskResumeAll+0x138>)
 800469e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046ac:	f001 f8da 	bl	8005864 <vPortExitCritical>

	return xAlreadyYielded;
 80046b0:	68bb      	ldr	r3, [r7, #8]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	20000d4c 	.word	0x20000d4c
 80046c0:	20000d24 	.word	0x20000d24
 80046c4:	20000ce4 	.word	0x20000ce4
 80046c8:	20000d2c 	.word	0x20000d2c
 80046cc:	20000854 	.word	0x20000854
 80046d0:	20000850 	.word	0x20000850
 80046d4:	20000d38 	.word	0x20000d38
 80046d8:	20000d34 	.word	0x20000d34
 80046dc:	e000ed04 	.word	0xe000ed04

080046e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046e6:	4b05      	ldr	r3, [pc, #20]	; (80046fc <xTaskGetTickCount+0x1c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046ec:	687b      	ldr	r3, [r7, #4]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	20000d28 	.word	0x20000d28

08004700 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800470a:	4b4f      	ldr	r3, [pc, #316]	; (8004848 <xTaskIncrementTick+0x148>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 808f 	bne.w	8004832 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004714:	4b4d      	ldr	r3, [pc, #308]	; (800484c <xTaskIncrementTick+0x14c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3301      	adds	r3, #1
 800471a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800471c:	4a4b      	ldr	r2, [pc, #300]	; (800484c <xTaskIncrementTick+0x14c>)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d120      	bne.n	800476a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004728:	4b49      	ldr	r3, [pc, #292]	; (8004850 <xTaskIncrementTick+0x150>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00a      	beq.n	8004748 <xTaskIncrementTick+0x48>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	603b      	str	r3, [r7, #0]
}
 8004744:	bf00      	nop
 8004746:	e7fe      	b.n	8004746 <xTaskIncrementTick+0x46>
 8004748:	4b41      	ldr	r3, [pc, #260]	; (8004850 <xTaskIncrementTick+0x150>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	4b41      	ldr	r3, [pc, #260]	; (8004854 <xTaskIncrementTick+0x154>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a3f      	ldr	r2, [pc, #252]	; (8004850 <xTaskIncrementTick+0x150>)
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	4a3f      	ldr	r2, [pc, #252]	; (8004854 <xTaskIncrementTick+0x154>)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	4b3e      	ldr	r3, [pc, #248]	; (8004858 <xTaskIncrementTick+0x158>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	3301      	adds	r3, #1
 8004762:	4a3d      	ldr	r2, [pc, #244]	; (8004858 <xTaskIncrementTick+0x158>)
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	f000 fad1 	bl	8004d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800476a:	4b3c      	ldr	r3, [pc, #240]	; (800485c <xTaskIncrementTick+0x15c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	429a      	cmp	r2, r3
 8004772:	d349      	bcc.n	8004808 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <xTaskIncrementTick+0x150>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d104      	bne.n	8004788 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477e:	4b37      	ldr	r3, [pc, #220]	; (800485c <xTaskIncrementTick+0x15c>)
 8004780:	f04f 32ff 	mov.w	r2, #4294967295
 8004784:	601a      	str	r2, [r3, #0]
					break;
 8004786:	e03f      	b.n	8004808 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004788:	4b31      	ldr	r3, [pc, #196]	; (8004850 <xTaskIncrementTick+0x150>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	429a      	cmp	r2, r3
 800479e:	d203      	bcs.n	80047a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80047a0:	4a2e      	ldr	r2, [pc, #184]	; (800485c <xTaskIncrementTick+0x15c>)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047a6:	e02f      	b.n	8004808 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe ff99 	bl	80036e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d004      	beq.n	80047c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	3318      	adds	r3, #24
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe ff90 	bl	80036e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	4b25      	ldr	r3, [pc, #148]	; (8004860 <xTaskIncrementTick+0x160>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d903      	bls.n	80047d8 <xTaskIncrementTick+0xd8>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	4a22      	ldr	r2, [pc, #136]	; (8004860 <xTaskIncrementTick+0x160>)
 80047d6:	6013      	str	r3, [r2, #0]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	4a1f      	ldr	r2, [pc, #124]	; (8004864 <xTaskIncrementTick+0x164>)
 80047e6:	441a      	add	r2, r3
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f7fe ff1b 	bl	800362a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f8:	4b1b      	ldr	r3, [pc, #108]	; (8004868 <xTaskIncrementTick+0x168>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fe:	429a      	cmp	r2, r3
 8004800:	d3b8      	bcc.n	8004774 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004802:	2301      	movs	r3, #1
 8004804:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004806:	e7b5      	b.n	8004774 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004808:	4b17      	ldr	r3, [pc, #92]	; (8004868 <xTaskIncrementTick+0x168>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480e:	4915      	ldr	r1, [pc, #84]	; (8004864 <xTaskIncrementTick+0x164>)
 8004810:	4613      	mov	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	440b      	add	r3, r1
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d901      	bls.n	8004824 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004820:	2301      	movs	r3, #1
 8004822:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <xTaskIncrementTick+0x16c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d007      	beq.n	800483c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800482c:	2301      	movs	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e004      	b.n	800483c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004832:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <xTaskIncrementTick+0x170>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <xTaskIncrementTick+0x170>)
 800483a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800483c:	697b      	ldr	r3, [r7, #20]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3718      	adds	r7, #24
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	20000d4c 	.word	0x20000d4c
 800484c:	20000d28 	.word	0x20000d28
 8004850:	20000cdc 	.word	0x20000cdc
 8004854:	20000ce0 	.word	0x20000ce0
 8004858:	20000d3c 	.word	0x20000d3c
 800485c:	20000d44 	.word	0x20000d44
 8004860:	20000d2c 	.word	0x20000d2c
 8004864:	20000854 	.word	0x20000854
 8004868:	20000850 	.word	0x20000850
 800486c:	20000d38 	.word	0x20000d38
 8004870:	20000d34 	.word	0x20000d34

08004874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004874:	b480      	push	{r7}
 8004876:	b085      	sub	sp, #20
 8004878:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800487a:	4b28      	ldr	r3, [pc, #160]	; (800491c <vTaskSwitchContext+0xa8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <vTaskSwitchContext+0xac>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004888:	e041      	b.n	800490e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800488a:	4b25      	ldr	r3, [pc, #148]	; (8004920 <vTaskSwitchContext+0xac>)
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004890:	4b24      	ldr	r3, [pc, #144]	; (8004924 <vTaskSwitchContext+0xb0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e010      	b.n	80048ba <vTaskSwitchContext+0x46>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <vTaskSwitchContext+0x40>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	607b      	str	r3, [r7, #4]
}
 80048b0:	bf00      	nop
 80048b2:	e7fe      	b.n	80048b2 <vTaskSwitchContext+0x3e>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	491b      	ldr	r1, [pc, #108]	; (8004928 <vTaskSwitchContext+0xb4>)
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	4613      	mov	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0e4      	beq.n	8004898 <vTaskSwitchContext+0x24>
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4a13      	ldr	r2, [pc, #76]	; (8004928 <vTaskSwitchContext+0xb4>)
 80048da:	4413      	add	r3, r2
 80048dc:	60bb      	str	r3, [r7, #8]
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	3308      	adds	r3, #8
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d104      	bne.n	80048fe <vTaskSwitchContext+0x8a>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	605a      	str	r2, [r3, #4]
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a09      	ldr	r2, [pc, #36]	; (800492c <vTaskSwitchContext+0xb8>)
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	4a06      	ldr	r2, [pc, #24]	; (8004924 <vTaskSwitchContext+0xb0>)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6013      	str	r3, [r2, #0]
}
 800490e:	bf00      	nop
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	20000d4c 	.word	0x20000d4c
 8004920:	20000d38 	.word	0x20000d38
 8004924:	20000d2c 	.word	0x20000d2c
 8004928:	20000854 	.word	0x20000854
 800492c:	20000850 	.word	0x20000850

08004930 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	60fb      	str	r3, [r7, #12]
}
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004956:	4b07      	ldr	r3, [pc, #28]	; (8004974 <vTaskPlaceOnEventList+0x44>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3318      	adds	r3, #24
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7fe fe87 	bl	8003672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004964:	2101      	movs	r1, #1
 8004966:	6838      	ldr	r0, [r7, #0]
 8004968:	f000 fa7c 	bl	8004e64 <prvAddCurrentTaskToDelayedList>
}
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	20000850 	.word	0x20000850

08004978 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10a      	bne.n	80049a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	617b      	str	r3, [r7, #20]
}
 800499c:	bf00      	nop
 800499e:	e7fe      	b.n	800499e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <vTaskPlaceOnEventListRestricted+0x54>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3318      	adds	r3, #24
 80049a6:	4619      	mov	r1, r3
 80049a8:	68f8      	ldr	r0, [r7, #12]
 80049aa:	f7fe fe3e 	bl	800362a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80049b4:	f04f 33ff 	mov.w	r3, #4294967295
 80049b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049ba:	6879      	ldr	r1, [r7, #4]
 80049bc:	68b8      	ldr	r0, [r7, #8]
 80049be:	f000 fa51 	bl	8004e64 <prvAddCurrentTaskToDelayedList>
	}
 80049c2:	bf00      	nop
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	20000850 	.word	0x20000850

080049d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10a      	bne.n	80049fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60fb      	str	r3, [r7, #12]
}
 80049f8:	bf00      	nop
 80049fa:	e7fe      	b.n	80049fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3318      	adds	r3, #24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fe6f 	bl	80036e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a06:	4b1e      	ldr	r3, [pc, #120]	; (8004a80 <xTaskRemoveFromEventList+0xb0>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d11d      	bne.n	8004a4a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3304      	adds	r3, #4
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fe66 	bl	80036e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1c:	4b19      	ldr	r3, [pc, #100]	; (8004a84 <xTaskRemoveFromEventList+0xb4>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d903      	bls.n	8004a2c <xTaskRemoveFromEventList+0x5c>
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a28:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <xTaskRemoveFromEventList+0xb4>)
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a30:	4613      	mov	r3, r2
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <xTaskRemoveFromEventList+0xb8>)
 8004a3a:	441a      	add	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	4619      	mov	r1, r3
 8004a42:	4610      	mov	r0, r2
 8004a44:	f7fe fdf1 	bl	800362a <vListInsertEnd>
 8004a48:	e005      	b.n	8004a56 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	3318      	adds	r3, #24
 8004a4e:	4619      	mov	r1, r3
 8004a50:	480e      	ldr	r0, [pc, #56]	; (8004a8c <xTaskRemoveFromEventList+0xbc>)
 8004a52:	f7fe fdea 	bl	800362a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a5a:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <xTaskRemoveFromEventList+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d905      	bls.n	8004a70 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a68:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <xTaskRemoveFromEventList+0xc4>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	e001      	b.n	8004a74 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a74:	697b      	ldr	r3, [r7, #20]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000d4c 	.word	0x20000d4c
 8004a84:	20000d2c 	.word	0x20000d2c
 8004a88:	20000854 	.word	0x20000854
 8004a8c:	20000ce4 	.word	0x20000ce4
 8004a90:	20000850 	.word	0x20000850
 8004a94:	20000d38 	.word	0x20000d38

08004a98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004aa0:	4b06      	ldr	r3, [pc, #24]	; (8004abc <vTaskInternalSetTimeOutState+0x24>)
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004aa8:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <vTaskInternalSetTimeOutState+0x28>)
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	605a      	str	r2, [r3, #4]
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr
 8004abc:	20000d3c 	.word	0x20000d3c
 8004ac0:	20000d28 	.word	0x20000d28

08004ac4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	613b      	str	r3, [r7, #16]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d10a      	bne.n	8004b06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
}
 8004b02:	bf00      	nop
 8004b04:	e7fe      	b.n	8004b04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004b06:	f000 fe7d 	bl	8005804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <xTaskCheckForTimeOut+0xbc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d102      	bne.n	8004b2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e023      	b.n	8004b72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	4b15      	ldr	r3, [pc, #84]	; (8004b84 <xTaskCheckForTimeOut+0xc0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d007      	beq.n	8004b46 <xTaskCheckForTimeOut+0x82>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	69ba      	ldr	r2, [r7, #24]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d302      	bcc.n	8004b46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	e015      	b.n	8004b72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d20b      	bcs.n	8004b68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	1ad2      	subs	r2, r2, r3
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f7ff ff9b 	bl	8004a98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	e004      	b.n	8004b72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b72:	f000 fe77 	bl	8005864 <vPortExitCritical>

	return xReturn;
 8004b76:	69fb      	ldr	r3, [r7, #28]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000d28 	.word	0x20000d28
 8004b84:	20000d3c 	.word	0x20000d3c

08004b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b8c:	4b03      	ldr	r3, [pc, #12]	; (8004b9c <vTaskMissedYield+0x14>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000d38 	.word	0x20000d38

08004ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ba8:	f000 f852 	bl	8004c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <prvIdleTask+0x28>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d9f9      	bls.n	8004ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bb4:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <prvIdleTask+0x2c>)
 8004bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	f3bf 8f4f 	dsb	sy
 8004bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bc4:	e7f0      	b.n	8004ba8 <prvIdleTask+0x8>
 8004bc6:	bf00      	nop
 8004bc8:	20000854 	.word	0x20000854
 8004bcc:	e000ed04 	.word	0xe000ed04

08004bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	e00c      	b.n	8004bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	4413      	add	r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4a12      	ldr	r2, [pc, #72]	; (8004c30 <prvInitialiseTaskLists+0x60>)
 8004be8:	4413      	add	r3, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe fcf0 	bl	80035d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	607b      	str	r3, [r7, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2b37      	cmp	r3, #55	; 0x37
 8004bfa:	d9ef      	bls.n	8004bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004bfc:	480d      	ldr	r0, [pc, #52]	; (8004c34 <prvInitialiseTaskLists+0x64>)
 8004bfe:	f7fe fce7 	bl	80035d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c02:	480d      	ldr	r0, [pc, #52]	; (8004c38 <prvInitialiseTaskLists+0x68>)
 8004c04:	f7fe fce4 	bl	80035d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c08:	480c      	ldr	r0, [pc, #48]	; (8004c3c <prvInitialiseTaskLists+0x6c>)
 8004c0a:	f7fe fce1 	bl	80035d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c0e:	480c      	ldr	r0, [pc, #48]	; (8004c40 <prvInitialiseTaskLists+0x70>)
 8004c10:	f7fe fcde 	bl	80035d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c14:	480b      	ldr	r0, [pc, #44]	; (8004c44 <prvInitialiseTaskLists+0x74>)
 8004c16:	f7fe fcdb 	bl	80035d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <prvInitialiseTaskLists+0x78>)
 8004c1c:	4a05      	ldr	r2, [pc, #20]	; (8004c34 <prvInitialiseTaskLists+0x64>)
 8004c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c20:	4b0a      	ldr	r3, [pc, #40]	; (8004c4c <prvInitialiseTaskLists+0x7c>)
 8004c22:	4a05      	ldr	r2, [pc, #20]	; (8004c38 <prvInitialiseTaskLists+0x68>)
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000854 	.word	0x20000854
 8004c34:	20000cb4 	.word	0x20000cb4
 8004c38:	20000cc8 	.word	0x20000cc8
 8004c3c:	20000ce4 	.word	0x20000ce4
 8004c40:	20000cf8 	.word	0x20000cf8
 8004c44:	20000d10 	.word	0x20000d10
 8004c48:	20000cdc 	.word	0x20000cdc
 8004c4c:	20000ce0 	.word	0x20000ce0

08004c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b082      	sub	sp, #8
 8004c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c56:	e019      	b.n	8004c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c58:	f000 fdd4 	bl	8005804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5c:	4b10      	ldr	r3, [pc, #64]	; (8004ca0 <prvCheckTasksWaitingTermination+0x50>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe fd3b 	bl	80036e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <prvCheckTasksWaitingTermination+0x54>)
 8004c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c78:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c82:	f000 fdef 	bl	8005864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f810 	bl	8004cac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <prvCheckTasksWaitingTermination+0x58>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d1e1      	bne.n	8004c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000cf8 	.word	0x20000cf8
 8004ca4:	20000d24 	.word	0x20000d24
 8004ca8:	20000d0c 	.word	0x20000d0c

08004cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d108      	bne.n	8004cd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 ff8c 	bl	8005be0 <vPortFree>
				vPortFree( pxTCB );
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 ff89 	bl	8005be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cce:	e018      	b.n	8004d02 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d103      	bne.n	8004ce2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 ff80 	bl	8005be0 <vPortFree>
	}
 8004ce0:	e00f      	b.n	8004d02 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d00a      	beq.n	8004d02 <prvDeleteTCB+0x56>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	60fb      	str	r3, [r7, #12]
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <prvDeleteTCB+0x54>
	}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d12:	4b0c      	ldr	r3, [pc, #48]	; (8004d44 <prvResetNextTaskUnblockTime+0x38>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d104      	bne.n	8004d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d1c:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <prvResetNextTaskUnblockTime+0x3c>)
 8004d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d24:	e008      	b.n	8004d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d26:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <prvResetNextTaskUnblockTime+0x38>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a04      	ldr	r2, [pc, #16]	; (8004d48 <prvResetNextTaskUnblockTime+0x3c>)
 8004d36:	6013      	str	r3, [r2, #0]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	20000cdc 	.word	0x20000cdc
 8004d48:	20000d44 	.word	0x20000d44

08004d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <xTaskGetSchedulerState+0x34>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	607b      	str	r3, [r7, #4]
 8004d5e:	e008      	b.n	8004d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d60:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <xTaskGetSchedulerState+0x38>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d68:	2302      	movs	r3, #2
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	e001      	b.n	8004d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d72:	687b      	ldr	r3, [r7, #4]
	}
 8004d74:	4618      	mov	r0, r3
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000d30 	.word	0x20000d30
 8004d84:	20000d4c 	.word	0x20000d4c

08004d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b086      	sub	sp, #24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d056      	beq.n	8004e4c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d9e:	4b2e      	ldr	r3, [pc, #184]	; (8004e58 <xTaskPriorityDisinherit+0xd0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	693a      	ldr	r2, [r7, #16]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d00a      	beq.n	8004dbe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	60fb      	str	r3, [r7, #12]
}
 8004dba:	bf00      	nop
 8004dbc:	e7fe      	b.n	8004dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10a      	bne.n	8004ddc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dca:	f383 8811 	msr	BASEPRI, r3
 8004dce:	f3bf 8f6f 	isb	sy
 8004dd2:	f3bf 8f4f 	dsb	sy
 8004dd6:	60bb      	str	r3, [r7, #8]
}
 8004dd8:	bf00      	nop
 8004dda:	e7fe      	b.n	8004dda <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de0:	1e5a      	subs	r2, r3, #1
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d02c      	beq.n	8004e4c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d128      	bne.n	8004e4c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe fc70 	bl	80036e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1c:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <xTaskPriorityDisinherit+0xd4>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d903      	bls.n	8004e2c <xTaskPriorityDisinherit+0xa4>
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	4a0c      	ldr	r2, [pc, #48]	; (8004e5c <xTaskPriorityDisinherit+0xd4>)
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <xTaskPriorityDisinherit+0xd8>)
 8004e3a:	441a      	add	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	4619      	mov	r1, r3
 8004e42:	4610      	mov	r0, r2
 8004e44:	f7fe fbf1 	bl	800362a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e4c:	697b      	ldr	r3, [r7, #20]
	}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	20000850 	.word	0x20000850
 8004e5c:	20000d2c 	.word	0x20000d2c
 8004e60:	20000854 	.word	0x20000854

08004e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e6e:	4b21      	ldr	r3, [pc, #132]	; (8004ef4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e74:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe fc32 	bl	80036e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d10a      	bne.n	8004e9e <prvAddCurrentTaskToDelayedList+0x3a>
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d007      	beq.n	8004e9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e8e:	4b1a      	ldr	r3, [pc, #104]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3304      	adds	r3, #4
 8004e94:	4619      	mov	r1, r3
 8004e96:	4819      	ldr	r0, [pc, #100]	; (8004efc <prvAddCurrentTaskToDelayedList+0x98>)
 8004e98:	f7fe fbc7 	bl	800362a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e9c:	e026      	b.n	8004eec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ea6:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68ba      	ldr	r2, [r7, #8]
 8004eac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d209      	bcs.n	8004eca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	4b0f      	ldr	r3, [pc, #60]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f7fe fbd5 	bl	8003672 <vListInsert>
}
 8004ec8:	e010      	b.n	8004eec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004eca:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	4b0a      	ldr	r3, [pc, #40]	; (8004ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	f7fe fbcb 	bl	8003672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d202      	bcs.n	8004eec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004ee6:	4a08      	ldr	r2, [pc, #32]	; (8004f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	6013      	str	r3, [r2, #0]
}
 8004eec:	bf00      	nop
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	20000d28 	.word	0x20000d28
 8004ef8:	20000850 	.word	0x20000850
 8004efc:	20000d10 	.word	0x20000d10
 8004f00:	20000ce0 	.word	0x20000ce0
 8004f04:	20000cdc 	.word	0x20000cdc
 8004f08:	20000d44 	.word	0x20000d44

08004f0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b08a      	sub	sp, #40	; 0x28
 8004f10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004f16:	f000 fb07 	bl	8005528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004f1a:	4b1c      	ldr	r3, [pc, #112]	; (8004f8c <xTimerCreateTimerTask+0x80>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d021      	beq.n	8004f66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004f22:	2300      	movs	r3, #0
 8004f24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004f2a:	1d3a      	adds	r2, r7, #4
 8004f2c:	f107 0108 	add.w	r1, r7, #8
 8004f30:	f107 030c 	add.w	r3, r7, #12
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fb31 	bl	800359c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	9202      	str	r2, [sp, #8]
 8004f42:	9301      	str	r3, [sp, #4]
 8004f44:	2302      	movs	r3, #2
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	2300      	movs	r3, #0
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	4910      	ldr	r1, [pc, #64]	; (8004f90 <xTimerCreateTimerTask+0x84>)
 8004f4e:	4811      	ldr	r0, [pc, #68]	; (8004f94 <xTimerCreateTimerTask+0x88>)
 8004f50:	f7ff f8de 	bl	8004110 <xTaskCreateStatic>
 8004f54:	4603      	mov	r3, r0
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <xTimerCreateTimerTask+0x8c>)
 8004f58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004f5a:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <xTimerCreateTimerTask+0x8c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004f62:	2301      	movs	r3, #1
 8004f64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	613b      	str	r3, [r7, #16]
}
 8004f7e:	bf00      	nop
 8004f80:	e7fe      	b.n	8004f80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004f82:	697b      	ldr	r3, [r7, #20]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000d80 	.word	0x20000d80
 8004f90:	08005ef4 	.word	0x08005ef4
 8004f94:	080050d1 	.word	0x080050d1
 8004f98:	20000d84 	.word	0x20000d84

08004f9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
 8004fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <xTimerGenericCommand+0x2e>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	623b      	str	r3, [r7, #32]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004fca:	4b1a      	ldr	r3, [pc, #104]	; (8005034 <xTimerGenericCommand+0x98>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d02a      	beq.n	8005028 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2b05      	cmp	r3, #5
 8004fe2:	dc18      	bgt.n	8005016 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004fe4:	f7ff feb2 	bl	8004d4c <xTaskGetSchedulerState>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d109      	bne.n	8005002 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004fee:	4b11      	ldr	r3, [pc, #68]	; (8005034 <xTimerGenericCommand+0x98>)
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	f107 0110 	add.w	r1, r7, #16
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ffa:	f7fe fca1 	bl	8003940 <xQueueGenericSend>
 8004ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8005000:	e012      	b.n	8005028 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005002:	4b0c      	ldr	r3, [pc, #48]	; (8005034 <xTimerGenericCommand+0x98>)
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	f107 0110 	add.w	r1, r7, #16
 800500a:	2300      	movs	r3, #0
 800500c:	2200      	movs	r2, #0
 800500e:	f7fe fc97 	bl	8003940 <xQueueGenericSend>
 8005012:	6278      	str	r0, [r7, #36]	; 0x24
 8005014:	e008      	b.n	8005028 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005016:	4b07      	ldr	r3, [pc, #28]	; (8005034 <xTimerGenericCommand+0x98>)
 8005018:	6818      	ldr	r0, [r3, #0]
 800501a:	f107 0110 	add.w	r1, r7, #16
 800501e:	2300      	movs	r3, #0
 8005020:	683a      	ldr	r2, [r7, #0]
 8005022:	f7fe fd8b 	bl	8003b3c <xQueueGenericSendFromISR>
 8005026:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800502a:	4618      	mov	r0, r3
 800502c:	3728      	adds	r7, #40	; 0x28
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	20000d80 	.word	0x20000d80

08005038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af02      	add	r7, sp, #8
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005042:	4b22      	ldr	r3, [pc, #136]	; (80050cc <prvProcessExpiredTimer+0x94>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3304      	adds	r3, #4
 8005050:	4618      	mov	r0, r3
 8005052:	f7fe fb47 	bl	80036e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800505c:	f003 0304 	and.w	r3, r3, #4
 8005060:	2b00      	cmp	r3, #0
 8005062:	d022      	beq.n	80050aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	18d1      	adds	r1, r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	6978      	ldr	r0, [r7, #20]
 8005072:	f000 f8d1 	bl	8005218 <prvInsertTimerInActiveList>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01f      	beq.n	80050bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	2300      	movs	r3, #0
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	2100      	movs	r1, #0
 8005086:	6978      	ldr	r0, [r7, #20]
 8005088:	f7ff ff88 	bl	8004f9c <xTimerGenericCommand>
 800508c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d113      	bne.n	80050bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	60fb      	str	r3, [r7, #12]
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b0:	f023 0301 	bic.w	r3, r3, #1
 80050b4:	b2da      	uxtb	r2, r3
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	6978      	ldr	r0, [r7, #20]
 80050c2:	4798      	blx	r3
}
 80050c4:	bf00      	nop
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000d78 	.word	0x20000d78

080050d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b084      	sub	sp, #16
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050d8:	f107 0308 	add.w	r3, r7, #8
 80050dc:	4618      	mov	r0, r3
 80050de:	f000 f857 	bl	8005190 <prvGetNextExpireTime>
 80050e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4619      	mov	r1, r3
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f000 f803 	bl	80050f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80050ee:	f000 f8d5 	bl	800529c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80050f2:	e7f1      	b.n	80050d8 <prvTimerTask+0x8>

080050f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80050fe:	f7ff fa43 	bl	8004588 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005102:	f107 0308 	add.w	r3, r7, #8
 8005106:	4618      	mov	r0, r3
 8005108:	f000 f866 	bl	80051d8 <prvSampleTimeNow>
 800510c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d130      	bne.n	8005176 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10a      	bne.n	8005130 <prvProcessTimerOrBlockTask+0x3c>
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	429a      	cmp	r2, r3
 8005120:	d806      	bhi.n	8005130 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005122:	f7ff fa3f 	bl	80045a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005126:	68f9      	ldr	r1, [r7, #12]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7ff ff85 	bl	8005038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800512e:	e024      	b.n	800517a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005136:	4b13      	ldr	r3, [pc, #76]	; (8005184 <prvProcessTimerOrBlockTask+0x90>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <prvProcessTimerOrBlockTask+0x50>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <prvProcessTimerOrBlockTask+0x52>
 8005144:	2300      	movs	r3, #0
 8005146:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <prvProcessTimerOrBlockTask+0x94>)
 800514a:	6818      	ldr	r0, [r3, #0]
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	4619      	mov	r1, r3
 8005156:	f7fe ffa7 	bl	80040a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800515a:	f7ff fa23 	bl	80045a4 <xTaskResumeAll>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10a      	bne.n	800517a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005164:	4b09      	ldr	r3, [pc, #36]	; (800518c <prvProcessTimerOrBlockTask+0x98>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
}
 8005174:	e001      	b.n	800517a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005176:	f7ff fa15 	bl	80045a4 <xTaskResumeAll>
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	20000d7c 	.word	0x20000d7c
 8005188:	20000d80 	.word	0x20000d80
 800518c:	e000ed04 	.word	0xe000ed04

08005190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005198:	4b0e      	ldr	r3, [pc, #56]	; (80051d4 <prvGetNextExpireTime+0x44>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <prvGetNextExpireTime+0x16>
 80051a2:	2201      	movs	r2, #1
 80051a4:	e000      	b.n	80051a8 <prvGetNextExpireTime+0x18>
 80051a6:	2200      	movs	r2, #0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d105      	bne.n	80051c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051b4:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <prvGetNextExpireTime+0x44>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	e001      	b.n	80051c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80051c4:	68fb      	ldr	r3, [r7, #12]
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000d78 	.word	0x20000d78

080051d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80051e0:	f7ff fa7e 	bl	80046e0 <xTaskGetTickCount>
 80051e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80051e6:	4b0b      	ldr	r3, [pc, #44]	; (8005214 <prvSampleTimeNow+0x3c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d205      	bcs.n	80051fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80051f0:	f000 f936 	bl	8005460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e002      	b.n	8005202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005202:	4a04      	ldr	r2, [pc, #16]	; (8005214 <prvSampleTimeNow+0x3c>)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005208:	68fb      	ldr	r3, [r7, #12]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20000d88 	.word	0x20000d88

08005218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
 8005224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	429a      	cmp	r2, r3
 800523c:	d812      	bhi.n	8005264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	1ad2      	subs	r2, r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	429a      	cmp	r2, r3
 800524a:	d302      	bcc.n	8005252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800524c:	2301      	movs	r3, #1
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	e01b      	b.n	800528a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005252:	4b10      	ldr	r3, [pc, #64]	; (8005294 <prvInsertTimerInActiveList+0x7c>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	3304      	adds	r3, #4
 800525a:	4619      	mov	r1, r3
 800525c:	4610      	mov	r0, r2
 800525e:	f7fe fa08 	bl	8003672 <vListInsert>
 8005262:	e012      	b.n	800528a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	429a      	cmp	r2, r3
 800526a:	d206      	bcs.n	800527a <prvInsertTimerInActiveList+0x62>
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	429a      	cmp	r2, r3
 8005272:	d302      	bcc.n	800527a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e007      	b.n	800528a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <prvInsertTimerInActiveList+0x80>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3304      	adds	r3, #4
 8005282:	4619      	mov	r1, r3
 8005284:	4610      	mov	r0, r2
 8005286:	f7fe f9f4 	bl	8003672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800528a:	697b      	ldr	r3, [r7, #20]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000d7c 	.word	0x20000d7c
 8005298:	20000d78 	.word	0x20000d78

0800529c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b08e      	sub	sp, #56	; 0x38
 80052a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052a2:	e0ca      	b.n	800543a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	da18      	bge.n	80052dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80052aa:	1d3b      	adds	r3, r7, #4
 80052ac:	3304      	adds	r3, #4
 80052ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80052b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10a      	bne.n	80052cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	61fb      	str	r3, [r7, #28]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80052cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d2:	6850      	ldr	r0, [r2, #4]
 80052d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052d6:	6892      	ldr	r2, [r2, #8]
 80052d8:	4611      	mov	r1, r2
 80052da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f2c0 80aa 	blt.w	8005438 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	695b      	ldr	r3, [r3, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d004      	beq.n	80052fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	3304      	adds	r3, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fe f9f5 	bl	80036e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052fa:	463b      	mov	r3, r7
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff ff6b 	bl	80051d8 <prvSampleTimeNow>
 8005302:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b09      	cmp	r3, #9
 8005308:	f200 8097 	bhi.w	800543a <prvProcessReceivedCommands+0x19e>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <prvProcessReceivedCommands+0x78>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	0800533d 	.word	0x0800533d
 8005318:	0800533d 	.word	0x0800533d
 800531c:	0800533d 	.word	0x0800533d
 8005320:	080053b1 	.word	0x080053b1
 8005324:	080053c5 	.word	0x080053c5
 8005328:	0800540f 	.word	0x0800540f
 800532c:	0800533d 	.word	0x0800533d
 8005330:	0800533d 	.word	0x0800533d
 8005334:	080053b1 	.word	0x080053b1
 8005338:	080053c5 	.word	0x080053c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800533c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	b2da      	uxtb	r2, r3
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	18d1      	adds	r1, r2, r3
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800535a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800535c:	f7ff ff5c 	bl	8005218 <prvInsertTimerInActiveList>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d069      	beq.n	800543a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005368:	6a1b      	ldr	r3, [r3, #32]
 800536a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800536e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d05e      	beq.n	800543a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	441a      	add	r2, r3
 8005384:	2300      	movs	r3, #0
 8005386:	9300      	str	r3, [sp, #0]
 8005388:	2300      	movs	r3, #0
 800538a:	2100      	movs	r1, #0
 800538c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538e:	f7ff fe05 	bl	8004f9c <xTimerGenericCommand>
 8005392:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005394:	6a3b      	ldr	r3, [r7, #32]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d14f      	bne.n	800543a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800539a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	61bb      	str	r3, [r7, #24]
}
 80053ac:	bf00      	nop
 80053ae:	e7fe      	b.n	80053ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053b6:	f023 0301 	bic.w	r3, r3, #1
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80053c2:	e03a      	b.n	800543a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80053ca:	f043 0301 	orr.w	r3, r3, #1
 80053ce:	b2da      	uxtb	r2, r3
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	617b      	str	r3, [r7, #20]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	18d1      	adds	r1, r2, r3
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005408:	f7ff ff06 	bl	8005218 <prvInsertTimerInActiveList>
					break;
 800540c:	e015      	b.n	800543a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800540e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800541c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800541e:	f000 fbdf 	bl	8005be0 <vPortFree>
 8005422:	e00a      	b.n	800543a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800542a:	f023 0301 	bic.w	r3, r3, #1
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005436:	e000      	b.n	800543a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005438:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800543a:	4b08      	ldr	r3, [pc, #32]	; (800545c <prvProcessReceivedCommands+0x1c0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	1d39      	adds	r1, r7, #4
 8005440:	2200      	movs	r2, #0
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe fc16 	bl	8003c74 <xQueueReceive>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	f47f af2a 	bne.w	80052a4 <prvProcessReceivedCommands+0x8>
	}
}
 8005450:	bf00      	nop
 8005452:	bf00      	nop
 8005454:	3730      	adds	r7, #48	; 0x30
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000d80 	.word	0x20000d80

08005460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b088      	sub	sp, #32
 8005464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005466:	e048      	b.n	80054fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005468:	4b2d      	ldr	r3, [pc, #180]	; (8005520 <prvSwitchTimerLists+0xc0>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005472:	4b2b      	ldr	r3, [pc, #172]	; (8005520 <prvSwitchTimerLists+0xc0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3304      	adds	r3, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7fe f92f 	bl	80036e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d02e      	beq.n	80054fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d90e      	bls.n	80054cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054ba:	4b19      	ldr	r3, [pc, #100]	; (8005520 <prvSwitchTimerLists+0xc0>)
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3304      	adds	r3, #4
 80054c2:	4619      	mov	r1, r3
 80054c4:	4610      	mov	r0, r2
 80054c6:	f7fe f8d4 	bl	8003672 <vListInsert>
 80054ca:	e016      	b.n	80054fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054cc:	2300      	movs	r3, #0
 80054ce:	9300      	str	r3, [sp, #0]
 80054d0:	2300      	movs	r3, #0
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	2100      	movs	r1, #0
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f7ff fd60 	bl	8004f9c <xTimerGenericCommand>
 80054dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d10a      	bne.n	80054fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80054e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e8:	f383 8811 	msr	BASEPRI, r3
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f3bf 8f4f 	dsb	sy
 80054f4:	603b      	str	r3, [r7, #0]
}
 80054f6:	bf00      	nop
 80054f8:	e7fe      	b.n	80054f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80054fa:	4b09      	ldr	r3, [pc, #36]	; (8005520 <prvSwitchTimerLists+0xc0>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1b1      	bne.n	8005468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005504:	4b06      	ldr	r3, [pc, #24]	; (8005520 <prvSwitchTimerLists+0xc0>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800550a:	4b06      	ldr	r3, [pc, #24]	; (8005524 <prvSwitchTimerLists+0xc4>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a04      	ldr	r2, [pc, #16]	; (8005520 <prvSwitchTimerLists+0xc0>)
 8005510:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005512:	4a04      	ldr	r2, [pc, #16]	; (8005524 <prvSwitchTimerLists+0xc4>)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	6013      	str	r3, [r2, #0]
}
 8005518:	bf00      	nop
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000d78 	.word	0x20000d78
 8005524:	20000d7c 	.word	0x20000d7c

08005528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800552e:	f000 f969 	bl	8005804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <prvCheckForValidListAndQueue+0x60>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d120      	bne.n	800557c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800553a:	4814      	ldr	r0, [pc, #80]	; (800558c <prvCheckForValidListAndQueue+0x64>)
 800553c:	f7fe f848 	bl	80035d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005540:	4813      	ldr	r0, [pc, #76]	; (8005590 <prvCheckForValidListAndQueue+0x68>)
 8005542:	f7fe f845 	bl	80035d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <prvCheckForValidListAndQueue+0x6c>)
 8005548:	4a10      	ldr	r2, [pc, #64]	; (800558c <prvCheckForValidListAndQueue+0x64>)
 800554a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800554c:	4b12      	ldr	r3, [pc, #72]	; (8005598 <prvCheckForValidListAndQueue+0x70>)
 800554e:	4a10      	ldr	r2, [pc, #64]	; (8005590 <prvCheckForValidListAndQueue+0x68>)
 8005550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005552:	2300      	movs	r3, #0
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	4b11      	ldr	r3, [pc, #68]	; (800559c <prvCheckForValidListAndQueue+0x74>)
 8005558:	4a11      	ldr	r2, [pc, #68]	; (80055a0 <prvCheckForValidListAndQueue+0x78>)
 800555a:	2110      	movs	r1, #16
 800555c:	200a      	movs	r0, #10
 800555e:	f7fe f953 	bl	8003808 <xQueueGenericCreateStatic>
 8005562:	4603      	mov	r3, r0
 8005564:	4a08      	ldr	r2, [pc, #32]	; (8005588 <prvCheckForValidListAndQueue+0x60>)
 8005566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005568:	4b07      	ldr	r3, [pc, #28]	; (8005588 <prvCheckForValidListAndQueue+0x60>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d005      	beq.n	800557c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <prvCheckForValidListAndQueue+0x60>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	490b      	ldr	r1, [pc, #44]	; (80055a4 <prvCheckForValidListAndQueue+0x7c>)
 8005576:	4618      	mov	r0, r3
 8005578:	f7fe fd6c 	bl	8004054 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800557c:	f000 f972 	bl	8005864 <vPortExitCritical>
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000d80 	.word	0x20000d80
 800558c:	20000d50 	.word	0x20000d50
 8005590:	20000d64 	.word	0x20000d64
 8005594:	20000d78 	.word	0x20000d78
 8005598:	20000d7c 	.word	0x20000d7c
 800559c:	20000e2c 	.word	0x20000e2c
 80055a0:	20000d8c 	.word	0x20000d8c
 80055a4:	08005efc 	.word	0x08005efc

080055a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	3b04      	subs	r3, #4
 80055b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80055c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3b04      	subs	r3, #4
 80055c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f023 0201 	bic.w	r2, r3, #1
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3b04      	subs	r3, #4
 80055d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80055d8:	4a0c      	ldr	r2, [pc, #48]	; (800560c <pxPortInitialiseStack+0x64>)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	3b14      	subs	r3, #20
 80055e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3b04      	subs	r3, #4
 80055ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f06f 0202 	mvn.w	r2, #2
 80055f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	3b20      	subs	r3, #32
 80055fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055fe:	68fb      	ldr	r3, [r7, #12]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	08005611 	.word	0x08005611

08005610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800561a:	4b12      	ldr	r3, [pc, #72]	; (8005664 <prvTaskExitError+0x54>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d00a      	beq.n	800563a <prvTaskExitError+0x2a>
	__asm volatile
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60fb      	str	r3, [r7, #12]
}
 8005636:	bf00      	nop
 8005638:	e7fe      	b.n	8005638 <prvTaskExitError+0x28>
	__asm volatile
 800563a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563e:	f383 8811 	msr	BASEPRI, r3
 8005642:	f3bf 8f6f 	isb	sy
 8005646:	f3bf 8f4f 	dsb	sy
 800564a:	60bb      	str	r3, [r7, #8]
}
 800564c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800564e:	bf00      	nop
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d0fc      	beq.n	8005650 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005656:	bf00      	nop
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	2000000c 	.word	0x2000000c
	...

08005670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005670:	4b07      	ldr	r3, [pc, #28]	; (8005690 <pxCurrentTCBConst2>)
 8005672:	6819      	ldr	r1, [r3, #0]
 8005674:	6808      	ldr	r0, [r1, #0]
 8005676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567a:	f380 8809 	msr	PSP, r0
 800567e:	f3bf 8f6f 	isb	sy
 8005682:	f04f 0000 	mov.w	r0, #0
 8005686:	f380 8811 	msr	BASEPRI, r0
 800568a:	4770      	bx	lr
 800568c:	f3af 8000 	nop.w

08005690 <pxCurrentTCBConst2>:
 8005690:	20000850 	.word	0x20000850
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005698:	4808      	ldr	r0, [pc, #32]	; (80056bc <prvPortStartFirstTask+0x24>)
 800569a:	6800      	ldr	r0, [r0, #0]
 800569c:	6800      	ldr	r0, [r0, #0]
 800569e:	f380 8808 	msr	MSP, r0
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f380 8814 	msr	CONTROL, r0
 80056aa:	b662      	cpsie	i
 80056ac:	b661      	cpsie	f
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	df00      	svc	0
 80056b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80056ba:	bf00      	nop
 80056bc:	e000ed08 	.word	0xe000ed08

080056c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b086      	sub	sp, #24
 80056c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80056c6:	4b46      	ldr	r3, [pc, #280]	; (80057e0 <xPortStartScheduler+0x120>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a46      	ldr	r2, [pc, #280]	; (80057e4 <xPortStartScheduler+0x124>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d10a      	bne.n	80056e6 <xPortStartScheduler+0x26>
	__asm volatile
 80056d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d4:	f383 8811 	msr	BASEPRI, r3
 80056d8:	f3bf 8f6f 	isb	sy
 80056dc:	f3bf 8f4f 	dsb	sy
 80056e0:	613b      	str	r3, [r7, #16]
}
 80056e2:	bf00      	nop
 80056e4:	e7fe      	b.n	80056e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80056e6:	4b3e      	ldr	r3, [pc, #248]	; (80057e0 <xPortStartScheduler+0x120>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a3f      	ldr	r2, [pc, #252]	; (80057e8 <xPortStartScheduler+0x128>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d10a      	bne.n	8005706 <xPortStartScheduler+0x46>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	60fb      	str	r3, [r7, #12]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005706:	4b39      	ldr	r3, [pc, #228]	; (80057ec <xPortStartScheduler+0x12c>)
 8005708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	22ff      	movs	r2, #255	; 0xff
 8005716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005728:	b2da      	uxtb	r2, r3
 800572a:	4b31      	ldr	r3, [pc, #196]	; (80057f0 <xPortStartScheduler+0x130>)
 800572c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800572e:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <xPortStartScheduler+0x134>)
 8005730:	2207      	movs	r2, #7
 8005732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005734:	e009      	b.n	800574a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005736:	4b2f      	ldr	r3, [pc, #188]	; (80057f4 <xPortStartScheduler+0x134>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3b01      	subs	r3, #1
 800573c:	4a2d      	ldr	r2, [pc, #180]	; (80057f4 <xPortStartScheduler+0x134>)
 800573e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	b2db      	uxtb	r3, r3
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	b2db      	uxtb	r3, r3
 8005748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	b2db      	uxtb	r3, r3
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d0ef      	beq.n	8005736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005756:	4b27      	ldr	r3, [pc, #156]	; (80057f4 <xPortStartScheduler+0x134>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f1c3 0307 	rsb	r3, r3, #7
 800575e:	2b04      	cmp	r3, #4
 8005760:	d00a      	beq.n	8005778 <xPortStartScheduler+0xb8>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	60bb      	str	r3, [r7, #8]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005778:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <xPortStartScheduler+0x134>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	4a1d      	ldr	r2, [pc, #116]	; (80057f4 <xPortStartScheduler+0x134>)
 8005780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005782:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <xPortStartScheduler+0x134>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800578a:	4a1a      	ldr	r2, [pc, #104]	; (80057f4 <xPortStartScheduler+0x134>)
 800578c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005796:	4b18      	ldr	r3, [pc, #96]	; (80057f8 <xPortStartScheduler+0x138>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a17      	ldr	r2, [pc, #92]	; (80057f8 <xPortStartScheduler+0x138>)
 800579c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80057a2:	4b15      	ldr	r3, [pc, #84]	; (80057f8 <xPortStartScheduler+0x138>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a14      	ldr	r2, [pc, #80]	; (80057f8 <xPortStartScheduler+0x138>)
 80057a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80057ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80057ae:	f000 f8dd 	bl	800596c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80057b2:	4b12      	ldr	r3, [pc, #72]	; (80057fc <xPortStartScheduler+0x13c>)
 80057b4:	2200      	movs	r2, #0
 80057b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80057b8:	f000 f8fc 	bl	80059b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80057bc:	4b10      	ldr	r3, [pc, #64]	; (8005800 <xPortStartScheduler+0x140>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0f      	ldr	r2, [pc, #60]	; (8005800 <xPortStartScheduler+0x140>)
 80057c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80057c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80057c8:	f7ff ff66 	bl	8005698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80057cc:	f7ff f852 	bl	8004874 <vTaskSwitchContext>
	prvTaskExitError();
 80057d0:	f7ff ff1e 	bl	8005610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	e000ed00 	.word	0xe000ed00
 80057e4:	410fc271 	.word	0x410fc271
 80057e8:	410fc270 	.word	0x410fc270
 80057ec:	e000e400 	.word	0xe000e400
 80057f0:	20000e7c 	.word	0x20000e7c
 80057f4:	20000e80 	.word	0x20000e80
 80057f8:	e000ed20 	.word	0xe000ed20
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	e000ef34 	.word	0xe000ef34

08005804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
	__asm volatile
 800580a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580e:	f383 8811 	msr	BASEPRI, r3
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	f3bf 8f4f 	dsb	sy
 800581a:	607b      	str	r3, [r7, #4]
}
 800581c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800581e:	4b0f      	ldr	r3, [pc, #60]	; (800585c <vPortEnterCritical+0x58>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3301      	adds	r3, #1
 8005824:	4a0d      	ldr	r2, [pc, #52]	; (800585c <vPortEnterCritical+0x58>)
 8005826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005828:	4b0c      	ldr	r3, [pc, #48]	; (800585c <vPortEnterCritical+0x58>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d10f      	bne.n	8005850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005830:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <vPortEnterCritical+0x5c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <vPortEnterCritical+0x4c>
	__asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	603b      	str	r3, [r7, #0]
}
 800584c:	bf00      	nop
 800584e:	e7fe      	b.n	800584e <vPortEnterCritical+0x4a>
	}
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr
 800585c:	2000000c 	.word	0x2000000c
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800586a:	4b12      	ldr	r3, [pc, #72]	; (80058b4 <vPortExitCritical+0x50>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d10a      	bne.n	8005888 <vPortExitCritical+0x24>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	607b      	str	r3, [r7, #4]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005888:	4b0a      	ldr	r3, [pc, #40]	; (80058b4 <vPortExitCritical+0x50>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3b01      	subs	r3, #1
 800588e:	4a09      	ldr	r2, [pc, #36]	; (80058b4 <vPortExitCritical+0x50>)
 8005890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005892:	4b08      	ldr	r3, [pc, #32]	; (80058b4 <vPortExitCritical+0x50>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d105      	bne.n	80058a6 <vPortExitCritical+0x42>
 800589a:	2300      	movs	r3, #0
 800589c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	f383 8811 	msr	BASEPRI, r3
}
 80058a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	2000000c 	.word	0x2000000c
	...

080058c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80058c0:	f3ef 8009 	mrs	r0, PSP
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	4b15      	ldr	r3, [pc, #84]	; (8005920 <pxCurrentTCBConst>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	f01e 0f10 	tst.w	lr, #16
 80058d0:	bf08      	it	eq
 80058d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80058d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058da:	6010      	str	r0, [r2, #0]
 80058dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80058e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80058e4:	f380 8811 	msr	BASEPRI, r0
 80058e8:	f3bf 8f4f 	dsb	sy
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f7fe ffc0 	bl	8004874 <vTaskSwitchContext>
 80058f4:	f04f 0000 	mov.w	r0, #0
 80058f8:	f380 8811 	msr	BASEPRI, r0
 80058fc:	bc09      	pop	{r0, r3}
 80058fe:	6819      	ldr	r1, [r3, #0]
 8005900:	6808      	ldr	r0, [r1, #0]
 8005902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005906:	f01e 0f10 	tst.w	lr, #16
 800590a:	bf08      	it	eq
 800590c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005910:	f380 8809 	msr	PSP, r0
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	f3af 8000 	nop.w

08005920 <pxCurrentTCBConst>:
 8005920:	20000850 	.word	0x20000850
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop

08005928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
	__asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
}
 8005940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005942:	f7fe fedd 	bl	8004700 <xTaskIncrementTick>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800594c:	4b06      	ldr	r3, [pc, #24]	; (8005968 <xPortSysTickHandler+0x40>)
 800594e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005952:	601a      	str	r2, [r3, #0]
 8005954:	2300      	movs	r3, #0
 8005956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	f383 8811 	msr	BASEPRI, r3
}
 800595e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	e000ed04 	.word	0xe000ed04

0800596c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005970:	4b0b      	ldr	r3, [pc, #44]	; (80059a0 <vPortSetupTimerInterrupt+0x34>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <vPortSetupTimerInterrupt+0x38>)
 8005978:	2200      	movs	r2, #0
 800597a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800597c:	4b0a      	ldr	r3, [pc, #40]	; (80059a8 <vPortSetupTimerInterrupt+0x3c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a0a      	ldr	r2, [pc, #40]	; (80059ac <vPortSetupTimerInterrupt+0x40>)
 8005982:	fba2 2303 	umull	r2, r3, r2, r3
 8005986:	099b      	lsrs	r3, r3, #6
 8005988:	4a09      	ldr	r2, [pc, #36]	; (80059b0 <vPortSetupTimerInterrupt+0x44>)
 800598a:	3b01      	subs	r3, #1
 800598c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800598e:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <vPortSetupTimerInterrupt+0x34>)
 8005990:	2207      	movs	r2, #7
 8005992:	601a      	str	r2, [r3, #0]
}
 8005994:	bf00      	nop
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	e000e010 	.word	0xe000e010
 80059a4:	e000e018 	.word	0xe000e018
 80059a8:	20000000 	.word	0x20000000
 80059ac:	10624dd3 	.word	0x10624dd3
 80059b0:	e000e014 	.word	0xe000e014

080059b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80059b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80059c4 <vPortEnableVFP+0x10>
 80059b8:	6801      	ldr	r1, [r0, #0]
 80059ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80059be:	6001      	str	r1, [r0, #0]
 80059c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80059c2:	bf00      	nop
 80059c4:	e000ed88 	.word	0xe000ed88

080059c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80059ce:	f3ef 8305 	mrs	r3, IPSR
 80059d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b0f      	cmp	r3, #15
 80059d8:	d914      	bls.n	8005a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80059da:	4a17      	ldr	r2, [pc, #92]	; (8005a38 <vPortValidateInterruptPriority+0x70>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80059e4:	4b15      	ldr	r3, [pc, #84]	; (8005a3c <vPortValidateInterruptPriority+0x74>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	7afa      	ldrb	r2, [r7, #11]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d20a      	bcs.n	8005a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	607b      	str	r3, [r7, #4]
}
 8005a00:	bf00      	nop
 8005a02:	e7fe      	b.n	8005a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a04:	4b0e      	ldr	r3, [pc, #56]	; (8005a40 <vPortValidateInterruptPriority+0x78>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a0c:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <vPortValidateInterruptPriority+0x7c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d90a      	bls.n	8005a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	603b      	str	r3, [r7, #0]
}
 8005a26:	bf00      	nop
 8005a28:	e7fe      	b.n	8005a28 <vPortValidateInterruptPriority+0x60>
	}
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	e000e3f0 	.word	0xe000e3f0
 8005a3c:	20000e7c 	.word	0x20000e7c
 8005a40:	e000ed0c 	.word	0xe000ed0c
 8005a44:	20000e80 	.word	0x20000e80

08005a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005a50:	2300      	movs	r3, #0
 8005a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005a54:	f7fe fd98 	bl	8004588 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005a58:	4b5b      	ldr	r3, [pc, #364]	; (8005bc8 <pvPortMalloc+0x180>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005a60:	f000 f920 	bl	8005ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005a64:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <pvPortMalloc+0x184>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f040 8093 	bne.w	8005b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01d      	beq.n	8005ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005a78:	2208      	movs	r2, #8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d014      	beq.n	8005ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f023 0307 	bic.w	r3, r3, #7
 8005a90:	3308      	adds	r3, #8
 8005a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f003 0307 	and.w	r3, r3, #7
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	617b      	str	r3, [r7, #20]
}
 8005ab0:	bf00      	nop
 8005ab2:	e7fe      	b.n	8005ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d06e      	beq.n	8005b98 <pvPortMalloc+0x150>
 8005aba:	4b45      	ldr	r3, [pc, #276]	; (8005bd0 <pvPortMalloc+0x188>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d869      	bhi.n	8005b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005ac4:	4b43      	ldr	r3, [pc, #268]	; (8005bd4 <pvPortMalloc+0x18c>)
 8005ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ac8:	4b42      	ldr	r3, [pc, #264]	; (8005bd4 <pvPortMalloc+0x18c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ace:	e004      	b.n	8005ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d903      	bls.n	8005aec <pvPortMalloc+0xa4>
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d1f1      	bne.n	8005ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005aec:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <pvPortMalloc+0x180>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d050      	beq.n	8005b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2208      	movs	r2, #8
 8005afc:	4413      	add	r3, r2
 8005afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	2308      	movs	r3, #8
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d91f      	bls.n	8005b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00a      	beq.n	8005b40 <pvPortMalloc+0xf8>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	613b      	str	r3, [r7, #16]
}
 8005b3c:	bf00      	nop
 8005b3e:	e7fe      	b.n	8005b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005b52:	69b8      	ldr	r0, [r7, #24]
 8005b54:	f000 f908 	bl	8005d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <pvPortMalloc+0x188>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	4a1b      	ldr	r2, [pc, #108]	; (8005bd0 <pvPortMalloc+0x188>)
 8005b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005b66:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <pvPortMalloc+0x188>)
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b1b      	ldr	r3, [pc, #108]	; (8005bd8 <pvPortMalloc+0x190>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d203      	bcs.n	8005b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005b72:	4b17      	ldr	r3, [pc, #92]	; (8005bd0 <pvPortMalloc+0x188>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a18      	ldr	r2, [pc, #96]	; (8005bd8 <pvPortMalloc+0x190>)
 8005b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <pvPortMalloc+0x184>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005b8e:	4b13      	ldr	r3, [pc, #76]	; (8005bdc <pvPortMalloc+0x194>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a11      	ldr	r2, [pc, #68]	; (8005bdc <pvPortMalloc+0x194>)
 8005b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005b98:	f7fe fd04 	bl	80045a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	f003 0307 	and.w	r3, r3, #7
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00a      	beq.n	8005bbc <pvPortMalloc+0x174>
	__asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	60fb      	str	r3, [r7, #12]
}
 8005bb8:	bf00      	nop
 8005bba:	e7fe      	b.n	8005bba <pvPortMalloc+0x172>
	return pvReturn;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3728      	adds	r7, #40	; 0x28
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20004a8c 	.word	0x20004a8c
 8005bcc:	20004aa0 	.word	0x20004aa0
 8005bd0:	20004a90 	.word	0x20004a90
 8005bd4:	20004a84 	.word	0x20004a84
 8005bd8:	20004a94 	.word	0x20004a94
 8005bdc:	20004a98 	.word	0x20004a98

08005be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b086      	sub	sp, #24
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d04d      	beq.n	8005c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005bf2:	2308      	movs	r3, #8
 8005bf4:	425b      	negs	r3, r3
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	4b24      	ldr	r3, [pc, #144]	; (8005c98 <vPortFree+0xb8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4013      	ands	r3, r2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d10a      	bne.n	8005c24 <vPortFree+0x44>
	__asm volatile
 8005c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c12:	f383 8811 	msr	BASEPRI, r3
 8005c16:	f3bf 8f6f 	isb	sy
 8005c1a:	f3bf 8f4f 	dsb	sy
 8005c1e:	60fb      	str	r3, [r7, #12]
}
 8005c20:	bf00      	nop
 8005c22:	e7fe      	b.n	8005c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00a      	beq.n	8005c42 <vPortFree+0x62>
	__asm volatile
 8005c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c30:	f383 8811 	msr	BASEPRI, r3
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	60bb      	str	r3, [r7, #8]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	4b14      	ldr	r3, [pc, #80]	; (8005c98 <vPortFree+0xb8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d01e      	beq.n	8005c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11a      	bne.n	8005c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	4b0e      	ldr	r3, [pc, #56]	; (8005c98 <vPortFree+0xb8>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	43db      	mvns	r3, r3
 8005c62:	401a      	ands	r2, r3
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005c68:	f7fe fc8e 	bl	8004588 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	685a      	ldr	r2, [r3, #4]
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <vPortFree+0xbc>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4413      	add	r3, r2
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <vPortFree+0xbc>)
 8005c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005c7a:	6938      	ldr	r0, [r7, #16]
 8005c7c:	f000 f874 	bl	8005d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <vPortFree+0xc0>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3301      	adds	r3, #1
 8005c86:	4a06      	ldr	r2, [pc, #24]	; (8005ca0 <vPortFree+0xc0>)
 8005c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005c8a:	f7fe fc8b 	bl	80045a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20004aa0 	.word	0x20004aa0
 8005c9c:	20004a90 	.word	0x20004a90
 8005ca0:	20004a9c 	.word	0x20004a9c

08005ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005cb0:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <prvHeapInit+0xac>)
 8005cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00c      	beq.n	8005cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3307      	adds	r3, #7
 8005cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 0307 	bic.w	r3, r3, #7
 8005cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ccc:	68ba      	ldr	r2, [r7, #8]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	4a1f      	ldr	r2, [pc, #124]	; (8005d50 <prvHeapInit+0xac>)
 8005cd4:	4413      	add	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005cdc:	4a1d      	ldr	r2, [pc, #116]	; (8005d54 <prvHeapInit+0xb0>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ce2:	4b1c      	ldr	r3, [pc, #112]	; (8005d54 <prvHeapInit+0xb0>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005cf0:	2208      	movs	r2, #8
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1a9b      	subs	r3, r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f023 0307 	bic.w	r3, r3, #7
 8005cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4a15      	ldr	r2, [pc, #84]	; (8005d58 <prvHeapInit+0xb4>)
 8005d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005d06:	4b14      	ldr	r3, [pc, #80]	; (8005d58 <prvHeapInit+0xb4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005d0e:	4b12      	ldr	r3, [pc, #72]	; (8005d58 <prvHeapInit+0xb4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005d24:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <prvHeapInit+0xb4>)
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4a0a      	ldr	r2, [pc, #40]	; (8005d5c <prvHeapInit+0xb8>)
 8005d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4a09      	ldr	r2, [pc, #36]	; (8005d60 <prvHeapInit+0xbc>)
 8005d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005d3c:	4b09      	ldr	r3, [pc, #36]	; (8005d64 <prvHeapInit+0xc0>)
 8005d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005d42:	601a      	str	r2, [r3, #0]
}
 8005d44:	bf00      	nop
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr
 8005d50:	20000e84 	.word	0x20000e84
 8005d54:	20004a84 	.word	0x20004a84
 8005d58:	20004a8c 	.word	0x20004a8c
 8005d5c:	20004a94 	.word	0x20004a94
 8005d60:	20004a90 	.word	0x20004a90
 8005d64:	20004aa0 	.word	0x20004aa0

08005d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005d70:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <prvInsertBlockIntoFreeList+0xac>)
 8005d72:	60fb      	str	r3, [r7, #12]
 8005d74:	e002      	b.n	8005d7c <prvInsertBlockIntoFreeList+0x14>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d8f7      	bhi.n	8005d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d108      	bne.n	8005daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	685a      	ldr	r2, [r3, #4]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	441a      	add	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	68ba      	ldr	r2, [r7, #8]
 8005db4:	441a      	add	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d118      	bne.n	8005df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <prvInsertBlockIntoFreeList+0xb0>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d00d      	beq.n	8005de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	e008      	b.n	8005df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005de6:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <prvInsertBlockIntoFreeList+0xb0>)
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e003      	b.n	8005df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d002      	beq.n	8005e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20004a84 	.word	0x20004a84
 8005e18:	20004a8c 	.word	0x20004a8c

08005e1c <__libc_init_array>:
 8005e1c:	b570      	push	{r4, r5, r6, lr}
 8005e1e:	4d0d      	ldr	r5, [pc, #52]	; (8005e54 <__libc_init_array+0x38>)
 8005e20:	4c0d      	ldr	r4, [pc, #52]	; (8005e58 <__libc_init_array+0x3c>)
 8005e22:	1b64      	subs	r4, r4, r5
 8005e24:	10a4      	asrs	r4, r4, #2
 8005e26:	2600      	movs	r6, #0
 8005e28:	42a6      	cmp	r6, r4
 8005e2a:	d109      	bne.n	8005e40 <__libc_init_array+0x24>
 8005e2c:	4d0b      	ldr	r5, [pc, #44]	; (8005e5c <__libc_init_array+0x40>)
 8005e2e:	4c0c      	ldr	r4, [pc, #48]	; (8005e60 <__libc_init_array+0x44>)
 8005e30:	f000 f82e 	bl	8005e90 <_init>
 8005e34:	1b64      	subs	r4, r4, r5
 8005e36:	10a4      	asrs	r4, r4, #2
 8005e38:	2600      	movs	r6, #0
 8005e3a:	42a6      	cmp	r6, r4
 8005e3c:	d105      	bne.n	8005e4a <__libc_init_array+0x2e>
 8005e3e:	bd70      	pop	{r4, r5, r6, pc}
 8005e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e44:	4798      	blx	r3
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7ee      	b.n	8005e28 <__libc_init_array+0xc>
 8005e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e4e:	4798      	blx	r3
 8005e50:	3601      	adds	r6, #1
 8005e52:	e7f2      	b.n	8005e3a <__libc_init_array+0x1e>
 8005e54:	08005f6c 	.word	0x08005f6c
 8005e58:	08005f6c 	.word	0x08005f6c
 8005e5c:	08005f6c 	.word	0x08005f6c
 8005e60:	08005f70 	.word	0x08005f70

08005e64 <memcpy>:
 8005e64:	440a      	add	r2, r1
 8005e66:	4291      	cmp	r1, r2
 8005e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e6c:	d100      	bne.n	8005e70 <memcpy+0xc>
 8005e6e:	4770      	bx	lr
 8005e70:	b510      	push	{r4, lr}
 8005e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e7a:	4291      	cmp	r1, r2
 8005e7c:	d1f9      	bne.n	8005e72 <memcpy+0xe>
 8005e7e:	bd10      	pop	{r4, pc}

08005e80 <memset>:
 8005e80:	4402      	add	r2, r0
 8005e82:	4603      	mov	r3, r0
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d100      	bne.n	8005e8a <memset+0xa>
 8005e88:	4770      	bx	lr
 8005e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e8e:	e7f9      	b.n	8005e84 <memset+0x4>

08005e90 <_init>:
 8005e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e92:	bf00      	nop
 8005e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e96:	bc08      	pop	{r3}
 8005e98:	469e      	mov	lr, r3
 8005e9a:	4770      	bx	lr

08005e9c <_fini>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	bf00      	nop
 8005ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea2:	bc08      	pop	{r3}
 8005ea4:	469e      	mov	lr, r3
 8005ea6:	4770      	bx	lr
